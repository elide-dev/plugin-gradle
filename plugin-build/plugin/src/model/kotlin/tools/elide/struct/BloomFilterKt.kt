//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: elide/struct/bloom.proto

package tools.elide.struct;

@kotlin.jvm.JvmName("-initializebloomFilter")
inline fun bloomFilter(block: tools.elide.struct.BloomFilterKt.Dsl.() -> kotlin.Unit): tools.elide.struct.BloomFilter =
  tools.elide.struct.BloomFilterKt.Dsl._create(tools.elide.struct.BloomFilter.newBuilder()).apply { block() }._build()
object BloomFilterKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: tools.elide.struct.BloomFilter.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: tools.elide.struct.BloomFilter.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): tools.elide.struct.BloomFilter = _builder.build()

    /**
     * <pre>
     * Hash algorithm in use for this Bloom filter. This must be considered an immutable value for a constituted filter,
     * otherwise the underlying data may be rendered unusable.
     * </pre>
     *
     * <code>.crypto.HashAlgorithm algorithm = 1;</code>
     */
     var algorithm: tools.elide.crypto.HashAlgorithm
      @JvmName("getAlgorithm")
      get() = _builder.getAlgorithm()
      @JvmName("setAlgorithm")
      set(value) {
        _builder.setAlgorithm(value)
      }
    /**
     * <pre>
     * Hash algorithm in use for this Bloom filter. This must be considered an immutable value for a constituted filter,
     * otherwise the underlying data may be rendered unusable.
     * </pre>
     *
     * <code>.crypto.HashAlgorithm algorithm = 1;</code>
     */
    fun clearAlgorithm() {
      _builder.clearAlgorithm()
    }

    /**
     * <pre>
     * Number of hash rounds to apply when adding data to this filter.
     * </pre>
     *
     * <code>uint32 rounds = 2;</code>
     */
    var rounds: kotlin.Int
      @JvmName("getRounds")
      get() = _builder.getRounds()
      @JvmName("setRounds")
      set(value) {
        _builder.setRounds(value)
      }
    /**
     * <pre>
     * Number of hash rounds to apply when adding data to this filter.
     * </pre>
     *
     * <code>uint32 rounds = 2;</code>
     */
    fun clearRounds() {
      _builder.clearRounds()
    }

    /**
     * <pre>
     * Number of items in the filter, across all layers.
     * </pre>
     *
     * <code>uint64 count = 3;</code>
     */
    var count: kotlin.Long
      @JvmName("getCount")
      get() = _builder.getCount()
      @JvmName("setCount")
      set(value) {
        _builder.setCount(value)
      }
    /**
     * <pre>
     * Number of items in the filter, across all layers.
     * </pre>
     *
     * <code>uint64 count = 3;</code>
     */
    fun clearCount() {
      _builder.clearCount()
    }

    /**
     * <pre>
     * Limit setting to enforce for this Bloom filter, before re-calculating contents. Optional.
     * </pre>
     *
     * <code>uint64 limit = 4;</code>
     */
    var limit: kotlin.Long
      @JvmName("getLimit")
      get() = _builder.getLimit()
      @JvmName("setLimit")
      set(value) {
        _builder.setLimit(value)
      }
    /**
     * <pre>
     * Limit setting to enforce for this Bloom filter, before re-calculating contents. Optional.
     * </pre>
     *
     * <code>uint64 limit = 4;</code>
     */
    fun clearLimit() {
      _builder.clearLimit()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class LayerProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Specifies each layer of this Bloom filter structure. If no more than one layer is present, the structure represents
     * a simple, single-layer regular Bloom filter. If more than one layer are present, the structure represents a multi-
     * layer (*Layered*) Bloom filter.
     * </pre>
     *
     * <code>repeated .struct.BloomFilter.FilterLayer layer = 5;</code>
     */
     val layer: com.google.protobuf.kotlin.DslList<tools.elide.struct.BloomFilter.FilterLayer, LayerProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getLayerList()
      )
    /**
     * <pre>
     * Specifies each layer of this Bloom filter structure. If no more than one layer is present, the structure represents
     * a simple, single-layer regular Bloom filter. If more than one layer are present, the structure represents a multi-
     * layer (*Layered*) Bloom filter.
     * </pre>
     *
     * <code>repeated .struct.BloomFilter.FilterLayer layer = 5;</code>
     * @param value The layer to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addLayer")
    fun com.google.protobuf.kotlin.DslList<tools.elide.struct.BloomFilter.FilterLayer, LayerProxy>.add(value: tools.elide.struct.BloomFilter.FilterLayer) {
      _builder.addLayer(value)
    }
    /**
     * <pre>
     * Specifies each layer of this Bloom filter structure. If no more than one layer is present, the structure represents
     * a simple, single-layer regular Bloom filter. If more than one layer are present, the structure represents a multi-
     * layer (*Layered*) Bloom filter.
     * </pre>
     *
     * <code>repeated .struct.BloomFilter.FilterLayer layer = 5;</code>
     * @param value The layer to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignLayer")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.struct.BloomFilter.FilterLayer, LayerProxy>.plusAssign(value: tools.elide.struct.BloomFilter.FilterLayer) {
      add(value)
    }
    /**
     * <pre>
     * Specifies each layer of this Bloom filter structure. If no more than one layer is present, the structure represents
     * a simple, single-layer regular Bloom filter. If more than one layer are present, the structure represents a multi-
     * layer (*Layered*) Bloom filter.
     * </pre>
     *
     * <code>repeated .struct.BloomFilter.FilterLayer layer = 5;</code>
     * @param values The layer to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllLayer")
    fun com.google.protobuf.kotlin.DslList<tools.elide.struct.BloomFilter.FilterLayer, LayerProxy>.addAll(values: kotlin.collections.Iterable<tools.elide.struct.BloomFilter.FilterLayer>) {
      _builder.addAllLayer(values)
    }
    /**
     * <pre>
     * Specifies each layer of this Bloom filter structure. If no more than one layer is present, the structure represents
     * a simple, single-layer regular Bloom filter. If more than one layer are present, the structure represents a multi-
     * layer (*Layered*) Bloom filter.
     * </pre>
     *
     * <code>repeated .struct.BloomFilter.FilterLayer layer = 5;</code>
     * @param values The layer to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllLayer")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.struct.BloomFilter.FilterLayer, LayerProxy>.plusAssign(values: kotlin.collections.Iterable<tools.elide.struct.BloomFilter.FilterLayer>) {
      addAll(values)
    }
    /**
     * <pre>
     * Specifies each layer of this Bloom filter structure. If no more than one layer is present, the structure represents
     * a simple, single-layer regular Bloom filter. If more than one layer are present, the structure represents a multi-
     * layer (*Layered*) Bloom filter.
     * </pre>
     *
     * <code>repeated .struct.BloomFilter.FilterLayer layer = 5;</code>
     * @param index The index to set the value at.
     * @param value The layer to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setLayer")
    operator fun com.google.protobuf.kotlin.DslList<tools.elide.struct.BloomFilter.FilterLayer, LayerProxy>.set(index: kotlin.Int, value: tools.elide.struct.BloomFilter.FilterLayer) {
      _builder.setLayer(index, value)
    }
    /**
     * <pre>
     * Specifies each layer of this Bloom filter structure. If no more than one layer is present, the structure represents
     * a simple, single-layer regular Bloom filter. If more than one layer are present, the structure represents a multi-
     * layer (*Layered*) Bloom filter.
     * </pre>
     *
     * <code>repeated .struct.BloomFilter.FilterLayer layer = 5;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearLayer")
    fun com.google.protobuf.kotlin.DslList<tools.elide.struct.BloomFilter.FilterLayer, LayerProxy>.clear() {
      _builder.clearLayer()
    }

  }
  @kotlin.jvm.JvmName("-initializefilterLayer")
  inline fun filterLayer(block: tools.elide.struct.BloomFilterKt.FilterLayerKt.Dsl.() -> kotlin.Unit): tools.elide.struct.BloomFilter.FilterLayer =
    tools.elide.struct.BloomFilterKt.FilterLayerKt.Dsl._create(tools.elide.struct.BloomFilter.FilterLayer.newBuilder()).apply { block() }._build()
  object FilterLayerKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      private val _builder: tools.elide.struct.BloomFilter.FilterLayer.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: tools.elide.struct.BloomFilter.FilterLayer.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): tools.elide.struct.BloomFilter.FilterLayer = _builder.build()

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      class BitsetProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * Raw bit sets for each layer of the filter.
       * </pre>
       *
       * <code>repeated fixed64 bitset = 2;</code>
       */
       val bitset: com.google.protobuf.kotlin.DslList<kotlin.Long, BitsetProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getBitsetList()
        )
      /**
       * <pre>
       * Raw bit sets for each layer of the filter.
       * </pre>
       *
       * <code>repeated fixed64 bitset = 2;</code>
       * @param value The bitset to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addBitset")
      fun com.google.protobuf.kotlin.DslList<kotlin.Long, BitsetProxy>.add(value: kotlin.Long) {
        _builder.addBitset(value)
      }/**
       * <pre>
       * Raw bit sets for each layer of the filter.
       * </pre>
       *
       * <code>repeated fixed64 bitset = 2;</code>
       * @param value The bitset to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignBitset")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Long, BitsetProxy>.plusAssign(value: kotlin.Long) {
        add(value)
      }/**
       * <pre>
       * Raw bit sets for each layer of the filter.
       * </pre>
       *
       * <code>repeated fixed64 bitset = 2;</code>
       * @param values The bitset to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllBitset")
      fun com.google.protobuf.kotlin.DslList<kotlin.Long, BitsetProxy>.addAll(values: kotlin.collections.Iterable<kotlin.Long>) {
        _builder.addAllBitset(values)
      }/**
       * <pre>
       * Raw bit sets for each layer of the filter.
       * </pre>
       *
       * <code>repeated fixed64 bitset = 2;</code>
       * @param values The bitset to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllBitset")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Long, BitsetProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.Long>) {
        addAll(values)
      }/**
       * <pre>
       * Raw bit sets for each layer of the filter.
       * </pre>
       *
       * <code>repeated fixed64 bitset = 2;</code>
       * @param index The index to set the value at.
       * @param value The bitset to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setBitset")
      operator fun com.google.protobuf.kotlin.DslList<kotlin.Long, BitsetProxy>.set(index: kotlin.Int, value: kotlin.Long) {
        _builder.setBitset(index, value)
      }/**
       * <pre>
       * Raw bit sets for each layer of the filter.
       * </pre>
       *
       * <code>repeated fixed64 bitset = 2;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearBitset")
      fun com.google.protobuf.kotlin.DslList<kotlin.Long, BitsetProxy>.clear() {
        _builder.clearBitset()
      }
      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      class CountProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * Count of items for each bucket in this filter layer. Only present if this is a *Counting Bloom filter*, in which
       * the bit set indicates presence for each bucket and the count indicates the value for each bucket.
       * </pre>
       *
       * <code>repeated uint64 count = 4;</code>
       */
       val count: com.google.protobuf.kotlin.DslList<kotlin.Long, CountProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getCountList()
        )
      /**
       * <pre>
       * Count of items for each bucket in this filter layer. Only present if this is a *Counting Bloom filter*, in which
       * the bit set indicates presence for each bucket and the count indicates the value for each bucket.
       * </pre>
       *
       * <code>repeated uint64 count = 4;</code>
       * @param value The count to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addCount")
      fun com.google.protobuf.kotlin.DslList<kotlin.Long, CountProxy>.add(value: kotlin.Long) {
        _builder.addCount(value)
      }/**
       * <pre>
       * Count of items for each bucket in this filter layer. Only present if this is a *Counting Bloom filter*, in which
       * the bit set indicates presence for each bucket and the count indicates the value for each bucket.
       * </pre>
       *
       * <code>repeated uint64 count = 4;</code>
       * @param value The count to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignCount")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Long, CountProxy>.plusAssign(value: kotlin.Long) {
        add(value)
      }/**
       * <pre>
       * Count of items for each bucket in this filter layer. Only present if this is a *Counting Bloom filter*, in which
       * the bit set indicates presence for each bucket and the count indicates the value for each bucket.
       * </pre>
       *
       * <code>repeated uint64 count = 4;</code>
       * @param values The count to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllCount")
      fun com.google.protobuf.kotlin.DslList<kotlin.Long, CountProxy>.addAll(values: kotlin.collections.Iterable<kotlin.Long>) {
        _builder.addAllCount(values)
      }/**
       * <pre>
       * Count of items for each bucket in this filter layer. Only present if this is a *Counting Bloom filter*, in which
       * the bit set indicates presence for each bucket and the count indicates the value for each bucket.
       * </pre>
       *
       * <code>repeated uint64 count = 4;</code>
       * @param values The count to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllCount")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Long, CountProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.Long>) {
        addAll(values)
      }/**
       * <pre>
       * Count of items for each bucket in this filter layer. Only present if this is a *Counting Bloom filter*, in which
       * the bit set indicates presence for each bucket and the count indicates the value for each bucket.
       * </pre>
       *
       * <code>repeated uint64 count = 4;</code>
       * @param index The index to set the value at.
       * @param value The count to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setCount")
      operator fun com.google.protobuf.kotlin.DslList<kotlin.Long, CountProxy>.set(index: kotlin.Int, value: kotlin.Long) {
        _builder.setCount(index, value)
      }/**
       * <pre>
       * Count of items for each bucket in this filter layer. Only present if this is a *Counting Bloom filter*, in which
       * the bit set indicates presence for each bucket and the count indicates the value for each bucket.
       * </pre>
       *
       * <code>repeated uint64 count = 4;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearCount")
      fun com.google.protobuf.kotlin.DslList<kotlin.Long, CountProxy>.clear() {
        _builder.clearCount()
      }}
  }
}
@kotlin.jvm.JvmSynthetic
inline fun tools.elide.struct.BloomFilter.copy(block: tools.elide.struct.BloomFilterKt.Dsl.() -> kotlin.Unit): tools.elide.struct.BloomFilter =
  tools.elide.struct.BloomFilterKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.struct.BloomFilter.FilterLayer.copy(block: tools.elide.struct.BloomFilterKt.FilterLayerKt.Dsl.() -> kotlin.Unit): tools.elide.struct.BloomFilter.FilterLayer =
  tools.elide.struct.BloomFilterKt.FilterLayerKt.Dsl._create(this.toBuilder()).apply { block() }._build()

