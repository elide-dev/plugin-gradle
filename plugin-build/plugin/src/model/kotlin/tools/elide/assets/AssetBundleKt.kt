//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: elide/assets/bundle.proto

package tools.elide.assets;

@kotlin.jvm.JvmName("-initializeassetBundle")
inline fun assetBundle(block: tools.elide.assets.AssetBundleKt.Dsl.() -> kotlin.Unit): tools.elide.assets.AssetBundle =
  tools.elide.assets.AssetBundleKt.Dsl._create(tools.elide.assets.AssetBundle.newBuilder()).apply { block() }._build()
object AssetBundleKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: tools.elide.assets.AssetBundle.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: tools.elide.assets.AssetBundle.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): tools.elide.assets.AssetBundle = _builder.build()

    /**
     * <pre>
     * Version of the tool that produced this manifest. This is used by the tool to understand which asset bundle features
     * are supported for a given tool version.
     * </pre>
     *
     * <code>uint32 version = 1;</code>
     */
    var version: kotlin.Int
      @JvmName("getVersion")
      get() = _builder.getVersion()
      @JvmName("setVersion")
      set(value) {
        _builder.setVersion(value)
      }
    /**
     * <pre>
     * Version of the tool that produced this manifest. This is used by the tool to understand which asset bundle features
     * are supported for a given tool version.
     * </pre>
     *
     * <code>uint32 version = 1;</code>
     */
    fun clearVersion() {
      _builder.clearVersion()
    }

    /**
     * <pre>
     * Bundler settings that were active at the time the bundle was assembled, and some of which may extend to the runtime
     * use of the bundle to serve assets.
     * </pre>
     *
     * <code>.assets.AssetBundle.BundlerSettings settings = 2;</code>
     */
    var settings: tools.elide.assets.AssetBundle.BundlerSettings
      @JvmName("getSettings")
      get() = _builder.getSettings()
      @JvmName("setSettings")
      set(value) {
        _builder.setSettings(value)
      }
    /**
     * <pre>
     * Bundler settings that were active at the time the bundle was assembled, and some of which may extend to the runtime
     * use of the bundle to serve assets.
     * </pre>
     *
     * <code>.assets.AssetBundle.BundlerSettings settings = 2;</code>
     */
    fun clearSettings() {
      _builder.clearSettings()
    }
    /**
     * <pre>
     * Bundler settings that were active at the time the bundle was assembled, and some of which may extend to the runtime
     * use of the bundle to serve assets.
     * </pre>
     *
     * <code>.assets.AssetBundle.BundlerSettings settings = 2;</code>
     * @return Whether the settings field is set.
     */
    fun hasSettings(): kotlin.Boolean {
      return _builder.hasSettings()
    }

    /**
     * <pre>
     * Timestamp indicating when this asset manifest was generated. This may be used when calculating `ETags` or when
     * checking for updates to the asset bundle itself.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp generated = 3;</code>
     */
    var generated: com.google.protobuf.Timestamp
      @JvmName("getGenerated")
      get() = _builder.getGenerated()
      @JvmName("setGenerated")
      set(value) {
        _builder.setGenerated(value)
      }
    /**
     * <pre>
     * Timestamp indicating when this asset manifest was generated. This may be used when calculating `ETags` or when
     * checking for updates to the asset bundle itself.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp generated = 3;</code>
     */
    fun clearGenerated() {
      _builder.clearGenerated()
    }
    /**
     * <pre>
     * Timestamp indicating when this asset manifest was generated. This may be used when calculating `ETags` or when
     * checking for updates to the asset bundle itself.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp generated = 3;</code>
     * @return Whether the generated field is set.
     */
    fun hasGenerated(): kotlin.Boolean {
      return _builder.hasGenerated()
    }

    /**
     * <pre>
     * Raw bytes of a digest matching the algorithm for digests in file names, which represents a unique fingerprint of
     * the full asset bundle.
     * </pre>
     *
     * <code>bytes digest = 4;</code>
     */
    var digest: com.google.protobuf.ByteString
      @JvmName("getDigest")
      get() = _builder.getDigest()
      @JvmName("setDigest")
      set(value) {
        _builder.setDigest(value)
      }
    /**
     * <pre>
     * Raw bytes of a digest matching the algorithm for digests in file names, which represents a unique fingerprint of
     * the full asset bundle.
     * </pre>
     *
     * <code>bytes digest = 4;</code>
     */
    fun clearDigest() {
      _builder.clearDigest()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class StylesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Set of styles listed in this asset manifest. Like scripts, this is a map of dotted-path module names mapped to
     * their stylesheet sources and settings. Generally, the GSS module name is used for stylesheets.
     * </pre>
     *
     * <code>map&lt;string, .assets.AssetBundle.StyleBundle&gt; styles = 5;</code>
     */
     val styles: com.google.protobuf.kotlin.DslMap<kotlin.String, tools.elide.assets.AssetBundle.StyleBundle, StylesProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getStylesMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getStylesMap()
      )
    /**
     * <pre>
     * Set of styles listed in this asset manifest. Like scripts, this is a map of dotted-path module names mapped to
     * their stylesheet sources and settings. Generally, the GSS module name is used for stylesheets.
     * </pre>
     *
     * <code>map&lt;string, .assets.AssetBundle.StyleBundle&gt; styles = 5;</code>
     */
    @JvmName("putStyles")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, tools.elide.assets.AssetBundle.StyleBundle, StylesProxy>
      .put(key: kotlin.String, value: tools.elide.assets.AssetBundle.StyleBundle) {
         _builder.putStyles(key, value)
       }
    /**
     * <pre>
     * Set of styles listed in this asset manifest. Like scripts, this is a map of dotted-path module names mapped to
     * their stylesheet sources and settings. Generally, the GSS module name is used for stylesheets.
     * </pre>
     *
     * <code>map&lt;string, .assets.AssetBundle.StyleBundle&gt; styles = 5;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setStyles")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, tools.elide.assets.AssetBundle.StyleBundle, StylesProxy>
      .set(key: kotlin.String, value: tools.elide.assets.AssetBundle.StyleBundle) {
         put(key, value)
       }
    /**
     * <pre>
     * Set of styles listed in this asset manifest. Like scripts, this is a map of dotted-path module names mapped to
     * their stylesheet sources and settings. Generally, the GSS module name is used for stylesheets.
     * </pre>
     *
     * <code>map&lt;string, .assets.AssetBundle.StyleBundle&gt; styles = 5;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeStyles")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, tools.elide.assets.AssetBundle.StyleBundle, StylesProxy>
      .remove(key: kotlin.String) {
         _builder.removeStyles(key)
       }
    /**
     * <pre>
     * Set of styles listed in this asset manifest. Like scripts, this is a map of dotted-path module names mapped to
     * their stylesheet sources and settings. Generally, the GSS module name is used for stylesheets.
     * </pre>
     *
     * <code>map&lt;string, .assets.AssetBundle.StyleBundle&gt; styles = 5;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllStyles")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, tools.elide.assets.AssetBundle.StyleBundle, StylesProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, tools.elide.assets.AssetBundle.StyleBundle>) {
         _builder.putAllStyles(map)
       }
    /**
     * <pre>
     * Set of styles listed in this asset manifest. Like scripts, this is a map of dotted-path module names mapped to
     * their stylesheet sources and settings. Generally, the GSS module name is used for stylesheets.
     * </pre>
     *
     * <code>map&lt;string, .assets.AssetBundle.StyleBundle&gt; styles = 5;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearStyles")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, tools.elide.assets.AssetBundle.StyleBundle, StylesProxy>
      .clear() {
         _builder.clearStyles()
       }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class ScriptsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Set of scripts listed in this asset manifest. Like styles, this is a map of dotted-path module names mapped to
     * their script sources and settings. Generally, a Closure module name is used for scripts.
     * </pre>
     *
     * <code>map&lt;string, .assets.AssetBundle.ScriptBundle&gt; scripts = 6;</code>
     */
     val scripts: com.google.protobuf.kotlin.DslMap<kotlin.String, tools.elide.assets.AssetBundle.ScriptBundle, ScriptsProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getScriptsMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getScriptsMap()
      )
    /**
     * <pre>
     * Set of scripts listed in this asset manifest. Like styles, this is a map of dotted-path module names mapped to
     * their script sources and settings. Generally, a Closure module name is used for scripts.
     * </pre>
     *
     * <code>map&lt;string, .assets.AssetBundle.ScriptBundle&gt; scripts = 6;</code>
     */
    @JvmName("putScripts")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, tools.elide.assets.AssetBundle.ScriptBundle, ScriptsProxy>
      .put(key: kotlin.String, value: tools.elide.assets.AssetBundle.ScriptBundle) {
         _builder.putScripts(key, value)
       }
    /**
     * <pre>
     * Set of scripts listed in this asset manifest. Like styles, this is a map of dotted-path module names mapped to
     * their script sources and settings. Generally, a Closure module name is used for scripts.
     * </pre>
     *
     * <code>map&lt;string, .assets.AssetBundle.ScriptBundle&gt; scripts = 6;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setScripts")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, tools.elide.assets.AssetBundle.ScriptBundle, ScriptsProxy>
      .set(key: kotlin.String, value: tools.elide.assets.AssetBundle.ScriptBundle) {
         put(key, value)
       }
    /**
     * <pre>
     * Set of scripts listed in this asset manifest. Like styles, this is a map of dotted-path module names mapped to
     * their script sources and settings. Generally, a Closure module name is used for scripts.
     * </pre>
     *
     * <code>map&lt;string, .assets.AssetBundle.ScriptBundle&gt; scripts = 6;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeScripts")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, tools.elide.assets.AssetBundle.ScriptBundle, ScriptsProxy>
      .remove(key: kotlin.String) {
         _builder.removeScripts(key)
       }
    /**
     * <pre>
     * Set of scripts listed in this asset manifest. Like styles, this is a map of dotted-path module names mapped to
     * their script sources and settings. Generally, a Closure module name is used for scripts.
     * </pre>
     *
     * <code>map&lt;string, .assets.AssetBundle.ScriptBundle&gt; scripts = 6;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllScripts")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, tools.elide.assets.AssetBundle.ScriptBundle, ScriptsProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, tools.elide.assets.AssetBundle.ScriptBundle>) {
         _builder.putAllScripts(map)
       }
    /**
     * <pre>
     * Set of scripts listed in this asset manifest. Like styles, this is a map of dotted-path module names mapped to
     * their script sources and settings. Generally, a Closure module name is used for scripts.
     * </pre>
     *
     * <code>map&lt;string, .assets.AssetBundle.ScriptBundle&gt; scripts = 6;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearScripts")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, tools.elide.assets.AssetBundle.ScriptBundle, ScriptsProxy>
      .clear() {
         _builder.clearScripts()
       }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class GenericProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Generic assets which are mapped within this bundle.
     * </pre>
     *
     * <code>map&lt;string, .assets.AssetBundle.GenericBundle&gt; generic = 7;</code>
     */
     val generic: com.google.protobuf.kotlin.DslMap<kotlin.String, tools.elide.assets.AssetBundle.GenericBundle, GenericProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getGenericMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getGenericMap()
      )
    /**
     * <pre>
     * Generic assets which are mapped within this bundle.
     * </pre>
     *
     * <code>map&lt;string, .assets.AssetBundle.GenericBundle&gt; generic = 7;</code>
     */
    @JvmName("putGeneric")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, tools.elide.assets.AssetBundle.GenericBundle, GenericProxy>
      .put(key: kotlin.String, value: tools.elide.assets.AssetBundle.GenericBundle) {
         _builder.putGeneric(key, value)
       }
    /**
     * <pre>
     * Generic assets which are mapped within this bundle.
     * </pre>
     *
     * <code>map&lt;string, .assets.AssetBundle.GenericBundle&gt; generic = 7;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setGeneric")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, tools.elide.assets.AssetBundle.GenericBundle, GenericProxy>
      .set(key: kotlin.String, value: tools.elide.assets.AssetBundle.GenericBundle) {
         put(key, value)
       }
    /**
     * <pre>
     * Generic assets which are mapped within this bundle.
     * </pre>
     *
     * <code>map&lt;string, .assets.AssetBundle.GenericBundle&gt; generic = 7;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeGeneric")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, tools.elide.assets.AssetBundle.GenericBundle, GenericProxy>
      .remove(key: kotlin.String) {
         _builder.removeGeneric(key)
       }
    /**
     * <pre>
     * Generic assets which are mapped within this bundle.
     * </pre>
     *
     * <code>map&lt;string, .assets.AssetBundle.GenericBundle&gt; generic = 7;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllGeneric")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, tools.elide.assets.AssetBundle.GenericBundle, GenericProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, tools.elide.assets.AssetBundle.GenericBundle>) {
         _builder.putAllGeneric(map)
       }
    /**
     * <pre>
     * Generic assets which are mapped within this bundle.
     * </pre>
     *
     * <code>map&lt;string, .assets.AssetBundle.GenericBundle&gt; generic = 7;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearGeneric")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, tools.elide.assets.AssetBundle.GenericBundle, GenericProxy>
      .clear() {
         _builder.clearGeneric()
       }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class AssetProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Inlined asset contents, which specify pre-compressed asset data corresponding to a given CSS or JavaScript code
     * bundle. The server may choose to serve this content rather than performing compression on-the-fly.
     * </pre>
     *
     * <code>repeated .assets.AssetBundle.AssetContent asset = 8;</code>
     */
     val asset: com.google.protobuf.kotlin.DslList<tools.elide.assets.AssetBundle.AssetContent, AssetProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getAssetList()
      )
    /**
     * <pre>
     * Inlined asset contents, which specify pre-compressed asset data corresponding to a given CSS or JavaScript code
     * bundle. The server may choose to serve this content rather than performing compression on-the-fly.
     * </pre>
     *
     * <code>repeated .assets.AssetBundle.AssetContent asset = 8;</code>
     * @param value The asset to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAsset")
    fun com.google.protobuf.kotlin.DslList<tools.elide.assets.AssetBundle.AssetContent, AssetProxy>.add(value: tools.elide.assets.AssetBundle.AssetContent) {
      _builder.addAsset(value)
    }
    /**
     * <pre>
     * Inlined asset contents, which specify pre-compressed asset data corresponding to a given CSS or JavaScript code
     * bundle. The server may choose to serve this content rather than performing compression on-the-fly.
     * </pre>
     *
     * <code>repeated .assets.AssetBundle.AssetContent asset = 8;</code>
     * @param value The asset to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAsset")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.assets.AssetBundle.AssetContent, AssetProxy>.plusAssign(value: tools.elide.assets.AssetBundle.AssetContent) {
      add(value)
    }
    /**
     * <pre>
     * Inlined asset contents, which specify pre-compressed asset data corresponding to a given CSS or JavaScript code
     * bundle. The server may choose to serve this content rather than performing compression on-the-fly.
     * </pre>
     *
     * <code>repeated .assets.AssetBundle.AssetContent asset = 8;</code>
     * @param values The asset to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllAsset")
    fun com.google.protobuf.kotlin.DslList<tools.elide.assets.AssetBundle.AssetContent, AssetProxy>.addAll(values: kotlin.collections.Iterable<tools.elide.assets.AssetBundle.AssetContent>) {
      _builder.addAllAsset(values)
    }
    /**
     * <pre>
     * Inlined asset contents, which specify pre-compressed asset data corresponding to a given CSS or JavaScript code
     * bundle. The server may choose to serve this content rather than performing compression on-the-fly.
     * </pre>
     *
     * <code>repeated .assets.AssetBundle.AssetContent asset = 8;</code>
     * @param values The asset to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllAsset")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.assets.AssetBundle.AssetContent, AssetProxy>.plusAssign(values: kotlin.collections.Iterable<tools.elide.assets.AssetBundle.AssetContent>) {
      addAll(values)
    }
    /**
     * <pre>
     * Inlined asset contents, which specify pre-compressed asset data corresponding to a given CSS or JavaScript code
     * bundle. The server may choose to serve this content rather than performing compression on-the-fly.
     * </pre>
     *
     * <code>repeated .assets.AssetBundle.AssetContent asset = 8;</code>
     * @param index The index to set the value at.
     * @param value The asset to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setAsset")
    operator fun com.google.protobuf.kotlin.DslList<tools.elide.assets.AssetBundle.AssetContent, AssetProxy>.set(index: kotlin.Int, value: tools.elide.assets.AssetBundle.AssetContent) {
      _builder.setAsset(index, value)
    }
    /**
     * <pre>
     * Inlined asset contents, which specify pre-compressed asset data corresponding to a given CSS or JavaScript code
     * bundle. The server may choose to serve this content rather than performing compression on-the-fly.
     * </pre>
     *
     * <code>repeated .assets.AssetBundle.AssetContent asset = 8;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearAsset")
    fun com.google.protobuf.kotlin.DslList<tools.elide.assets.AssetBundle.AssetContent, AssetProxy>.clear() {
      _builder.clearAsset()
    }

  }
  @kotlin.jvm.JvmName("-initializedigestSettings")
  inline fun digestSettings(block: tools.elide.assets.AssetBundleKt.DigestSettingsKt.Dsl.() -> kotlin.Unit): tools.elide.assets.AssetBundle.DigestSettings =
    tools.elide.assets.AssetBundleKt.DigestSettingsKt.Dsl._create(tools.elide.assets.AssetBundle.DigestSettings.newBuilder()).apply { block() }._build()
  object DigestSettingsKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      private val _builder: tools.elide.assets.AssetBundle.DigestSettings.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: tools.elide.assets.AssetBundle.DigestSettings.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): tools.elide.assets.AssetBundle.DigestSettings = _builder.build()

      /**
       * <pre>
       * Hash algorithm in use for asset digestion.
       * </pre>
       *
       * <code>.crypto.HashAlgorithm algorithm = 1;</code>
       */
       var algorithm: tools.elide.crypto.HashAlgorithm
        @JvmName("getAlgorithm")
        get() = _builder.getAlgorithm()
        @JvmName("setAlgorithm")
        set(value) {
          _builder.setAlgorithm(value)
        }
      /**
       * <pre>
       * Hash algorithm in use for asset digestion.
       * </pre>
       *
       * <code>.crypto.HashAlgorithm algorithm = 1;</code>
       */
      fun clearAlgorithm() {
        _builder.clearAlgorithm()
      }

      /**
       * <pre>
       * Number of characters to pluck from the tail of the hash.
       * </pre>
       *
       * <code>uint32 tail = 2;</code>
       */
      var tail: kotlin.Int
        @JvmName("getTail")
        get() = _builder.getTail()
        @JvmName("setTail")
        set(value) {
          _builder.setTail(value)
        }
      /**
       * <pre>
       * Number of characters to pluck from the tail of the hash.
       * </pre>
       *
       * <code>uint32 tail = 2;</code>
       */
      fun clearTail() {
        _builder.clearTail()
      }

      /**
       * <pre>
       * Number of rounds to perform. Defaults to `1`.
       * </pre>
       *
       * <code>uint32 rounds = 3;</code>
       */
      var rounds: kotlin.Int
        @JvmName("getRounds")
        get() = _builder.getRounds()
        @JvmName("setRounds")
        set(value) {
          _builder.setRounds(value)
        }
      /**
       * <pre>
       * Number of rounds to perform. Defaults to `1`.
       * </pre>
       *
       * <code>uint32 rounds = 3;</code>
       */
      fun clearRounds() {
        _builder.clearRounds()
      }
    }
  }
  @kotlin.jvm.JvmName("-initializerewriteMap")
  inline fun rewriteMap(block: tools.elide.assets.AssetBundleKt.RewriteMapKt.Dsl.() -> kotlin.Unit): tools.elide.assets.AssetBundle.RewriteMap =
    tools.elide.assets.AssetBundleKt.RewriteMapKt.Dsl._create(tools.elide.assets.AssetBundle.RewriteMap.newBuilder()).apply { block() }._build()
  object RewriteMapKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      private val _builder: tools.elide.assets.AssetBundle.RewriteMap.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: tools.elide.assets.AssetBundle.RewriteMap.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): tools.elide.assets.AssetBundle.RewriteMap = _builder.build()

      /**
       * <pre>
       * File this rewrite map was originally loaded from.
       * </pre>
       *
       * <code>string file = 1;</code>
       */
      var file: kotlin.String
        @JvmName("getFile")
        get() = _builder.getFile()
        @JvmName("setFile")
        set(value) {
          _builder.setFile(value)
        }
      /**
       * <pre>
       * File this rewrite map was originally loaded from.
       * </pre>
       *
       * <code>string file = 1;</code>
       */
      fun clearFile() {
        _builder.clearFile()
      }

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      class MapProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * Map of symbols to their rewritten values.
       * </pre>
       *
       * <code>map&lt;string, string&gt; map = 2;</code>
       */
       val map: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MapProxy>
        @kotlin.jvm.JvmSynthetic
        @JvmName("getMapMap")
        get() = com.google.protobuf.kotlin.DslMap(
          _builder.getMapMap()
        )
      /**
       * <pre>
       * Map of symbols to their rewritten values.
       * </pre>
       *
       * <code>map&lt;string, string&gt; map = 2;</code>
       */
      @JvmName("putMap")
      fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MapProxy>
        .put(key: kotlin.String, value: kotlin.String) {
           _builder.putMap(key, value)
         }
      /**
       * <pre>
       * Map of symbols to their rewritten values.
       * </pre>
       *
       * <code>map&lt;string, string&gt; map = 2;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @JvmName("setMap")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MapProxy>
        .set(key: kotlin.String, value: kotlin.String) {
           put(key, value)
         }
      /**
       * <pre>
       * Map of symbols to their rewritten values.
       * </pre>
       *
       * <code>map&lt;string, string&gt; map = 2;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @JvmName("removeMap")
      fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MapProxy>
        .remove(key: kotlin.String) {
           _builder.removeMap(key)
         }
      /**
       * <pre>
       * Map of symbols to their rewritten values.
       * </pre>
       *
       * <code>map&lt;string, string&gt; map = 2;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @JvmName("putAllMap")
      fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MapProxy>
        .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.String>) {
           _builder.putAllMap(map)
         }
      /**
       * <pre>
       * Map of symbols to their rewritten values.
       * </pre>
       *
       * <code>map&lt;string, string&gt; map = 2;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @JvmName("clearMap")
      fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MapProxy>
        .clear() {
           _builder.clearMap()
         }
    }
  }
  @kotlin.jvm.JvmName("-initializebundlerSettings")
  inline fun bundlerSettings(block: tools.elide.assets.AssetBundleKt.BundlerSettingsKt.Dsl.() -> kotlin.Unit): tools.elide.assets.AssetBundle.BundlerSettings =
    tools.elide.assets.AssetBundleKt.BundlerSettingsKt.Dsl._create(tools.elide.assets.AssetBundle.BundlerSettings.newBuilder()).apply { block() }._build()
  object BundlerSettingsKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      private val _builder: tools.elide.assets.AssetBundle.BundlerSettings.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: tools.elide.assets.AssetBundle.BundlerSettings.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): tools.elide.assets.AssetBundle.BundlerSettings = _builder.build()

      /**
       * <pre>
       * Specifies whether minification was enabled, and/or should be enabled.
       * </pre>
       *
       * <code>bool minify = 1;</code>
       */
      var minify: kotlin.Boolean
        @JvmName("getMinify")
        get() = _builder.getMinify()
        @JvmName("setMinify")
        set(value) {
          _builder.setMinify(value)
        }
      /**
       * <pre>
       * Specifies whether minification was enabled, and/or should be enabled.
       * </pre>
       *
       * <code>bool minify = 1;</code>
       */
      fun clearMinify() {
        _builder.clearMinify()
      }

      /**
       * <pre>
       * Specifies whether JavaScript pre-packing was enabled, and/or should be enabled.
       * </pre>
       *
       * <code>bool prepack = 2;</code>
       */
      var prepack: kotlin.Boolean
        @JvmName("getPrepack")
        get() = _builder.getPrepack()
        @JvmName("setPrepack")
        set(value) {
          _builder.setPrepack(value)
        }
      /**
       * <pre>
       * Specifies whether JavaScript pre-packing was enabled, and/or should be enabled.
       * </pre>
       *
       * <code>bool prepack = 2;</code>
       */
      fun clearPrepack() {
        _builder.clearPrepack()
      }

      /**
       * <pre>
       * Specifies whether assets participating in style rewriting (not to be confused with minification).
       * </pre>
       *
       * <code>bool rewriting = 3;</code>
       */
      var rewriting: kotlin.Boolean
        @JvmName("getRewriting")
        get() = _builder.getRewriting()
        @JvmName("setRewriting")
        set(value) {
          _builder.setRewriting(value)
        }
      /**
       * <pre>
       * Specifies whether assets participating in style rewriting (not to be confused with minification).
       * </pre>
       *
       * <code>bool rewriting = 3;</code>
       */
      fun clearRewriting() {
        _builder.clearRewriting()
      }

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      class CompressionProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * Enabled compression algorithms. If this property is set, there may be compressed variants for each asset,
       * potentially depending on whether the compressed asset variant saved space over the wire.
       * </pre>
       *
       * <code>repeated .data.CompressionMode compression = 4;</code>
       */
       val compression: com.google.protobuf.kotlin.DslList<tools.elide.data.CompressionMode, CompressionProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getCompressionList()
        )
      /**
       * <pre>
       * Enabled compression algorithms. If this property is set, there may be compressed variants for each asset,
       * potentially depending on whether the compressed asset variant saved space over the wire.
       * </pre>
       *
       * <code>repeated .data.CompressionMode compression = 4;</code>
       * @param value The compression to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addCompression")
      fun com.google.protobuf.kotlin.DslList<tools.elide.data.CompressionMode, CompressionProxy>.add(value: tools.elide.data.CompressionMode) {
        _builder.addCompression(value)
      }/**
       * <pre>
       * Enabled compression algorithms. If this property is set, there may be compressed variants for each asset,
       * potentially depending on whether the compressed asset variant saved space over the wire.
       * </pre>
       *
       * <code>repeated .data.CompressionMode compression = 4;</code>
       * @param value The compression to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignCompression")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.data.CompressionMode, CompressionProxy>.plusAssign(value: tools.elide.data.CompressionMode) {
        add(value)
      }/**
       * <pre>
       * Enabled compression algorithms. If this property is set, there may be compressed variants for each asset,
       * potentially depending on whether the compressed asset variant saved space over the wire.
       * </pre>
       *
       * <code>repeated .data.CompressionMode compression = 4;</code>
       * @param values The compression to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllCompression")
      fun com.google.protobuf.kotlin.DslList<tools.elide.data.CompressionMode, CompressionProxy>.addAll(values: kotlin.collections.Iterable<tools.elide.data.CompressionMode>) {
        _builder.addAllCompression(values)
      }/**
       * <pre>
       * Enabled compression algorithms. If this property is set, there may be compressed variants for each asset,
       * potentially depending on whether the compressed asset variant saved space over the wire.
       * </pre>
       *
       * <code>repeated .data.CompressionMode compression = 4;</code>
       * @param values The compression to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllCompression")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.data.CompressionMode, CompressionProxy>.plusAssign(values: kotlin.collections.Iterable<tools.elide.data.CompressionMode>) {
        addAll(values)
      }/**
       * <pre>
       * Enabled compression algorithms. If this property is set, there may be compressed variants for each asset,
       * potentially depending on whether the compressed asset variant saved space over the wire.
       * </pre>
       *
       * <code>repeated .data.CompressionMode compression = 4;</code>
       * @param index The index to set the value at.
       * @param value The compression to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setCompression")
      operator fun com.google.protobuf.kotlin.DslList<tools.elide.data.CompressionMode, CompressionProxy>.set(index: kotlin.Int, value: tools.elide.data.CompressionMode) {
        _builder.setCompression(index, value)
      }/**
       * <pre>
       * Enabled compression algorithms. If this property is set, there may be compressed variants for each asset,
       * potentially depending on whether the compressed asset variant saved space over the wire.
       * </pre>
       *
       * <code>repeated .data.CompressionMode compression = 4;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearCompression")
      fun com.google.protobuf.kotlin.DslList<tools.elide.data.CompressionMode, CompressionProxy>.clear() {
        _builder.clearCompression()
      }
      /**
       * <pre>
       * Digest algorithm settings in use to calculate chunk tokens. These tokens are used to address pre-compressed asset
       * content, and are used to address assets dynamically from the server and frontend.
       * </pre>
       *
       * <code>.assets.AssetBundle.DigestSettings digest_settings = 5;</code>
       */
      var digestSettings: tools.elide.assets.AssetBundle.DigestSettings
        @JvmName("getDigestSettings")
        get() = _builder.getDigestSettings()
        @JvmName("setDigestSettings")
        set(value) {
          _builder.setDigestSettings(value)
        }
      /**
       * <pre>
       * Digest algorithm settings in use to calculate chunk tokens. These tokens are used to address pre-compressed asset
       * content, and are used to address assets dynamically from the server and frontend.
       * </pre>
       *
       * <code>.assets.AssetBundle.DigestSettings digest_settings = 5;</code>
       */
      fun clearDigestSettings() {
        _builder.clearDigestSettings()
      }
      /**
       * <pre>
       * Digest algorithm settings in use to calculate chunk tokens. These tokens are used to address pre-compressed asset
       * content, and are used to address assets dynamically from the server and frontend.
       * </pre>
       *
       * <code>.assets.AssetBundle.DigestSettings digest_settings = 5;</code>
       * @return Whether the digestSettings field is set.
       */
      fun hasDigestSettings(): kotlin.Boolean {
        return _builder.hasDigestSettings()
      }
    }
  }
  @kotlin.jvm.JvmName("-initializeassetDependencies")
  inline fun assetDependencies(block: tools.elide.assets.AssetBundleKt.AssetDependenciesKt.Dsl.() -> kotlin.Unit): tools.elide.assets.AssetBundle.AssetDependencies =
    tools.elide.assets.AssetBundleKt.AssetDependenciesKt.Dsl._create(tools.elide.assets.AssetBundle.AssetDependencies.newBuilder()).apply { block() }._build()
  object AssetDependenciesKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      private val _builder: tools.elide.assets.AssetBundle.AssetDependencies.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: tools.elide.assets.AssetBundle.AssetDependencies.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): tools.elide.assets.AssetBundle.AssetDependencies = _builder.build()

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      class DirectProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * Tokens for direct dependencies.
       * </pre>
       *
       * <code>repeated string direct = 1;</code>
       * @return A list containing the direct.
       */
       val direct: com.google.protobuf.kotlin.DslList<kotlin.String, DirectProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getDirectList()
        )
      /**
       * <pre>
       * Tokens for direct dependencies.
       * </pre>
       *
       * <code>repeated string direct = 1;</code>
       * @param value The direct to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addDirect")
      fun com.google.protobuf.kotlin.DslList<kotlin.String, DirectProxy>.add(value: kotlin.String) {
        _builder.addDirect(value)
      }
      /**
       * <pre>
       * Tokens for direct dependencies.
       * </pre>
       *
       * <code>repeated string direct = 1;</code>
       * @param value The direct to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignDirect")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, DirectProxy>.plusAssign(value: kotlin.String) {
        add(value)
      }
      /**
       * <pre>
       * Tokens for direct dependencies.
       * </pre>
       *
       * <code>repeated string direct = 1;</code>
       * @param values The direct to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllDirect")
      fun com.google.protobuf.kotlin.DslList<kotlin.String, DirectProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
        _builder.addAllDirect(values)
      }
      /**
       * <pre>
       * Tokens for direct dependencies.
       * </pre>
       *
       * <code>repeated string direct = 1;</code>
       * @param values The direct to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllDirect")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, DirectProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
        addAll(values)
      }
      /**
       * <pre>
       * Tokens for direct dependencies.
       * </pre>
       *
       * <code>repeated string direct = 1;</code>
       * @param index The index to set the value at.
       * @param value The direct to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setDirect")
      operator fun com.google.protobuf.kotlin.DslList<kotlin.String, DirectProxy>.set(index: kotlin.Int, value: kotlin.String) {
        _builder.setDirect(index, value)
      }/**
       * <pre>
       * Tokens for direct dependencies.
       * </pre>
       *
       * <code>repeated string direct = 1;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearDirect")
      fun com.google.protobuf.kotlin.DslList<kotlin.String, DirectProxy>.clear() {
        _builder.clearDirect()
      }
      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      class TransitiveProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * Tokens for transitive dependencies.
       * </pre>
       *
       * <code>repeated string transitive = 2;</code>
       * @return A list containing the transitive.
       */
       val transitive: com.google.protobuf.kotlin.DslList<kotlin.String, TransitiveProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getTransitiveList()
        )
      /**
       * <pre>
       * Tokens for transitive dependencies.
       * </pre>
       *
       * <code>repeated string transitive = 2;</code>
       * @param value The transitive to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addTransitive")
      fun com.google.protobuf.kotlin.DslList<kotlin.String, TransitiveProxy>.add(value: kotlin.String) {
        _builder.addTransitive(value)
      }
      /**
       * <pre>
       * Tokens for transitive dependencies.
       * </pre>
       *
       * <code>repeated string transitive = 2;</code>
       * @param value The transitive to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignTransitive")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, TransitiveProxy>.plusAssign(value: kotlin.String) {
        add(value)
      }
      /**
       * <pre>
       * Tokens for transitive dependencies.
       * </pre>
       *
       * <code>repeated string transitive = 2;</code>
       * @param values The transitive to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllTransitive")
      fun com.google.protobuf.kotlin.DslList<kotlin.String, TransitiveProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
        _builder.addAllTransitive(values)
      }
      /**
       * <pre>
       * Tokens for transitive dependencies.
       * </pre>
       *
       * <code>repeated string transitive = 2;</code>
       * @param values The transitive to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllTransitive")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, TransitiveProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
        addAll(values)
      }
      /**
       * <pre>
       * Tokens for transitive dependencies.
       * </pre>
       *
       * <code>repeated string transitive = 2;</code>
       * @param index The index to set the value at.
       * @param value The transitive to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setTransitive")
      operator fun com.google.protobuf.kotlin.DslList<kotlin.String, TransitiveProxy>.set(index: kotlin.Int, value: kotlin.String) {
        _builder.setTransitive(index, value)
      }/**
       * <pre>
       * Tokens for transitive dependencies.
       * </pre>
       *
       * <code>repeated string transitive = 2;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearTransitive")
      fun com.google.protobuf.kotlin.DslList<kotlin.String, TransitiveProxy>.clear() {
        _builder.clearTransitive()
      }
      /**
       * <pre>
       * Bitmask filter calculated from the full set of a given asset's dependency tokens.
       * </pre>
       *
       * <code>.struct.BloomFilter mask = 3;</code>
       */
      var mask: tools.elide.struct.BloomFilter
        @JvmName("getMask")
        get() = _builder.getMask()
        @JvmName("setMask")
        set(value) {
          _builder.setMask(value)
        }
      /**
       * <pre>
       * Bitmask filter calculated from the full set of a given asset's dependency tokens.
       * </pre>
       *
       * <code>.struct.BloomFilter mask = 3;</code>
       */
      fun clearMask() {
        _builder.clearMask()
      }
      /**
       * <pre>
       * Bitmask filter calculated from the full set of a given asset's dependency tokens.
       * </pre>
       *
       * <code>.struct.BloomFilter mask = 3;</code>
       * @return Whether the mask field is set.
       */
      fun hasMask(): kotlin.Boolean {
        return _builder.hasMask()
      }
    }
  }
  @kotlin.jvm.JvmName("-initializestyleBundle")
  inline fun styleBundle(block: tools.elide.assets.AssetBundleKt.StyleBundleKt.Dsl.() -> kotlin.Unit): tools.elide.assets.AssetBundle.StyleBundle =
    tools.elide.assets.AssetBundleKt.StyleBundleKt.Dsl._create(tools.elide.assets.AssetBundle.StyleBundle.newBuilder()).apply { block() }._build()
  object StyleBundleKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      private val _builder: tools.elide.assets.AssetBundle.StyleBundle.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: tools.elide.assets.AssetBundle.StyleBundle.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): tools.elide.assets.AssetBundle.StyleBundle = _builder.build()

      /**
       * <pre>
       * Style module name/path.
       * </pre>
       *
       * <code>string module = 1;</code>
       */
      var module: kotlin.String
        @JvmName("getModule")
        get() = _builder.getModule()
        @JvmName("setModule")
        set(value) {
          _builder.setModule(value)
        }
      /**
       * <pre>
       * Style module name/path.
       * </pre>
       *
       * <code>string module = 1;</code>
       */
      fun clearModule() {
        _builder.clearModule()
      }

      /**
       * <pre>
       * Rewrite maps associated with this bundle, if applicable.
       * </pre>
       *
       * <code>.assets.AssetBundle.RewriteMap rewrite_map = 2;</code>
       */
      var rewriteMap: tools.elide.assets.AssetBundle.RewriteMap
        @JvmName("getRewriteMap")
        get() = _builder.getRewriteMap()
        @JvmName("setRewriteMap")
        set(value) {
          _builder.setRewriteMap(value)
        }
      /**
       * <pre>
       * Rewrite maps associated with this bundle, if applicable.
       * </pre>
       *
       * <code>.assets.AssetBundle.RewriteMap rewrite_map = 2;</code>
       */
      fun clearRewriteMap() {
        _builder.clearRewriteMap()
      }
      /**
       * <pre>
       * Rewrite maps associated with this bundle, if applicable.
       * </pre>
       *
       * <code>.assets.AssetBundle.RewriteMap rewrite_map = 2;</code>
       * @return Whether the rewriteMap field is set.
       */
      fun hasRewriteMap(): kotlin.Boolean {
        return _builder.hasRewriteMap()
      }

      /**
       * <pre>
       * Specifies dependencies that must be loaded before this module, if any.
       * </pre>
       *
       * <code>.assets.AssetBundle.AssetDependencies dependencies = 3;</code>
       */
      var dependencies: tools.elide.assets.AssetBundle.AssetDependencies
        @JvmName("getDependencies")
        get() = _builder.getDependencies()
        @JvmName("setDependencies")
        set(value) {
          _builder.setDependencies(value)
        }
      /**
       * <pre>
       * Specifies dependencies that must be loaded before this module, if any.
       * </pre>
       *
       * <code>.assets.AssetBundle.AssetDependencies dependencies = 3;</code>
       */
      fun clearDependencies() {
        _builder.clearDependencies()
      }
      /**
       * <pre>
       * Specifies dependencies that must be loaded before this module, if any.
       * </pre>
       *
       * <code>.assets.AssetBundle.AssetDependencies dependencies = 3;</code>
       * @return Whether the dependencies field is set.
       */
      fun hasDependencies(): kotlin.Boolean {
        return _builder.hasDependencies()
      }

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      class AssetProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * Stylesheet sources associated with this bundle. Always non-empty.
       * </pre>
       *
       * <code>repeated .assets.AssetBundle.StyleBundle.StyleAsset asset = 4;</code>
       */
       val asset: com.google.protobuf.kotlin.DslList<tools.elide.assets.AssetBundle.StyleBundle.StyleAsset, AssetProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getAssetList()
        )
      /**
       * <pre>
       * Stylesheet sources associated with this bundle. Always non-empty.
       * </pre>
       *
       * <code>repeated .assets.AssetBundle.StyleBundle.StyleAsset asset = 4;</code>
       * @param value The asset to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAsset")
      fun com.google.protobuf.kotlin.DslList<tools.elide.assets.AssetBundle.StyleBundle.StyleAsset, AssetProxy>.add(value: tools.elide.assets.AssetBundle.StyleBundle.StyleAsset) {
        _builder.addAsset(value)
      }
      /**
       * <pre>
       * Stylesheet sources associated with this bundle. Always non-empty.
       * </pre>
       *
       * <code>repeated .assets.AssetBundle.StyleBundle.StyleAsset asset = 4;</code>
       * @param value The asset to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAsset")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.assets.AssetBundle.StyleBundle.StyleAsset, AssetProxy>.plusAssign(value: tools.elide.assets.AssetBundle.StyleBundle.StyleAsset) {
        add(value)
      }
      /**
       * <pre>
       * Stylesheet sources associated with this bundle. Always non-empty.
       * </pre>
       *
       * <code>repeated .assets.AssetBundle.StyleBundle.StyleAsset asset = 4;</code>
       * @param values The asset to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllAsset")
      fun com.google.protobuf.kotlin.DslList<tools.elide.assets.AssetBundle.StyleBundle.StyleAsset, AssetProxy>.addAll(values: kotlin.collections.Iterable<tools.elide.assets.AssetBundle.StyleBundle.StyleAsset>) {
        _builder.addAllAsset(values)
      }
      /**
       * <pre>
       * Stylesheet sources associated with this bundle. Always non-empty.
       * </pre>
       *
       * <code>repeated .assets.AssetBundle.StyleBundle.StyleAsset asset = 4;</code>
       * @param values The asset to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllAsset")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.assets.AssetBundle.StyleBundle.StyleAsset, AssetProxy>.plusAssign(values: kotlin.collections.Iterable<tools.elide.assets.AssetBundle.StyleBundle.StyleAsset>) {
        addAll(values)
      }
      /**
       * <pre>
       * Stylesheet sources associated with this bundle. Always non-empty.
       * </pre>
       *
       * <code>repeated .assets.AssetBundle.StyleBundle.StyleAsset asset = 4;</code>
       * @param index The index to set the value at.
       * @param value The asset to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setAsset")
      operator fun com.google.protobuf.kotlin.DslList<tools.elide.assets.AssetBundle.StyleBundle.StyleAsset, AssetProxy>.set(index: kotlin.Int, value: tools.elide.assets.AssetBundle.StyleBundle.StyleAsset) {
        _builder.setAsset(index, value)
      }
      /**
       * <pre>
       * Stylesheet sources associated with this bundle. Always non-empty.
       * </pre>
       *
       * <code>repeated .assets.AssetBundle.StyleBundle.StyleAsset asset = 4;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearAsset")
      fun com.google.protobuf.kotlin.DslList<tools.elide.assets.AssetBundle.StyleBundle.StyleAsset, AssetProxy>.clear() {
        _builder.clearAsset()
      }


      /**
       * <pre>
       * Whether this asset should be compressed when serving to end-users.
       * </pre>
       *
       * <code>bool compressable = 5;</code>
       */
      var compressable: kotlin.Boolean
        @JvmName("getCompressable")
        get() = _builder.getCompressable()
        @JvmName("setCompressable")
        set(value) {
          _builder.setCompressable(value)
        }
      /**
       * <pre>
       * Whether this asset should be compressed when serving to end-users.
       * </pre>
       *
       * <code>bool compressable = 5;</code>
       */
      fun clearCompressable() {
        _builder.clearCompressable()
      }

      /**
       * <pre>
       * Whether this asset should be considered cacheable.
       * </pre>
       *
       * <code>bool cacheable = 6;</code>
       */
      var cacheable: kotlin.Boolean
        @JvmName("getCacheable")
        get() = _builder.getCacheable()
        @JvmName("setCacheable")
        set(value) {
          _builder.setCacheable(value)
        }
      /**
       * <pre>
       * Whether this asset should be considered cacheable.
       * </pre>
       *
       * <code>bool cacheable = 6;</code>
       */
      fun clearCacheable() {
        _builder.clearCacheable()
      }
    }
    @kotlin.jvm.JvmName("-initializestyleAsset")
    inline fun styleAsset(block: tools.elide.assets.AssetBundleKt.StyleBundleKt.StyleAssetKt.Dsl.() -> kotlin.Unit): tools.elide.assets.AssetBundle.StyleBundle.StyleAsset =
      tools.elide.assets.AssetBundleKt.StyleBundleKt.StyleAssetKt.Dsl._create(tools.elide.assets.AssetBundle.StyleBundle.StyleAsset.newBuilder()).apply { block() }._build()
    object StyleAssetKt {
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      @com.google.protobuf.kotlin.ProtoDslMarker
      class Dsl private constructor(
        private val _builder: tools.elide.assets.AssetBundle.StyleBundle.StyleAsset.Builder
      ) {
        companion object {
          @kotlin.jvm.JvmSynthetic
          @kotlin.PublishedApi
          internal fun _create(builder: tools.elide.assets.AssetBundle.StyleBundle.StyleAsset.Builder): Dsl = Dsl(builder)
        }

        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _build(): tools.elide.assets.AssetBundle.StyleBundle.StyleAsset = _builder.build()

        /**
         * <pre>
         * Calculated token for this asset, including the asset's content digest.
         * </pre>
         *
         * <code>string token = 1;</code>
         */
        var token: kotlin.String
          @JvmName("getToken")
          get() = _builder.getToken()
          @JvmName("setToken")
          set(value) {
            _builder.setToken(value)
          }
        /**
         * <pre>
         * Calculated token for this asset, including the asset's content digest.
         * </pre>
         *
         * <code>string token = 1;</code>
         */
        fun clearToken() {
          _builder.clearToken()
        }

        /**
         * <pre>
         * Original name of the source file, if applicable.
         * </pre>
         *
         * <code>string filename = 2;</code>
         */
        var filename: kotlin.String
          @JvmName("getFilename")
          get() = _builder.getFilename()
          @JvmName("setFilename")
          set(value) {
            _builder.setFilename(value)
          }
        /**
         * <pre>
         * Original name of the source file, if applicable.
         * </pre>
         *
         * <code>string filename = 2;</code>
         */
        fun clearFilename() {
          _builder.clearFilename()
        }

        /**
         * <pre>
         * URL and DOM settings for this asset.
         * </pre>
         *
         * <code>.page.Context.Styles.Stylesheet stylesheet = 3;</code>
         */
        var stylesheet: tools.elide.page.Context.Styles.Stylesheet
          @JvmName("getStylesheet")
          get() = _builder.getStylesheet()
          @JvmName("setStylesheet")
          set(value) {
            _builder.setStylesheet(value)
          }
        /**
         * <pre>
         * URL and DOM settings for this asset.
         * </pre>
         *
         * <code>.page.Context.Styles.Stylesheet stylesheet = 3;</code>
         */
        fun clearStylesheet() {
          _builder.clearStylesheet()
        }
        /**
         * <pre>
         * URL and DOM settings for this asset.
         * </pre>
         *
         * <code>.page.Context.Styles.Stylesheet stylesheet = 3;</code>
         * @return Whether the stylesheet field is set.
         */
        fun hasStylesheet(): kotlin.Boolean {
          return _builder.hasStylesheet()
        }

        /**
         * <pre>
         * Whether a renaming map is available for this stylesheet.
         * </pre>
         *
         * <code>bool renaming = 4;</code>
         */
        var renaming: kotlin.Boolean
          @JvmName("getRenaming")
          get() = _builder.getRenaming()
          @JvmName("setRenaming")
          set(value) {
            _builder.setRenaming(value)
          }
        /**
         * <pre>
         * Whether a renaming map is available for this stylesheet.
         * </pre>
         *
         * <code>bool renaming = 4;</code>
         */
        fun clearRenaming() {
          _builder.clearRenaming()
        }
      }
    }
  }
  @kotlin.jvm.JvmName("-initializescriptBundle")
  inline fun scriptBundle(block: tools.elide.assets.AssetBundleKt.ScriptBundleKt.Dsl.() -> kotlin.Unit): tools.elide.assets.AssetBundle.ScriptBundle =
    tools.elide.assets.AssetBundleKt.ScriptBundleKt.Dsl._create(tools.elide.assets.AssetBundle.ScriptBundle.newBuilder()).apply { block() }._build()
  object ScriptBundleKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      private val _builder: tools.elide.assets.AssetBundle.ScriptBundle.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: tools.elide.assets.AssetBundle.ScriptBundle.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): tools.elide.assets.AssetBundle.ScriptBundle = _builder.build()

      /**
       * <pre>
       * Script module name/path.
       * </pre>
       *
       * <code>string module = 1;</code>
       */
      var module: kotlin.String
        @JvmName("getModule")
        get() = _builder.getModule()
        @JvmName("setModule")
        set(value) {
          _builder.setModule(value)
        }
      /**
       * <pre>
       * Script module name/path.
       * </pre>
       *
       * <code>string module = 1;</code>
       */
      fun clearModule() {
        _builder.clearModule()
      }

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      class AssetProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * Script code assets associated with this bundle. Always non-empty.
       * </pre>
       *
       * <code>repeated .assets.AssetBundle.ScriptBundle.ScriptAsset asset = 2;</code>
       */
       val asset: com.google.protobuf.kotlin.DslList<tools.elide.assets.AssetBundle.ScriptBundle.ScriptAsset, AssetProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getAssetList()
        )
      /**
       * <pre>
       * Script code assets associated with this bundle. Always non-empty.
       * </pre>
       *
       * <code>repeated .assets.AssetBundle.ScriptBundle.ScriptAsset asset = 2;</code>
       * @param value The asset to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAsset")
      fun com.google.protobuf.kotlin.DslList<tools.elide.assets.AssetBundle.ScriptBundle.ScriptAsset, AssetProxy>.add(value: tools.elide.assets.AssetBundle.ScriptBundle.ScriptAsset) {
        _builder.addAsset(value)
      }
      /**
       * <pre>
       * Script code assets associated with this bundle. Always non-empty.
       * </pre>
       *
       * <code>repeated .assets.AssetBundle.ScriptBundle.ScriptAsset asset = 2;</code>
       * @param value The asset to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAsset")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.assets.AssetBundle.ScriptBundle.ScriptAsset, AssetProxy>.plusAssign(value: tools.elide.assets.AssetBundle.ScriptBundle.ScriptAsset) {
        add(value)
      }
      /**
       * <pre>
       * Script code assets associated with this bundle. Always non-empty.
       * </pre>
       *
       * <code>repeated .assets.AssetBundle.ScriptBundle.ScriptAsset asset = 2;</code>
       * @param values The asset to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllAsset")
      fun com.google.protobuf.kotlin.DslList<tools.elide.assets.AssetBundle.ScriptBundle.ScriptAsset, AssetProxy>.addAll(values: kotlin.collections.Iterable<tools.elide.assets.AssetBundle.ScriptBundle.ScriptAsset>) {
        _builder.addAllAsset(values)
      }
      /**
       * <pre>
       * Script code assets associated with this bundle. Always non-empty.
       * </pre>
       *
       * <code>repeated .assets.AssetBundle.ScriptBundle.ScriptAsset asset = 2;</code>
       * @param values The asset to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllAsset")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.assets.AssetBundle.ScriptBundle.ScriptAsset, AssetProxy>.plusAssign(values: kotlin.collections.Iterable<tools.elide.assets.AssetBundle.ScriptBundle.ScriptAsset>) {
        addAll(values)
      }
      /**
       * <pre>
       * Script code assets associated with this bundle. Always non-empty.
       * </pre>
       *
       * <code>repeated .assets.AssetBundle.ScriptBundle.ScriptAsset asset = 2;</code>
       * @param index The index to set the value at.
       * @param value The asset to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setAsset")
      operator fun com.google.protobuf.kotlin.DslList<tools.elide.assets.AssetBundle.ScriptBundle.ScriptAsset, AssetProxy>.set(index: kotlin.Int, value: tools.elide.assets.AssetBundle.ScriptBundle.ScriptAsset) {
        _builder.setAsset(index, value)
      }
      /**
       * <pre>
       * Script code assets associated with this bundle. Always non-empty.
       * </pre>
       *
       * <code>repeated .assets.AssetBundle.ScriptBundle.ScriptAsset asset = 2;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearAsset")
      fun com.google.protobuf.kotlin.DslList<tools.elide.assets.AssetBundle.ScriptBundle.ScriptAsset, AssetProxy>.clear() {
        _builder.clearAsset()
      }


      /**
       * <pre>
       * Specifies dependencies that must be loaded before this module, if any.
       * </pre>
       *
       * <code>.assets.AssetBundle.AssetDependencies dependencies = 3;</code>
       */
      var dependencies: tools.elide.assets.AssetBundle.AssetDependencies
        @JvmName("getDependencies")
        get() = _builder.getDependencies()
        @JvmName("setDependencies")
        set(value) {
          _builder.setDependencies(value)
        }
      /**
       * <pre>
       * Specifies dependencies that must be loaded before this module, if any.
       * </pre>
       *
       * <code>.assets.AssetBundle.AssetDependencies dependencies = 3;</code>
       */
      fun clearDependencies() {
        _builder.clearDependencies()
      }
      /**
       * <pre>
       * Specifies dependencies that must be loaded before this module, if any.
       * </pre>
       *
       * <code>.assets.AssetBundle.AssetDependencies dependencies = 3;</code>
       * @return Whether the dependencies field is set.
       */
      fun hasDependencies(): kotlin.Boolean {
        return _builder.hasDependencies()
      }

      /**
       * <pre>
       * Whether this asset should be compressed when serving to end-users.
       * </pre>
       *
       * <code>bool compressable = 4;</code>
       */
      var compressable: kotlin.Boolean
        @JvmName("getCompressable")
        get() = _builder.getCompressable()
        @JvmName("setCompressable")
        set(value) {
          _builder.setCompressable(value)
        }
      /**
       * <pre>
       * Whether this asset should be compressed when serving to end-users.
       * </pre>
       *
       * <code>bool compressable = 4;</code>
       */
      fun clearCompressable() {
        _builder.clearCompressable()
      }

      /**
       * <pre>
       * Whether this asset should be considered cacheable.
       * </pre>
       *
       * <code>bool cacheable = 5;</code>
       */
      var cacheable: kotlin.Boolean
        @JvmName("getCacheable")
        get() = _builder.getCacheable()
        @JvmName("setCacheable")
        set(value) {
          _builder.setCacheable(value)
        }
      /**
       * <pre>
       * Whether this asset should be considered cacheable.
       * </pre>
       *
       * <code>bool cacheable = 5;</code>
       */
      fun clearCacheable() {
        _builder.clearCacheable()
      }

      /**
       * <pre>
       * Marked if this asset is external, in which case the described script should be referenced via a script tag.
       * </pre>
       *
       * <code>bool external = 6;</code>
       */
      var external: kotlin.Boolean
        @JvmName("getExternal")
        get() = _builder.getExternal()
        @JvmName("setExternal")
        set(value) {
          _builder.setExternal(value)
        }
      /**
       * <pre>
       * Marked if this asset is external, in which case the described script should be referenced via a script tag.
       * </pre>
       *
       * <code>bool external = 6;</code>
       */
      fun clearExternal() {
        _builder.clearExternal()
      }
    }
    @kotlin.jvm.JvmName("-initializescriptAsset")
    inline fun scriptAsset(block: tools.elide.assets.AssetBundleKt.ScriptBundleKt.ScriptAssetKt.Dsl.() -> kotlin.Unit): tools.elide.assets.AssetBundle.ScriptBundle.ScriptAsset =
      tools.elide.assets.AssetBundleKt.ScriptBundleKt.ScriptAssetKt.Dsl._create(tools.elide.assets.AssetBundle.ScriptBundle.ScriptAsset.newBuilder()).apply { block() }._build()
    object ScriptAssetKt {
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      @com.google.protobuf.kotlin.ProtoDslMarker
      class Dsl private constructor(
        private val _builder: tools.elide.assets.AssetBundle.ScriptBundle.ScriptAsset.Builder
      ) {
        companion object {
          @kotlin.jvm.JvmSynthetic
          @kotlin.PublishedApi
          internal fun _create(builder: tools.elide.assets.AssetBundle.ScriptBundle.ScriptAsset.Builder): Dsl = Dsl(builder)
        }

        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _build(): tools.elide.assets.AssetBundle.ScriptBundle.ScriptAsset = _builder.build()

        /**
         * <pre>
         * Calculated token for this asset, including the asset's content digest.
         * </pre>
         *
         * <code>string token = 1;</code>
         */
        var token: kotlin.String
          @JvmName("getToken")
          get() = _builder.getToken()
          @JvmName("setToken")
          set(value) {
            _builder.setToken(value)
          }
        /**
         * <pre>
         * Calculated token for this asset, including the asset's content digest.
         * </pre>
         *
         * <code>string token = 1;</code>
         */
        fun clearToken() {
          _builder.clearToken()
        }

        /**
         * <pre>
         * Original name of the source file, if applicable.
         * </pre>
         *
         * <code>string filename = 2;</code>
         */
        var filename: kotlin.String
          @JvmName("getFilename")
          get() = _builder.getFilename()
          @JvmName("setFilename")
          set(value) {
            _builder.setFilename(value)
          }
        /**
         * <pre>
         * Original name of the source file, if applicable.
         * </pre>
         *
         * <code>string filename = 2;</code>
         */
        fun clearFilename() {
          _builder.clearFilename()
        }

        /**
         * <pre>
         * URL and DOM settings for this asset.
         * </pre>
         *
         * <code>.page.Context.Scripts.JavaScript script = 3;</code>
         */
        var script: tools.elide.page.Context.Scripts.JavaScript
          @JvmName("getScript")
          get() = _builder.getScript()
          @JvmName("setScript")
          set(value) {
            _builder.setScript(value)
          }
        /**
         * <pre>
         * URL and DOM settings for this asset.
         * </pre>
         *
         * <code>.page.Context.Scripts.JavaScript script = 3;</code>
         */
        fun clearScript() {
          _builder.clearScript()
        }
        /**
         * <pre>
         * URL and DOM settings for this asset.
         * </pre>
         *
         * <code>.page.Context.Scripts.JavaScript script = 3;</code>
         * @return Whether the script field is set.
         */
        fun hasScript(): kotlin.Boolean {
          return _builder.hasScript()
        }
      }
    }
  }
  @kotlin.jvm.JvmName("-initializegenericBundle")
  inline fun genericBundle(block: tools.elide.assets.AssetBundleKt.GenericBundleKt.Dsl.() -> kotlin.Unit): tools.elide.assets.AssetBundle.GenericBundle =
    tools.elide.assets.AssetBundleKt.GenericBundleKt.Dsl._create(tools.elide.assets.AssetBundle.GenericBundle.newBuilder()).apply { block() }._build()
  object GenericBundleKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      private val _builder: tools.elide.assets.AssetBundle.GenericBundle.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: tools.elide.assets.AssetBundle.GenericBundle.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): tools.elide.assets.AssetBundle.GenericBundle = _builder.build()

      /**
       * <pre>
       * Generic asset name/path.
       * </pre>
       *
       * <code>string module = 1;</code>
       */
      var module: kotlin.String
        @JvmName("getModule")
        get() = _builder.getModule()
        @JvmName("setModule")
        set(value) {
          _builder.setModule(value)
        }
      /**
       * <pre>
       * Generic asset name/path.
       * </pre>
       *
       * <code>string module = 1;</code>
       */
      fun clearModule() {
        _builder.clearModule()
      }

      /**
       * <pre>
       * Original name of the source file, as applicable.
       * </pre>
       *
       * <code>string filename = 2;</code>
       */
      var filename: kotlin.String
        @JvmName("getFilename")
        get() = _builder.getFilename()
        @JvmName("setFilename")
        set(value) {
          _builder.setFilename(value)
        }
      /**
       * <pre>
       * Original name of the source file, as applicable.
       * </pre>
       *
       * <code>string filename = 2;</code>
       */
      fun clearFilename() {
        _builder.clearFilename()
      }

      /**
       * <pre>
       * Hash token uniquely identifying the content in this module.
       * </pre>
       *
       * <code>string token = 3;</code>
       */
      var token: kotlin.String
        @JvmName("getToken")
        get() = _builder.getToken()
        @JvmName("setToken")
        set(value) {
          _builder.setToken(value)
        }
      /**
       * <pre>
       * Hash token uniquely identifying the content in this module.
       * </pre>
       *
       * <code>string token = 3;</code>
       */
      fun clearToken() {
        _builder.clearToken()
      }

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      class VariantProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * Specifies each variant of an asset's main content.
       * </pre>
       *
       * <code>repeated .data.CompressedData variant = 4;</code>
       */
       val variant: com.google.protobuf.kotlin.DslList<tools.elide.data.CompressedData, VariantProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getVariantList()
        )
      /**
       * <pre>
       * Specifies each variant of an asset's main content.
       * </pre>
       *
       * <code>repeated .data.CompressedData variant = 4;</code>
       * @param value The variant to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addVariant")
      fun com.google.protobuf.kotlin.DslList<tools.elide.data.CompressedData, VariantProxy>.add(value: tools.elide.data.CompressedData) {
        _builder.addVariant(value)
      }
      /**
       * <pre>
       * Specifies each variant of an asset's main content.
       * </pre>
       *
       * <code>repeated .data.CompressedData variant = 4;</code>
       * @param value The variant to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignVariant")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.data.CompressedData, VariantProxy>.plusAssign(value: tools.elide.data.CompressedData) {
        add(value)
      }
      /**
       * <pre>
       * Specifies each variant of an asset's main content.
       * </pre>
       *
       * <code>repeated .data.CompressedData variant = 4;</code>
       * @param values The variant to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllVariant")
      fun com.google.protobuf.kotlin.DslList<tools.elide.data.CompressedData, VariantProxy>.addAll(values: kotlin.collections.Iterable<tools.elide.data.CompressedData>) {
        _builder.addAllVariant(values)
      }
      /**
       * <pre>
       * Specifies each variant of an asset's main content.
       * </pre>
       *
       * <code>repeated .data.CompressedData variant = 4;</code>
       * @param values The variant to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllVariant")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.data.CompressedData, VariantProxy>.plusAssign(values: kotlin.collections.Iterable<tools.elide.data.CompressedData>) {
        addAll(values)
      }
      /**
       * <pre>
       * Specifies each variant of an asset's main content.
       * </pre>
       *
       * <code>repeated .data.CompressedData variant = 4;</code>
       * @param index The index to set the value at.
       * @param value The variant to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setVariant")
      operator fun com.google.protobuf.kotlin.DslList<tools.elide.data.CompressedData, VariantProxy>.set(index: kotlin.Int, value: tools.elide.data.CompressedData) {
        _builder.setVariant(index, value)
      }
      /**
       * <pre>
       * Specifies each variant of an asset's main content.
       * </pre>
       *
       * <code>repeated .data.CompressedData variant = 4;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearVariant")
      fun com.google.protobuf.kotlin.DslList<tools.elide.data.CompressedData, VariantProxy>.clear() {
        _builder.clearVariant()
      }


      /**
       * <pre>
       * Whether this asset should be compressed when serving to end-users.
       * </pre>
       *
       * <code>bool compressable = 5;</code>
       */
      var compressable: kotlin.Boolean
        @JvmName("getCompressable")
        get() = _builder.getCompressable()
        @JvmName("setCompressable")
        set(value) {
          _builder.setCompressable(value)
        }
      /**
       * <pre>
       * Whether this asset should be compressed when serving to end-users.
       * </pre>
       *
       * <code>bool compressable = 5;</code>
       */
      fun clearCompressable() {
        _builder.clearCompressable()
      }

      /**
       * <pre>
       * Whether this asset should be considered cacheable.
       * </pre>
       *
       * <code>bool cacheable = 6;</code>
       */
      var cacheable: kotlin.Boolean
        @JvmName("getCacheable")
        get() = _builder.getCacheable()
        @JvmName("setCacheable")
        set(value) {
          _builder.setCacheable(value)
        }
      /**
       * <pre>
       * Whether this asset should be considered cacheable.
       * </pre>
       *
       * <code>bool cacheable = 6;</code>
       */
      fun clearCacheable() {
        _builder.clearCacheable()
      }

      /**
       * <pre>
       * Marked if this asset is external, in which case the described stylesheet should be referenced via a link tag.
       * </pre>
       *
       * <code>bool external = 7;</code>
       */
      var external: kotlin.Boolean
        @JvmName("getExternal")
        get() = _builder.getExternal()
        @JvmName("setExternal")
        set(value) {
          _builder.setExternal(value)
        }
      /**
       * <pre>
       * Marked if this asset is external, in which case the described stylesheet should be referenced via a link tag.
       * </pre>
       *
       * <code>bool external = 7;</code>
       */
      fun clearExternal() {
        _builder.clearExternal()
      }
    }
  }
  @kotlin.jvm.JvmName("-initializeassetContent")
  inline fun assetContent(block: tools.elide.assets.AssetBundleKt.AssetContentKt.Dsl.() -> kotlin.Unit): tools.elide.assets.AssetBundle.AssetContent =
    tools.elide.assets.AssetBundleKt.AssetContentKt.Dsl._create(tools.elide.assets.AssetBundle.AssetContent.newBuilder()).apply { block() }._build()
  object AssetContentKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      private val _builder: tools.elide.assets.AssetBundle.AssetContent.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: tools.elide.assets.AssetBundle.AssetContent.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): tools.elide.assets.AssetBundle.AssetContent = _builder.build()

      /**
       * <pre>
       * Module which this asset is a member of.
       * </pre>
       *
       * <code>string module = 1;</code>
       */
      var module: kotlin.String
        @JvmName("getModule")
        get() = _builder.getModule()
        @JvmName("setModule")
        set(value) {
          _builder.setModule(value)
        }
      /**
       * <pre>
       * Module which this asset is a member of.
       * </pre>
       *
       * <code>string module = 1;</code>
       */
      fun clearModule() {
        _builder.clearModule()
      }

      /**
       * <pre>
       * Original name of the source file.
       * </pre>
       *
       * <code>string filename = 2;</code>
       */
      var filename: kotlin.String
        @JvmName("getFilename")
        get() = _builder.getFilename()
        @JvmName("setFilename")
        set(value) {
          _builder.setFilename(value)
        }
      /**
       * <pre>
       * Original name of the source file.
       * </pre>
       *
       * <code>string filename = 2;</code>
       */
      fun clearFilename() {
        _builder.clearFilename()
      }

      /**
       * <pre>
       * Hash token uniquely identifying the content in this module.
       * </pre>
       *
       * <code>string token = 3;</code>
       */
      var token: kotlin.String
        @JvmName("getToken")
        get() = _builder.getToken()
        @JvmName("setToken")
        set(value) {
          _builder.setToken(value)
        }
      /**
       * <pre>
       * Hash token uniquely identifying the content in this module.
       * </pre>
       *
       * <code>string token = 3;</code>
       */
      fun clearToken() {
        _builder.clearToken()
      }

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      class VariantProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * Specifies each variant of an asset's main content.
       * </pre>
       *
       * <code>repeated .data.CompressedData variant = 4;</code>
       */
       val variant: com.google.protobuf.kotlin.DslList<tools.elide.data.CompressedData, VariantProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getVariantList()
        )
      /**
       * <pre>
       * Specifies each variant of an asset's main content.
       * </pre>
       *
       * <code>repeated .data.CompressedData variant = 4;</code>
       * @param value The variant to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addVariant")
      fun com.google.protobuf.kotlin.DslList<tools.elide.data.CompressedData, VariantProxy>.add(value: tools.elide.data.CompressedData) {
        _builder.addVariant(value)
      }
      /**
       * <pre>
       * Specifies each variant of an asset's main content.
       * </pre>
       *
       * <code>repeated .data.CompressedData variant = 4;</code>
       * @param value The variant to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignVariant")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.data.CompressedData, VariantProxy>.plusAssign(value: tools.elide.data.CompressedData) {
        add(value)
      }
      /**
       * <pre>
       * Specifies each variant of an asset's main content.
       * </pre>
       *
       * <code>repeated .data.CompressedData variant = 4;</code>
       * @param values The variant to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllVariant")
      fun com.google.protobuf.kotlin.DslList<tools.elide.data.CompressedData, VariantProxy>.addAll(values: kotlin.collections.Iterable<tools.elide.data.CompressedData>) {
        _builder.addAllVariant(values)
      }
      /**
       * <pre>
       * Specifies each variant of an asset's main content.
       * </pre>
       *
       * <code>repeated .data.CompressedData variant = 4;</code>
       * @param values The variant to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllVariant")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.data.CompressedData, VariantProxy>.plusAssign(values: kotlin.collections.Iterable<tools.elide.data.CompressedData>) {
        addAll(values)
      }
      /**
       * <pre>
       * Specifies each variant of an asset's main content.
       * </pre>
       *
       * <code>repeated .data.CompressedData variant = 4;</code>
       * @param index The index to set the value at.
       * @param value The variant to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setVariant")
      operator fun com.google.protobuf.kotlin.DslList<tools.elide.data.CompressedData, VariantProxy>.set(index: kotlin.Int, value: tools.elide.data.CompressedData) {
        _builder.setVariant(index, value)
      }
      /**
       * <pre>
       * Specifies each variant of an asset's main content.
       * </pre>
       *
       * <code>repeated .data.CompressedData variant = 4;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearVariant")
      fun com.google.protobuf.kotlin.DslList<tools.elide.data.CompressedData, VariantProxy>.clear() {
        _builder.clearVariant()
      }

    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun tools.elide.assets.AssetBundle.copy(block: tools.elide.assets.AssetBundleKt.Dsl.() -> kotlin.Unit): tools.elide.assets.AssetBundle =
  tools.elide.assets.AssetBundleKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.assets.AssetBundle.DigestSettings.copy(block: tools.elide.assets.AssetBundleKt.DigestSettingsKt.Dsl.() -> kotlin.Unit): tools.elide.assets.AssetBundle.DigestSettings =
  tools.elide.assets.AssetBundleKt.DigestSettingsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.assets.AssetBundle.RewriteMap.copy(block: tools.elide.assets.AssetBundleKt.RewriteMapKt.Dsl.() -> kotlin.Unit): tools.elide.assets.AssetBundle.RewriteMap =
  tools.elide.assets.AssetBundleKt.RewriteMapKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.assets.AssetBundle.BundlerSettings.copy(block: tools.elide.assets.AssetBundleKt.BundlerSettingsKt.Dsl.() -> kotlin.Unit): tools.elide.assets.AssetBundle.BundlerSettings =
  tools.elide.assets.AssetBundleKt.BundlerSettingsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val tools.elide.assets.AssetBundle.BundlerSettingsOrBuilder.digestSettingsOrNull: tools.elide.assets.AssetBundle.DigestSettings?
  get() = if (hasDigestSettings()) getDigestSettings() else null

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.assets.AssetBundle.AssetDependencies.copy(block: tools.elide.assets.AssetBundleKt.AssetDependenciesKt.Dsl.() -> kotlin.Unit): tools.elide.assets.AssetBundle.AssetDependencies =
  tools.elide.assets.AssetBundleKt.AssetDependenciesKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val tools.elide.assets.AssetBundle.AssetDependenciesOrBuilder.maskOrNull: tools.elide.struct.BloomFilter?
  get() = if (hasMask()) getMask() else null

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.assets.AssetBundle.StyleBundle.copy(block: tools.elide.assets.AssetBundleKt.StyleBundleKt.Dsl.() -> kotlin.Unit): tools.elide.assets.AssetBundle.StyleBundle =
  tools.elide.assets.AssetBundleKt.StyleBundleKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.assets.AssetBundle.StyleBundle.StyleAsset.copy(block: tools.elide.assets.AssetBundleKt.StyleBundleKt.StyleAssetKt.Dsl.() -> kotlin.Unit): tools.elide.assets.AssetBundle.StyleBundle.StyleAsset =
  tools.elide.assets.AssetBundleKt.StyleBundleKt.StyleAssetKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val tools.elide.assets.AssetBundle.StyleBundle.StyleAssetOrBuilder.stylesheetOrNull: tools.elide.page.Context.Styles.Stylesheet?
  get() = if (hasStylesheet()) getStylesheet() else null

val tools.elide.assets.AssetBundle.StyleBundleOrBuilder.rewriteMapOrNull: tools.elide.assets.AssetBundle.RewriteMap?
  get() = if (hasRewriteMap()) getRewriteMap() else null

val tools.elide.assets.AssetBundle.StyleBundleOrBuilder.dependenciesOrNull: tools.elide.assets.AssetBundle.AssetDependencies?
  get() = if (hasDependencies()) getDependencies() else null

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.assets.AssetBundle.ScriptBundle.copy(block: tools.elide.assets.AssetBundleKt.ScriptBundleKt.Dsl.() -> kotlin.Unit): tools.elide.assets.AssetBundle.ScriptBundle =
  tools.elide.assets.AssetBundleKt.ScriptBundleKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.assets.AssetBundle.ScriptBundle.ScriptAsset.copy(block: tools.elide.assets.AssetBundleKt.ScriptBundleKt.ScriptAssetKt.Dsl.() -> kotlin.Unit): tools.elide.assets.AssetBundle.ScriptBundle.ScriptAsset =
  tools.elide.assets.AssetBundleKt.ScriptBundleKt.ScriptAssetKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val tools.elide.assets.AssetBundle.ScriptBundle.ScriptAssetOrBuilder.scriptOrNull: tools.elide.page.Context.Scripts.JavaScript?
  get() = if (hasScript()) getScript() else null

val tools.elide.assets.AssetBundle.ScriptBundleOrBuilder.dependenciesOrNull: tools.elide.assets.AssetBundle.AssetDependencies?
  get() = if (hasDependencies()) getDependencies() else null

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.assets.AssetBundle.GenericBundle.copy(block: tools.elide.assets.AssetBundleKt.GenericBundleKt.Dsl.() -> kotlin.Unit): tools.elide.assets.AssetBundle.GenericBundle =
  tools.elide.assets.AssetBundleKt.GenericBundleKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.assets.AssetBundle.AssetContent.copy(block: tools.elide.assets.AssetBundleKt.AssetContentKt.Dsl.() -> kotlin.Unit): tools.elide.assets.AssetBundle.AssetContent =
  tools.elide.assets.AssetBundleKt.AssetContentKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val tools.elide.assets.AssetBundleOrBuilder.settingsOrNull: tools.elide.assets.AssetBundle.BundlerSettings?
  get() = if (hasSettings()) getSettings() else null

val tools.elide.assets.AssetBundleOrBuilder.generatedOrNull: com.google.protobuf.Timestamp?
  get() = if (hasGenerated()) getGenerated() else null

