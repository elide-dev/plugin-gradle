//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: elide/assets/embedded.proto

package tools.elide.assets;

@kotlin.jvm.JvmName("-initializeembeddedScriptMetadata")
inline fun embeddedScriptMetadata(block: tools.elide.assets.EmbeddedScriptMetadataKt.Dsl.() -> kotlin.Unit): tools.elide.assets.EmbeddedScriptMetadata =
  tools.elide.assets.EmbeddedScriptMetadataKt.Dsl._create(tools.elide.assets.EmbeddedScriptMetadata.newBuilder()).apply { block() }._build()
object EmbeddedScriptMetadataKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: tools.elide.assets.EmbeddedScriptMetadata.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: tools.elide.assets.EmbeddedScriptMetadata.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): tools.elide.assets.EmbeddedScriptMetadata = _builder.build()

    /**
     * <pre>
     * JavaScript-related metadata.
     * </pre>
     *
     * <code>.assets.EmbeddedScriptMetadata.JsScriptMetadata javascript = 1;</code>
     */
    var javascript: tools.elide.assets.EmbeddedScriptMetadata.JsScriptMetadata
      @JvmName("getJavascript")
      get() = _builder.getJavascript()
      @JvmName("setJavascript")
      set(value) {
        _builder.setJavascript(value)
      }
    /**
     * <pre>
     * JavaScript-related metadata.
     * </pre>
     *
     * <code>.assets.EmbeddedScriptMetadata.JsScriptMetadata javascript = 1;</code>
     */
    fun clearJavascript() {
      _builder.clearJavascript()
    }
    /**
     * <pre>
     * JavaScript-related metadata.
     * </pre>
     *
     * <code>.assets.EmbeddedScriptMetadata.JsScriptMetadata javascript = 1;</code>
     * @return Whether the javascript field is set.
     */
    fun hasJavascript(): kotlin.Boolean {
      return _builder.hasJavascript()
    }
    val metadataCase: tools.elide.assets.EmbeddedScriptMetadata.MetadataCase
      @JvmName("getMetadataCase")
      get() = _builder.getMetadataCase()

    fun clearMetadata() {
      _builder.clearMetadata()
    }
  }
  @kotlin.jvm.JvmName("-initializejsScriptMetadata")
  inline fun jsScriptMetadata(block: tools.elide.assets.EmbeddedScriptMetadataKt.JsScriptMetadataKt.Dsl.() -> kotlin.Unit): tools.elide.assets.EmbeddedScriptMetadata.JsScriptMetadata =
    tools.elide.assets.EmbeddedScriptMetadataKt.JsScriptMetadataKt.Dsl._create(tools.elide.assets.EmbeddedScriptMetadata.JsScriptMetadata.newBuilder()).apply { block() }._build()
  object JsScriptMetadataKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      private val _builder: tools.elide.assets.EmbeddedScriptMetadata.JsScriptMetadata.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: tools.elide.assets.EmbeddedScriptMetadata.JsScriptMetadata.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): tools.elide.assets.EmbeddedScriptMetadata.JsScriptMetadata = _builder.build()

      /**
       * <pre>
       * Describes the JavaScript language level for the embedded script.
       * </pre>
       *
       * <code>.assets.EmbeddedScriptMetadata.JsScriptMetadata.JsLanguageLevel level = 1;</code>
       */
       var level: tools.elide.assets.EmbeddedScriptMetadata.JsScriptMetadata.JsLanguageLevel
        @JvmName("getLevel")
        get() = _builder.getLevel()
        @JvmName("setLevel")
        set(value) {
          _builder.setLevel(value)
        }
      /**
       * <pre>
       * Describes the JavaScript language level for the embedded script.
       * </pre>
       *
       * <code>.assets.EmbeddedScriptMetadata.JsScriptMetadata.JsLanguageLevel level = 1;</code>
       */
      fun clearLevel() {
        _builder.clearLevel()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun tools.elide.assets.EmbeddedScriptMetadata.copy(block: tools.elide.assets.EmbeddedScriptMetadataKt.Dsl.() -> kotlin.Unit): tools.elide.assets.EmbeddedScriptMetadata =
  tools.elide.assets.EmbeddedScriptMetadataKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.assets.EmbeddedScriptMetadata.JsScriptMetadata.copy(block: tools.elide.assets.EmbeddedScriptMetadataKt.JsScriptMetadataKt.Dsl.() -> kotlin.Unit): tools.elide.assets.EmbeddedScriptMetadata.JsScriptMetadata =
  tools.elide.assets.EmbeddedScriptMetadataKt.JsScriptMetadataKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val tools.elide.assets.EmbeddedScriptMetadataOrBuilder.javascriptOrNull: tools.elide.assets.EmbeddedScriptMetadata.JsScriptMetadata?
  get() = if (hasJavascript()) getJavascript() else null

