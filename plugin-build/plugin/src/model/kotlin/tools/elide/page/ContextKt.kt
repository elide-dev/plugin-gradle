//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: elide/page/page.proto

package tools.elide.page;

@kotlin.jvm.JvmName("-initializecontext")
inline fun context(block: tools.elide.page.ContextKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context =
  tools.elide.page.ContextKt.Dsl._create(tools.elide.page.Context.newBuilder()).apply { block() }._build()
object ContextKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: tools.elide.page.Context.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: tools.elide.page.Context.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): tools.elide.page.Context = _builder.build()

    /**
     * <pre>
     * Metadata definitions for this web page render context.
     * </pre>
     *
     * <code>.page.Context.Metadata meta = 1;</code>
     */
    var meta: tools.elide.page.Context.Metadata
      @JvmName("getMeta")
      get() = _builder.getMeta()
      @JvmName("setMeta")
      set(value) {
        _builder.setMeta(value)
      }
    /**
     * <pre>
     * Metadata definitions for this web page render context.
     * </pre>
     *
     * <code>.page.Context.Metadata meta = 1;</code>
     */
    fun clearMeta() {
      _builder.clearMeta()
    }
    /**
     * <pre>
     * Metadata definitions for this web page render context.
     * </pre>
     *
     * <code>.page.Context.Metadata meta = 1;</code>
     * @return Whether the meta field is set.
     */
    fun hasMeta(): kotlin.Boolean {
      return _builder.hasMeta()
    }

    /**
     * <pre>
     * CSS definitions and lifted code for the page head.
     * </pre>
     *
     * <code>.page.Context.Styles styles = 2;</code>
     */
    var styles: tools.elide.page.Context.Styles
      @JvmName("getStyles")
      get() = _builder.getStyles()
      @JvmName("setStyles")
      set(value) {
        _builder.setStyles(value)
      }
    /**
     * <pre>
     * CSS definitions and lifted code for the page head.
     * </pre>
     *
     * <code>.page.Context.Styles styles = 2;</code>
     */
    fun clearStyles() {
      _builder.clearStyles()
    }
    /**
     * <pre>
     * CSS definitions and lifted code for the page head.
     * </pre>
     *
     * <code>.page.Context.Styles styles = 2;</code>
     * @return Whether the styles field is set.
     */
    fun hasStyles(): kotlin.Boolean {
      return _builder.hasStyles()
    }

    /**
     * <pre>
     * Fonts to include/load on the page.
     * </pre>
     *
     * <code>.page.Context.Fonts fonts = 3;</code>
     */
    var fonts: tools.elide.page.Context.Fonts
      @JvmName("getFonts")
      get() = _builder.getFonts()
      @JvmName("setFonts")
      set(value) {
        _builder.setFonts(value)
      }
    /**
     * <pre>
     * Fonts to include/load on the page.
     * </pre>
     *
     * <code>.page.Context.Fonts fonts = 3;</code>
     */
    fun clearFonts() {
      _builder.clearFonts()
    }
    /**
     * <pre>
     * Fonts to include/load on the page.
     * </pre>
     *
     * <code>.page.Context.Fonts fonts = 3;</code>
     * @return Whether the fonts field is set.
     */
    fun hasFonts(): kotlin.Boolean {
      return _builder.hasFonts()
    }

    /**
     * <pre>
     * Scripts to include on the page or lift into the head.
     * </pre>
     *
     * <code>.page.Context.Scripts scripts = 4;</code>
     */
    var scripts: tools.elide.page.Context.Scripts
      @JvmName("getScripts")
      get() = _builder.getScripts()
      @JvmName("setScripts")
      set(value) {
        _builder.setScripts(value)
      }
    /**
     * <pre>
     * Scripts to include on the page or lift into the head.
     * </pre>
     *
     * <code>.page.Context.Scripts scripts = 4;</code>
     */
    fun clearScripts() {
      _builder.clearScripts()
    }
    /**
     * <pre>
     * Scripts to include on the page or lift into the head.
     * </pre>
     *
     * <code>.page.Context.Scripts scripts = 4;</code>
     * @return Whether the scripts field is set.
     */
    fun hasScripts(): kotlin.Boolean {
      return _builder.hasScripts()
    }

    /**
     * <pre>
     * Application manifest for a given page or web app.
     * </pre>
     *
     * <code>.page.Context.AppManifest manifest = 5;</code>
     */
    var manifest: tools.elide.page.Context.AppManifest
      @JvmName("getManifest")
      get() = _builder.getManifest()
      @JvmName("setManifest")
      set(value) {
        _builder.setManifest(value)
      }
    /**
     * <pre>
     * Application manifest for a given page or web app.
     * </pre>
     *
     * <code>.page.Context.AppManifest manifest = 5;</code>
     */
    fun clearManifest() {
      _builder.clearManifest()
    }
    /**
     * <pre>
     * Application manifest for a given page or web app.
     * </pre>
     *
     * <code>.page.Context.AppManifest manifest = 5;</code>
     * @return Whether the manifest field is set.
     */
    fun hasManifest(): kotlin.Boolean {
      return _builder.hasManifest()
    }

    /**
     * <pre>
     * `ETag` information to enclose with this page, when rendered.
     * </pre>
     *
     * <code>.page.Context.DynamicETag etag = 6;</code>
     */
    var etag: tools.elide.page.Context.DynamicETag
      @JvmName("getEtag")
      get() = _builder.getEtag()
      @JvmName("setEtag")
      set(value) {
        _builder.setEtag(value)
      }
    /**
     * <pre>
     * `ETag` information to enclose with this page, when rendered.
     * </pre>
     *
     * <code>.page.Context.DynamicETag etag = 6;</code>
     */
    fun clearEtag() {
      _builder.clearEtag()
    }
    /**
     * <pre>
     * `ETag` information to enclose with this page, when rendered.
     * </pre>
     *
     * <code>.page.Context.DynamicETag etag = 6;</code>
     * @return Whether the etag field is set.
     */
    fun hasEtag(): kotlin.Boolean {
      return _builder.hasEtag()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class CookieProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Specifies HTTP cookies to affix to the response associated with this context.
     * </pre>
     *
     * <code>repeated .page.Context.Cookie cookie = 8;</code>
     */
     val cookie: com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Cookie, CookieProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getCookieList()
      )
    /**
     * <pre>
     * Specifies HTTP cookies to affix to the response associated with this context.
     * </pre>
     *
     * <code>repeated .page.Context.Cookie cookie = 8;</code>
     * @param value The cookie to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addCookie")
    fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Cookie, CookieProxy>.add(value: tools.elide.page.Context.Cookie) {
      _builder.addCookie(value)
    }
    /**
     * <pre>
     * Specifies HTTP cookies to affix to the response associated with this context.
     * </pre>
     *
     * <code>repeated .page.Context.Cookie cookie = 8;</code>
     * @param value The cookie to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignCookie")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Cookie, CookieProxy>.plusAssign(value: tools.elide.page.Context.Cookie) {
      add(value)
    }
    /**
     * <pre>
     * Specifies HTTP cookies to affix to the response associated with this context.
     * </pre>
     *
     * <code>repeated .page.Context.Cookie cookie = 8;</code>
     * @param values The cookie to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllCookie")
    fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Cookie, CookieProxy>.addAll(values: kotlin.collections.Iterable<tools.elide.page.Context.Cookie>) {
      _builder.addAllCookie(values)
    }
    /**
     * <pre>
     * Specifies HTTP cookies to affix to the response associated with this context.
     * </pre>
     *
     * <code>repeated .page.Context.Cookie cookie = 8;</code>
     * @param values The cookie to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllCookie")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Cookie, CookieProxy>.plusAssign(values: kotlin.collections.Iterable<tools.elide.page.Context.Cookie>) {
      addAll(values)
    }
    /**
     * <pre>
     * Specifies HTTP cookies to affix to the response associated with this context.
     * </pre>
     *
     * <code>repeated .page.Context.Cookie cookie = 8;</code>
     * @param index The index to set the value at.
     * @param value The cookie to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setCookie")
    operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Cookie, CookieProxy>.set(index: kotlin.Int, value: tools.elide.page.Context.Cookie) {
      _builder.setCookie(index, value)
    }
    /**
     * <pre>
     * Specifies HTTP cookies to affix to the response associated with this context.
     * </pre>
     *
     * <code>repeated .page.Context.Cookie cookie = 8;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearCookie")
    fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Cookie, CookieProxy>.clear() {
      _builder.clearCookie()
    }


    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class HeaderProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Custom headers to affix to the response associated with this context.
     * </pre>
     *
     * <code>repeated .page.Context.ResponseHeader header = 9;</code>
     */
     val header: com.google.protobuf.kotlin.DslList<tools.elide.page.Context.ResponseHeader, HeaderProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getHeaderList()
      )
    /**
     * <pre>
     * Custom headers to affix to the response associated with this context.
     * </pre>
     *
     * <code>repeated .page.Context.ResponseHeader header = 9;</code>
     * @param value The header to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addHeader")
    fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.ResponseHeader, HeaderProxy>.add(value: tools.elide.page.Context.ResponseHeader) {
      _builder.addHeader(value)
    }
    /**
     * <pre>
     * Custom headers to affix to the response associated with this context.
     * </pre>
     *
     * <code>repeated .page.Context.ResponseHeader header = 9;</code>
     * @param value The header to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignHeader")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.ResponseHeader, HeaderProxy>.plusAssign(value: tools.elide.page.Context.ResponseHeader) {
      add(value)
    }
    /**
     * <pre>
     * Custom headers to affix to the response associated with this context.
     * </pre>
     *
     * <code>repeated .page.Context.ResponseHeader header = 9;</code>
     * @param values The header to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllHeader")
    fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.ResponseHeader, HeaderProxy>.addAll(values: kotlin.collections.Iterable<tools.elide.page.Context.ResponseHeader>) {
      _builder.addAllHeader(values)
    }
    /**
     * <pre>
     * Custom headers to affix to the response associated with this context.
     * </pre>
     *
     * <code>repeated .page.Context.ResponseHeader header = 9;</code>
     * @param values The header to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllHeader")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.ResponseHeader, HeaderProxy>.plusAssign(values: kotlin.collections.Iterable<tools.elide.page.Context.ResponseHeader>) {
      addAll(values)
    }
    /**
     * <pre>
     * Custom headers to affix to the response associated with this context.
     * </pre>
     *
     * <code>repeated .page.Context.ResponseHeader header = 9;</code>
     * @param index The index to set the value at.
     * @param value The header to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setHeader")
    operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.ResponseHeader, HeaderProxy>.set(index: kotlin.Int, value: tools.elide.page.Context.ResponseHeader) {
      _builder.setHeader(index, value)
    }
    /**
     * <pre>
     * Custom headers to affix to the response associated with this context.
     * </pre>
     *
     * <code>repeated .page.Context.ResponseHeader header = 9;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearHeader")
    fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.ResponseHeader, HeaderProxy>.clear() {
      _builder.clearHeader()
    }


    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class VaryProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Set of HTTP request headers which cause this response to vary.
     * </pre>
     *
     * <code>repeated string vary = 10;</code>
     * @return A list containing the vary.
     */
     val vary: com.google.protobuf.kotlin.DslList<kotlin.String, VaryProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getVaryList()
      )
    /**
     * <pre>
     * Set of HTTP request headers which cause this response to vary.
     * </pre>
     *
     * <code>repeated string vary = 10;</code>
     * @param value The vary to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addVary")
    fun com.google.protobuf.kotlin.DslList<kotlin.String, VaryProxy>.add(value: kotlin.String) {
      _builder.addVary(value)
    }
    /**
     * <pre>
     * Set of HTTP request headers which cause this response to vary.
     * </pre>
     *
     * <code>repeated string vary = 10;</code>
     * @param value The vary to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignVary")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, VaryProxy>.plusAssign(value: kotlin.String) {
      add(value)
    }
    /**
     * <pre>
     * Set of HTTP request headers which cause this response to vary.
     * </pre>
     *
     * <code>repeated string vary = 10;</code>
     * @param values The vary to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllVary")
    fun com.google.protobuf.kotlin.DslList<kotlin.String, VaryProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllVary(values)
    }
    /**
     * <pre>
     * Set of HTTP request headers which cause this response to vary.
     * </pre>
     *
     * <code>repeated string vary = 10;</code>
     * @param values The vary to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllVary")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, VaryProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      addAll(values)
    }
    /**
     * <pre>
     * Set of HTTP request headers which cause this response to vary.
     * </pre>
     *
     * <code>repeated string vary = 10;</code>
     * @param index The index to set the value at.
     * @param value The vary to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setVary")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.String, VaryProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setVary(index, value)
    }/**
     * <pre>
     * Set of HTTP request headers which cause this response to vary.
     * </pre>
     *
     * <code>repeated string vary = 10;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearVary")
    fun com.google.protobuf.kotlin.DslList<kotlin.String, VaryProxy>.clear() {
      _builder.clearVary()
    }
    /**
     * <pre>
     * Language to send in the `Content-Language` header.
     * </pre>
     *
     * <code>string language = 11;</code>
     */
    var language: kotlin.String
      @JvmName("getLanguage")
      get() = _builder.getLanguage()
      @JvmName("setLanguage")
      set(value) {
        _builder.setLanguage(value)
      }
    /**
     * <pre>
     * Language to send in the `Content-Language` header.
     * </pre>
     *
     * <code>string language = 11;</code>
     */
    fun clearLanguage() {
      _builder.clearLanguage()
    }

    /**
     * <pre>
     * Information provided by client-indicated hints.
     * </pre>
     *
     * <code>.page.Context.ClientHints hints = 12;</code>
     */
    var hints: tools.elide.page.Context.ClientHints
      @JvmName("getHints")
      get() = _builder.getHints()
      @JvmName("setHints")
      set(value) {
        _builder.setHints(value)
      }
    /**
     * <pre>
     * Information provided by client-indicated hints.
     * </pre>
     *
     * <code>.page.Context.ClientHints hints = 12;</code>
     */
    fun clearHints() {
      _builder.clearHints()
    }
    /**
     * <pre>
     * Information provided by client-indicated hints.
     * </pre>
     *
     * <code>.page.Context.ClientHints hints = 12;</code>
     * @return Whether the hints field is set.
     */
    fun hasHints(): kotlin.Boolean {
      return _builder.hasHints()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class FeaturePolicyProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Specifies feature policies for this HTTP cycle.
     * </pre>
     *
     * <code>repeated string feature_policy = 13;</code>
     * @return A list containing the featurePolicy.
     */
     val featurePolicy: com.google.protobuf.kotlin.DslList<kotlin.String, FeaturePolicyProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getFeaturePolicyList()
      )
    /**
     * <pre>
     * Specifies feature policies for this HTTP cycle.
     * </pre>
     *
     * <code>repeated string feature_policy = 13;</code>
     * @param value The featurePolicy to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addFeaturePolicy")
    fun com.google.protobuf.kotlin.DslList<kotlin.String, FeaturePolicyProxy>.add(value: kotlin.String) {
      _builder.addFeaturePolicy(value)
    }
    /**
     * <pre>
     * Specifies feature policies for this HTTP cycle.
     * </pre>
     *
     * <code>repeated string feature_policy = 13;</code>
     * @param value The featurePolicy to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignFeaturePolicy")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, FeaturePolicyProxy>.plusAssign(value: kotlin.String) {
      add(value)
    }
    /**
     * <pre>
     * Specifies feature policies for this HTTP cycle.
     * </pre>
     *
     * <code>repeated string feature_policy = 13;</code>
     * @param values The featurePolicy to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllFeaturePolicy")
    fun com.google.protobuf.kotlin.DslList<kotlin.String, FeaturePolicyProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllFeaturePolicy(values)
    }
    /**
     * <pre>
     * Specifies feature policies for this HTTP cycle.
     * </pre>
     *
     * <code>repeated string feature_policy = 13;</code>
     * @param values The featurePolicy to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllFeaturePolicy")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, FeaturePolicyProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      addAll(values)
    }
    /**
     * <pre>
     * Specifies feature policies for this HTTP cycle.
     * </pre>
     *
     * <code>repeated string feature_policy = 13;</code>
     * @param index The index to set the value at.
     * @param value The featurePolicy to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setFeaturePolicy")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.String, FeaturePolicyProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setFeaturePolicy(index, value)
    }/**
     * <pre>
     * Specifies feature policies for this HTTP cycle.
     * </pre>
     *
     * <code>repeated string feature_policy = 13;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearFeaturePolicy")
    fun com.google.protobuf.kotlin.DslList<kotlin.String, FeaturePolicyProxy>.clear() {
      _builder.clearFeaturePolicy()
    }
    /**
     * <pre>
     * Specifies options when a page is referenced as a frame.
     * </pre>
     *
     * <code>.page.Context.FramingPolicy framing_policy = 15;</code>
     */
     var framingPolicy: tools.elide.page.Context.FramingPolicy
      @JvmName("getFramingPolicy")
      get() = _builder.getFramingPolicy()
      @JvmName("setFramingPolicy")
      set(value) {
        _builder.setFramingPolicy(value)
      }
    /**
     * <pre>
     * Specifies options when a page is referenced as a frame.
     * </pre>
     *
     * <code>.page.Context.FramingPolicy framing_policy = 15;</code>
     */
    fun clearFramingPolicy() {
      _builder.clearFramingPolicy()
    }

    /**
     * <pre>
     * Specifies that the `nosniff` flag should be included in a `X-Content-Type-Options` header.
     * </pre>
     *
     * <code>bool content_type_nosniff = 16;</code>
     */
    var contentTypeNosniff: kotlin.Boolean
      @JvmName("getContentTypeNosniff")
      get() = _builder.getContentTypeNosniff()
      @JvmName("setContentTypeNosniff")
      set(value) {
        _builder.setContentTypeNosniff(value)
      }
    /**
     * <pre>
     * Specifies that the `nosniff` flag should be included in a `X-Content-Type-Options` header.
     * </pre>
     *
     * <code>bool content_type_nosniff = 16;</code>
     */
    fun clearContentTypeNosniff() {
      _builder.clearContentTypeNosniff()
    }

    /**
     * <pre>
     * Specifies the selected CDN prefix to use.
     * </pre>
     *
     * <code>.webutil.html.types.TrustedResourceUrlProto cdn_prefix = 17;</code>
     */
    var cdnPrefix: com.google.common.html.types.TrustedResourceUrlProto
      @JvmName("getCdnPrefix")
      get() = _builder.getCdnPrefix()
      @JvmName("setCdnPrefix")
      set(value) {
        _builder.setCdnPrefix(value)
      }
    /**
     * <pre>
     * Specifies the selected CDN prefix to use.
     * </pre>
     *
     * <code>.webutil.html.types.TrustedResourceUrlProto cdn_prefix = 17;</code>
     */
    fun clearCdnPrefix() {
      _builder.clearCdnPrefix()
    }
    /**
     * <pre>
     * Specifies the selected CDN prefix to use.
     * </pre>
     *
     * <code>.webutil.html.types.TrustedResourceUrlProto cdn_prefix = 17;</code>
     * @return Whether the cdnPrefix field is set.
     */
    fun hasCdnPrefix(): kotlin.Boolean {
      return _builder.hasCdnPrefix()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class DnsPrefetchProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Specifies hostnames to pre-load DNS records for.
     * </pre>
     *
     * <code>repeated string dns_prefetch = 18;</code>
     * @return A list containing the dnsPrefetch.
     */
     val dnsPrefetch: com.google.protobuf.kotlin.DslList<kotlin.String, DnsPrefetchProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getDnsPrefetchList()
      )
    /**
     * <pre>
     * Specifies hostnames to pre-load DNS records for.
     * </pre>
     *
     * <code>repeated string dns_prefetch = 18;</code>
     * @param value The dnsPrefetch to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addDnsPrefetch")
    fun com.google.protobuf.kotlin.DslList<kotlin.String, DnsPrefetchProxy>.add(value: kotlin.String) {
      _builder.addDnsPrefetch(value)
    }
    /**
     * <pre>
     * Specifies hostnames to pre-load DNS records for.
     * </pre>
     *
     * <code>repeated string dns_prefetch = 18;</code>
     * @param value The dnsPrefetch to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignDnsPrefetch")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, DnsPrefetchProxy>.plusAssign(value: kotlin.String) {
      add(value)
    }
    /**
     * <pre>
     * Specifies hostnames to pre-load DNS records for.
     * </pre>
     *
     * <code>repeated string dns_prefetch = 18;</code>
     * @param values The dnsPrefetch to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllDnsPrefetch")
    fun com.google.protobuf.kotlin.DslList<kotlin.String, DnsPrefetchProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllDnsPrefetch(values)
    }
    /**
     * <pre>
     * Specifies hostnames to pre-load DNS records for.
     * </pre>
     *
     * <code>repeated string dns_prefetch = 18;</code>
     * @param values The dnsPrefetch to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllDnsPrefetch")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, DnsPrefetchProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      addAll(values)
    }
    /**
     * <pre>
     * Specifies hostnames to pre-load DNS records for.
     * </pre>
     *
     * <code>repeated string dns_prefetch = 18;</code>
     * @param index The index to set the value at.
     * @param value The dnsPrefetch to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setDnsPrefetch")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.String, DnsPrefetchProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setDnsPrefetch(index, value)
    }/**
     * <pre>
     * Specifies hostnames to pre-load DNS records for.
     * </pre>
     *
     * <code>repeated string dns_prefetch = 18;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearDnsPrefetch")
    fun com.google.protobuf.kotlin.DslList<kotlin.String, DnsPrefetchProxy>.clear() {
      _builder.clearDnsPrefetch()
    }
    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class PreconnectProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Specifies hostnames to pre-connect to.
     * </pre>
     *
     * <code>repeated string preconnect = 19;</code>
     * @return A list containing the preconnect.
     */
     val preconnect: com.google.protobuf.kotlin.DslList<kotlin.String, PreconnectProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getPreconnectList()
      )
    /**
     * <pre>
     * Specifies hostnames to pre-connect to.
     * </pre>
     *
     * <code>repeated string preconnect = 19;</code>
     * @param value The preconnect to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addPreconnect")
    fun com.google.protobuf.kotlin.DslList<kotlin.String, PreconnectProxy>.add(value: kotlin.String) {
      _builder.addPreconnect(value)
    }
    /**
     * <pre>
     * Specifies hostnames to pre-connect to.
     * </pre>
     *
     * <code>repeated string preconnect = 19;</code>
     * @param value The preconnect to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignPreconnect")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, PreconnectProxy>.plusAssign(value: kotlin.String) {
      add(value)
    }
    /**
     * <pre>
     * Specifies hostnames to pre-connect to.
     * </pre>
     *
     * <code>repeated string preconnect = 19;</code>
     * @param values The preconnect to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllPreconnect")
    fun com.google.protobuf.kotlin.DslList<kotlin.String, PreconnectProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllPreconnect(values)
    }
    /**
     * <pre>
     * Specifies hostnames to pre-connect to.
     * </pre>
     *
     * <code>repeated string preconnect = 19;</code>
     * @param values The preconnect to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllPreconnect")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, PreconnectProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      addAll(values)
    }
    /**
     * <pre>
     * Specifies hostnames to pre-connect to.
     * </pre>
     *
     * <code>repeated string preconnect = 19;</code>
     * @param index The index to set the value at.
     * @param value The preconnect to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setPreconnect")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.String, PreconnectProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setPreconnect(index, value)
    }/**
     * <pre>
     * Specifies hostnames to pre-connect to.
     * </pre>
     *
     * <code>repeated string preconnect = 19;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearPreconnect")
    fun com.google.protobuf.kotlin.DslList<kotlin.String, PreconnectProxy>.clear() {
      _builder.clearPreconnect()
    }
    /**
     * <pre>
     * Old-style Cross-Site Scripting vulnerability protection policy.
     * </pre>
     *
     * <code>string xss_protection = 20;</code>
     */
    var xssProtection: kotlin.String
      @JvmName("getXssProtection")
      get() = _builder.getXssProtection()
      @JvmName("setXssProtection")
      set(value) {
        _builder.setXssProtection(value)
      }
    /**
     * <pre>
     * Old-style Cross-Site Scripting vulnerability protection policy.
     * </pre>
     *
     * <code>string xss_protection = 20;</code>
     */
    fun clearXssProtection() {
      _builder.clearXssProtection()
    }

    /**
     * <pre>
     * Specifies the `Referrer-Policy` to apply to this HTTP cycle, as applicable.
     * </pre>
     *
     * <code>.page.Context.ReferrerPolicy referrer_policy = 21;</code>
     */
     var referrerPolicy: tools.elide.page.Context.ReferrerPolicy
      @JvmName("getReferrerPolicy")
      get() = _builder.getReferrerPolicy()
      @JvmName("setReferrerPolicy")
      set(value) {
        _builder.setReferrerPolicy(value)
      }
    /**
     * <pre>
     * Specifies the `Referrer-Policy` to apply to this HTTP cycle, as applicable.
     * </pre>
     *
     * <code>.page.Context.ReferrerPolicy referrer_policy = 21;</code>
     */
    fun clearReferrerPolicy() {
      _builder.clearReferrerPolicy()
    }
  }
  @kotlin.jvm.JvmName("-initializemetadata")
  inline fun metadata(block: tools.elide.page.ContextKt.MetadataKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.Metadata =
    tools.elide.page.ContextKt.MetadataKt.Dsl._create(tools.elide.page.Context.Metadata.newBuilder()).apply { block() }._build()
  object MetadataKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      private val _builder: tools.elide.page.Context.Metadata.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: tools.elide.page.Context.Metadata.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): tools.elide.page.Context.Metadata = _builder.build()

      /**
       * <pre>
       * Defines the HTML title for the page, emitted in the &lt;head&gt;.
       * </pre>
       *
       * <code>string title = 1;</code>
       */
      var title: kotlin.String
        @JvmName("getTitle")
        get() = _builder.getTitle()
        @JvmName("setTitle")
        set(value) {
          _builder.setTitle(value)
        }
      /**
       * <pre>
       * Defines the HTML title for the page, emitted in the &lt;head&gt;.
       * </pre>
       *
       * <code>string title = 1;</code>
       */
      fun clearTitle() {
        _builder.clearTitle()
      }

      /**
       * <pre>
       * Defines the meta description content for the page.
       * </pre>
       *
       * <code>string description = 2;</code>
       */
      var description: kotlin.String
        @JvmName("getDescription")
        get() = _builder.getDescription()
        @JvmName("setDescription")
        set(value) {
          _builder.setDescription(value)
        }
      /**
       * <pre>
       * Defines the meta description content for the page.
       * </pre>
       *
       * <code>string description = 2;</code>
       */
      fun clearDescription() {
        _builder.clearDescription()
      }

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      class KeywordProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * Defines meta tag keywords, to be included in the page.
       * </pre>
       *
       * <code>repeated string keyword = 3;</code>
       * @return A list containing the keyword.
       */
       val keyword: com.google.protobuf.kotlin.DslList<kotlin.String, KeywordProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getKeywordList()
        )
      /**
       * <pre>
       * Defines meta tag keywords, to be included in the page.
       * </pre>
       *
       * <code>repeated string keyword = 3;</code>
       * @param value The keyword to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addKeyword")
      fun com.google.protobuf.kotlin.DslList<kotlin.String, KeywordProxy>.add(value: kotlin.String) {
        _builder.addKeyword(value)
      }
      /**
       * <pre>
       * Defines meta tag keywords, to be included in the page.
       * </pre>
       *
       * <code>repeated string keyword = 3;</code>
       * @param value The keyword to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignKeyword")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, KeywordProxy>.plusAssign(value: kotlin.String) {
        add(value)
      }
      /**
       * <pre>
       * Defines meta tag keywords, to be included in the page.
       * </pre>
       *
       * <code>repeated string keyword = 3;</code>
       * @param values The keyword to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllKeyword")
      fun com.google.protobuf.kotlin.DslList<kotlin.String, KeywordProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
        _builder.addAllKeyword(values)
      }
      /**
       * <pre>
       * Defines meta tag keywords, to be included in the page.
       * </pre>
       *
       * <code>repeated string keyword = 3;</code>
       * @param values The keyword to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllKeyword")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, KeywordProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
        addAll(values)
      }
      /**
       * <pre>
       * Defines meta tag keywords, to be included in the page.
       * </pre>
       *
       * <code>repeated string keyword = 3;</code>
       * @param index The index to set the value at.
       * @param value The keyword to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setKeyword")
      operator fun com.google.protobuf.kotlin.DslList<kotlin.String, KeywordProxy>.set(index: kotlin.Int, value: kotlin.String) {
        _builder.setKeyword(index, value)
      }/**
       * <pre>
       * Defines meta tag keywords, to be included in the page.
       * </pre>
       *
       * <code>repeated string keyword = 3;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearKeyword")
      fun com.google.protobuf.kotlin.DslList<kotlin.String, KeywordProxy>.clear() {
        _builder.clearKeyword()
      }
      /**
       * <pre>
       * Defines semantic content structure and binding content.
       * </pre>
       *
       * <code>.page.SemanticMetadata semantic = 4;</code>
       */
      var semantic: tools.elide.page.SemanticMetadata
        @JvmName("getSemantic")
        get() = _builder.getSemantic()
        @JvmName("setSemantic")
        set(value) {
          _builder.setSemantic(value)
        }
      /**
       * <pre>
       * Defines semantic content structure and binding content.
       * </pre>
       *
       * <code>.page.SemanticMetadata semantic = 4;</code>
       */
      fun clearSemantic() {
        _builder.clearSemantic()
      }
      /**
       * <pre>
       * Defines semantic content structure and binding content.
       * </pre>
       *
       * <code>.page.SemanticMetadata semantic = 4;</code>
       * @return Whether the semantic field is set.
       */
      fun hasSemantic(): kotlin.Boolean {
        return _builder.hasSemantic()
      }

      /**
       * <pre>
       * Defines the viewport settings that should be used by the rendered page.
       * </pre>
       *
       * <code>string viewport = 5;</code>
       */
      var viewport: kotlin.String
        @JvmName("getViewport")
        get() = _builder.getViewport()
        @JvmName("setViewport")
        set(value) {
          _builder.setViewport(value)
        }
      /**
       * <pre>
       * Defines the viewport settings that should be used by the rendered page.
       * </pre>
       *
       * <code>string viewport = 5;</code>
       */
      fun clearViewport() {
        _builder.clearViewport()
      }

      /**
       * <pre>
       * Defines a link to a web application manifest, if applicable.
       * </pre>
       *
       * <code>.webutil.html.types.TrustedResourceUrlProto manifest = 6;</code>
       */
      var manifest: com.google.common.html.types.TrustedResourceUrlProto
        @JvmName("getManifest")
        get() = _builder.getManifest()
        @JvmName("setManifest")
        set(value) {
          _builder.setManifest(value)
        }
      /**
       * <pre>
       * Defines a link to a web application manifest, if applicable.
       * </pre>
       *
       * <code>.webutil.html.types.TrustedResourceUrlProto manifest = 6;</code>
       */
      fun clearManifest() {
        _builder.clearManifest()
      }
      /**
       * <pre>
       * Defines a link to a web application manifest, if applicable.
       * </pre>
       *
       * <code>.webutil.html.types.TrustedResourceUrlProto manifest = 6;</code>
       * @return Whether the manifest field is set.
       */
      fun hasManifest(): kotlin.Boolean {
        return _builder.hasManifest()
      }

      /**
       * <pre>
       * Defines a hex code to use as the primary theme color for the application.
       * </pre>
       *
       * <code>string theme = 7;</code>
       */
      var theme: kotlin.String
        @JvmName("getTheme")
        get() = _builder.getTheme()
        @JvmName("setTheme")
        set(value) {
          _builder.setTheme(value)
        }
      /**
       * <pre>
       * Defines a hex code to use as the primary theme color for the application.
       * </pre>
       *
       * <code>string theme = 7;</code>
       */
      fun clearTheme() {
        _builder.clearTheme()
      }

      /**
       * <pre>
       * Defines an icon to use in iOS circumstances, when used as an app shortcut.
       * </pre>
       *
       * <code>string touch_icon = 8;</code>
       */
      var touchIcon: kotlin.String
        @JvmName("getTouchIcon")
        get() = _builder.getTouchIcon()
        @JvmName("setTouchIcon")
        set(value) {
          _builder.setTouchIcon(value)
        }
      /**
       * <pre>
       * Defines an icon to use in iOS circumstances, when used as an app shortcut.
       * </pre>
       *
       * <code>string touch_icon = 8;</code>
       */
      fun clearTouchIcon() {
        _builder.clearTouchIcon()
      }

      /**
       * <pre>
       * Defines an image to use in iOS circumstances, when launching as an app shortcut.
       * </pre>
       *
       * <code>string startup_image = 9;</code>
       */
      var startupImage: kotlin.String
        @JvmName("getStartupImage")
        get() = _builder.getStartupImage()
        @JvmName("setStartupImage")
        set(value) {
          _builder.setStartupImage(value)
        }
      /**
       * <pre>
       * Defines an image to use in iOS circumstances, when launching as an app shortcut.
       * </pre>
       *
       * <code>string startup_image = 9;</code>
       */
      fun clearStartupImage() {
        _builder.clearStartupImage()
      }

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      class LinkProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * Defines a favicon image link to apply to the browser tab.
       * </pre>
       *
       * <code>repeated .page.Context.PageLink link = 10;</code>
       */
       val link: com.google.protobuf.kotlin.DslList<tools.elide.page.Context.PageLink, LinkProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getLinkList()
        )
      /**
       * <pre>
       * Defines a favicon image link to apply to the browser tab.
       * </pre>
       *
       * <code>repeated .page.Context.PageLink link = 10;</code>
       * @param value The link to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addLink")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.PageLink, LinkProxy>.add(value: tools.elide.page.Context.PageLink) {
        _builder.addLink(value)
      }
      /**
       * <pre>
       * Defines a favicon image link to apply to the browser tab.
       * </pre>
       *
       * <code>repeated .page.Context.PageLink link = 10;</code>
       * @param value The link to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignLink")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.PageLink, LinkProxy>.plusAssign(value: tools.elide.page.Context.PageLink) {
        add(value)
      }
      /**
       * <pre>
       * Defines a favicon image link to apply to the browser tab.
       * </pre>
       *
       * <code>repeated .page.Context.PageLink link = 10;</code>
       * @param values The link to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllLink")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.PageLink, LinkProxy>.addAll(values: kotlin.collections.Iterable<tools.elide.page.Context.PageLink>) {
        _builder.addAllLink(values)
      }
      /**
       * <pre>
       * Defines a favicon image link to apply to the browser tab.
       * </pre>
       *
       * <code>repeated .page.Context.PageLink link = 10;</code>
       * @param values The link to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllLink")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.PageLink, LinkProxy>.plusAssign(values: kotlin.collections.Iterable<tools.elide.page.Context.PageLink>) {
        addAll(values)
      }
      /**
       * <pre>
       * Defines a favicon image link to apply to the browser tab.
       * </pre>
       *
       * <code>repeated .page.Context.PageLink link = 10;</code>
       * @param index The index to set the value at.
       * @param value The link to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setLink")
      operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.PageLink, LinkProxy>.set(index: kotlin.Int, value: tools.elide.page.Context.PageLink) {
        _builder.setLink(index, value)
      }
      /**
       * <pre>
       * Defines a favicon image link to apply to the browser tab.
       * </pre>
       *
       * <code>repeated .page.Context.PageLink link = 10;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearLink")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.PageLink, LinkProxy>.clear() {
        _builder.clearLink()
      }


      /**
       * <pre>
       * Defines the language we are rendering the page for.
       * </pre>
       *
       * <code>.base.LanguageSpec language = 11;</code>
       */
      var language: tools.elide.base.LanguageSpec
        @JvmName("getLanguage")
        get() = _builder.getLanguage()
        @JvmName("setLanguage")
        set(value) {
          _builder.setLanguage(value)
        }
      /**
       * <pre>
       * Defines the language we are rendering the page for.
       * </pre>
       *
       * <code>.base.LanguageSpec language = 11;</code>
       */
      fun clearLanguage() {
        _builder.clearLanguage()
      }
      /**
       * <pre>
       * Defines the language we are rendering the page for.
       * </pre>
       *
       * <code>.base.LanguageSpec language = 11;</code>
       * @return Whether the language field is set.
       */
      fun hasLanguage(): kotlin.Boolean {
        return _builder.hasLanguage()
      }

      /**
       * <pre>
       * Identifier for Google Tag Manager.
       * </pre>
       *
       * <code>string gtm_id = 12;</code>
       */
      var gtmId: kotlin.String
        @JvmName("getGtmId")
        get() = _builder.getGtmId()
        @JvmName("setGtmId")
        set(value) {
          _builder.setGtmId(value)
        }
      /**
       * <pre>
       * Identifier for Google Tag Manager.
       * </pre>
       *
       * <code>string gtm_id = 12;</code>
       */
      fun clearGtmId() {
        _builder.clearGtmId()
      }

      /**
       * <pre>
       * Facebook application identifier.
       * </pre>
       *
       * <code>string fb_app_id = 13;</code>
       */
      var fbAppId: kotlin.String
        @JvmName("getFbAppId")
        get() = _builder.getFbAppId()
        @JvmName("setFbAppId")
        set(value) {
          _builder.setFbAppId(value)
        }
      /**
       * <pre>
       * Facebook application identifier.
       * </pre>
       *
       * <code>string fb_app_id = 13;</code>
       */
      fun clearFbAppId() {
        _builder.clearFbAppId()
      }

      /**
       * <pre>
       * Describes OpenGraph data for a given page.
       * </pre>
       *
       * <code>.page.Context.Metadata.OpenGraph open_graph = 14;</code>
       */
      var openGraph: tools.elide.page.Context.Metadata.OpenGraph
        @JvmName("getOpenGraph")
        get() = _builder.getOpenGraph()
        @JvmName("setOpenGraph")
        set(value) {
          _builder.setOpenGraph(value)
        }
      /**
       * <pre>
       * Describes OpenGraph data for a given page.
       * </pre>
       *
       * <code>.page.Context.Metadata.OpenGraph open_graph = 14;</code>
       */
      fun clearOpenGraph() {
        _builder.clearOpenGraph()
      }
      /**
       * <pre>
       * Describes OpenGraph data for a given page.
       * </pre>
       *
       * <code>.page.Context.Metadata.OpenGraph open_graph = 14;</code>
       * @return Whether the openGraph field is set.
       */
      fun hasOpenGraph(): kotlin.Boolean {
        return _builder.hasOpenGraph()
      }

      /**
       * <pre>
       * Directive for indexers/robots.
       * </pre>
       *
       * <code>string robots = 15;</code>
       */
      var robots: kotlin.String
        @JvmName("getRobots")
        get() = _builder.getRobots()
        @JvmName("setRobots")
        set(value) {
          _builder.setRobots(value)
        }
      /**
       * <pre>
       * Directive for indexers/robots.
       * </pre>
       *
       * <code>string robots = 15;</code>
       */
      fun clearRobots() {
        _builder.clearRobots()
      }

      /**
       * <pre>
       * Directive for color scheme compatibility.
       * </pre>
       *
       * <code>string color_scheme = 16;</code>
       */
      var colorScheme: kotlin.String
        @JvmName("getColorScheme")
        get() = _builder.getColorScheme()
        @JvmName("setColorScheme")
        set(value) {
          _builder.setColorScheme(value)
        }
      /**
       * <pre>
       * Directive for color scheme compatibility.
       * </pre>
       *
       * <code>string color_scheme = 16;</code>
       */
      fun clearColorScheme() {
        _builder.clearColorScheme()
      }

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      class PrefixProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * RDFa prefixes to add. If left unset, the default OpenGraph prefix will be used.
       * </pre>
       *
       * <code>repeated .page.Context.RDFPrefix prefix = 17;</code>
       */
       val prefix: com.google.protobuf.kotlin.DslList<tools.elide.page.Context.RDFPrefix, PrefixProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getPrefixList()
        )
      /**
       * <pre>
       * RDFa prefixes to add. If left unset, the default OpenGraph prefix will be used.
       * </pre>
       *
       * <code>repeated .page.Context.RDFPrefix prefix = 17;</code>
       * @param value The prefix to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addPrefix")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.RDFPrefix, PrefixProxy>.add(value: tools.elide.page.Context.RDFPrefix) {
        _builder.addPrefix(value)
      }
      /**
       * <pre>
       * RDFa prefixes to add. If left unset, the default OpenGraph prefix will be used.
       * </pre>
       *
       * <code>repeated .page.Context.RDFPrefix prefix = 17;</code>
       * @param value The prefix to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignPrefix")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.RDFPrefix, PrefixProxy>.plusAssign(value: tools.elide.page.Context.RDFPrefix) {
        add(value)
      }
      /**
       * <pre>
       * RDFa prefixes to add. If left unset, the default OpenGraph prefix will be used.
       * </pre>
       *
       * <code>repeated .page.Context.RDFPrefix prefix = 17;</code>
       * @param values The prefix to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllPrefix")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.RDFPrefix, PrefixProxy>.addAll(values: kotlin.collections.Iterable<tools.elide.page.Context.RDFPrefix>) {
        _builder.addAllPrefix(values)
      }
      /**
       * <pre>
       * RDFa prefixes to add. If left unset, the default OpenGraph prefix will be used.
       * </pre>
       *
       * <code>repeated .page.Context.RDFPrefix prefix = 17;</code>
       * @param values The prefix to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllPrefix")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.RDFPrefix, PrefixProxy>.plusAssign(values: kotlin.collections.Iterable<tools.elide.page.Context.RDFPrefix>) {
        addAll(values)
      }
      /**
       * <pre>
       * RDFa prefixes to add. If left unset, the default OpenGraph prefix will be used.
       * </pre>
       *
       * <code>repeated .page.Context.RDFPrefix prefix = 17;</code>
       * @param index The index to set the value at.
       * @param value The prefix to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setPrefix")
      operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.RDFPrefix, PrefixProxy>.set(index: kotlin.Int, value: tools.elide.page.Context.RDFPrefix) {
        _builder.setPrefix(index, value)
      }
      /**
       * <pre>
       * RDFa prefixes to add. If left unset, the default OpenGraph prefix will be used.
       * </pre>
       *
       * <code>repeated .page.Context.RDFPrefix prefix = 17;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearPrefix")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.RDFPrefix, PrefixProxy>.clear() {
        _builder.clearPrefix()
      }


      /**
       * <pre>
       * Googlebot-specific directives.
       * </pre>
       *
       * <code>string googlebot = 18;</code>
       */
      var googlebot: kotlin.String
        @JvmName("getGooglebot")
        get() = _builder.getGooglebot()
        @JvmName("setGooglebot")
        set(value) {
          _builder.setGooglebot(value)
        }
      /**
       * <pre>
       * Googlebot-specific directives.
       * </pre>
       *
       * <code>string googlebot = 18;</code>
       */
      fun clearGooglebot() {
        _builder.clearGooglebot()
      }

      /**
       * <pre>
       * Set the rating for this page (see: SafeSearch ratings).
       * </pre>
       *
       * <code>string rating = 19;</code>
       */
      var rating: kotlin.String
        @JvmName("getRating")
        get() = _builder.getRating()
        @JvmName("setRating")
        set(value) {
          _builder.setRating(value)
        }
      /**
       * <pre>
       * Set the rating for this page (see: SafeSearch ratings).
       * </pre>
       *
       * <code>string rating = 19;</code>
       */
      fun clearRating() {
        _builder.clearRating()
      }

      /**
       * <pre>
       * Delegate package for use with Soy rendering, if applicable.
       * </pre>
       *
       * <code>string delegate_package = 20;</code>
       */
      var delegatePackage: kotlin.String
        @JvmName("getDelegatePackage")
        get() = _builder.getDelegatePackage()
        @JvmName("setDelegatePackage")
        set(value) {
          _builder.setDelegatePackage(value)
        }
      /**
       * <pre>
       * Delegate package for use with Soy rendering, if applicable.
       * </pre>
       *
       * <code>string delegate_package = 20;</code>
       */
      fun clearDelegatePackage() {
        _builder.clearDelegatePackage()
      }
    }
    @kotlin.jvm.JvmName("-initializeopenGraph")
    inline fun openGraph(block: tools.elide.page.ContextKt.MetadataKt.OpenGraphKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.Metadata.OpenGraph =
      tools.elide.page.ContextKt.MetadataKt.OpenGraphKt.Dsl._create(tools.elide.page.Context.Metadata.OpenGraph.newBuilder()).apply { block() }._build()
    object OpenGraphKt {
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      @com.google.protobuf.kotlin.ProtoDslMarker
      class Dsl private constructor(
        private val _builder: tools.elide.page.Context.Metadata.OpenGraph.Builder
      ) {
        companion object {
          @kotlin.jvm.JvmSynthetic
          @kotlin.PublishedApi
          internal fun _create(builder: tools.elide.page.Context.Metadata.OpenGraph.Builder): Dsl = Dsl(builder)
        }

        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _build(): tools.elide.page.Context.Metadata.OpenGraph = _builder.build()

        /**
         * <pre>
         * Name of the website.
         * </pre>
         *
         * <code>string site_name = 1;</code>
         */
        var siteName: kotlin.String
          @JvmName("getSiteName")
          get() = _builder.getSiteName()
          @JvmName("setSiteName")
          set(value) {
            _builder.setSiteName(value)
          }
        /**
         * <pre>
         * Name of the website.
         * </pre>
         *
         * <code>string site_name = 1;</code>
         */
        fun clearSiteName() {
          _builder.clearSiteName()
        }

        /**
         * <pre>
         * Title of the page.
         * </pre>
         *
         * <code>string title = 2;</code>
         */
        var title: kotlin.String
          @JvmName("getTitle")
          get() = _builder.getTitle()
          @JvmName("setTitle")
          set(value) {
            _builder.setTitle(value)
          }
        /**
         * <pre>
         * Title of the page.
         * </pre>
         *
         * <code>string title = 2;</code>
         */
        fun clearTitle() {
          _builder.clearTitle()
        }

        /**
         * <pre>
         * Description of the page.
         * </pre>
         *
         * <code>string description = 3;</code>
         */
        var description: kotlin.String
          @JvmName("getDescription")
          get() = _builder.getDescription()
          @JvmName("setDescription")
          set(value) {
            _builder.setDescription(value)
          }
        /**
         * <pre>
         * Description of the page.
         * </pre>
         *
         * <code>string description = 3;</code>
         */
        fun clearDescription() {
          _builder.clearDescription()
        }

        /**
         * <pre>
         * The language the page is written in.
         * </pre>
         *
         * <code>.base.LanguageSpec locale = 4;</code>
         */
        var locale: tools.elide.base.LanguageSpec
          @JvmName("getLocale")
          get() = _builder.getLocale()
          @JvmName("setLocale")
          set(value) {
            _builder.setLocale(value)
          }
        /**
         * <pre>
         * The language the page is written in.
         * </pre>
         *
         * <code>.base.LanguageSpec locale = 4;</code>
         */
        fun clearLocale() {
          _builder.clearLocale()
        }
        /**
         * <pre>
         * The language the page is written in.
         * </pre>
         *
         * <code>.base.LanguageSpec locale = 4;</code>
         * @return Whether the locale field is set.
         */
        fun hasLocale(): kotlin.Boolean {
          return _builder.hasLocale()
        }

        /**
         * <pre>
         * The type of page - i.e. article, website, video.
         * </pre>
         *
         * <code>string type = 5;</code>
         */
        var type: kotlin.String
          @JvmName("getType")
          get() = _builder.getType()
          @JvmName("setType")
          set(value) {
            _builder.setType(value)
          }
        /**
         * <pre>
         * The type of page - i.e. article, website, video.
         * </pre>
         *
         * <code>string type = 5;</code>
         */
        fun clearType() {
          _builder.clearType()
        }

        /**
         * <pre>
         * Directs facebook to scrape another url instead of the url the page was served from.
         * </pre>
         *
         * <code>string url = 6;</code>
         */
        var url: kotlin.String
          @JvmName("getUrl")
          get() = _builder.getUrl()
          @JvmName("setUrl")
          set(value) {
            _builder.setUrl(value)
          }
        /**
         * <pre>
         * Directs facebook to scrape another url instead of the url the page was served from.
         * </pre>
         *
         * <code>string url = 6;</code>
         */
        fun clearUrl() {
          _builder.clearUrl()
        }

        /**
         * <pre>
         * Information for Twitter's crawler.
         * </pre>
         *
         * <code>.page.Context.Metadata.Twitter twitter = 8;</code>
         */
        var twitter: tools.elide.page.Context.Metadata.Twitter
          @JvmName("getTwitter")
          get() = _builder.getTwitter()
          @JvmName("setTwitter")
          set(value) {
            _builder.setTwitter(value)
          }
        /**
         * <pre>
         * Information for Twitter's crawler.
         * </pre>
         *
         * <code>.page.Context.Metadata.Twitter twitter = 8;</code>
         */
        fun clearTwitter() {
          _builder.clearTwitter()
        }
        /**
         * <pre>
         * Information for Twitter's crawler.
         * </pre>
         *
         * <code>.page.Context.Metadata.Twitter twitter = 8;</code>
         * @return Whether the twitter field is set.
         */
        fun hasTwitter(): kotlin.Boolean {
          return _builder.hasTwitter()
        }

        /**
         * <pre>
         * Canonical URL for this page.
         * </pre>
         *
         * <code>string canonical = 12;</code>
         */
        var canonical: kotlin.String
          @JvmName("getCanonical")
          get() = _builder.getCanonical()
          @JvmName("setCanonical")
          set(value) {
            _builder.setCanonical(value)
          }
        /**
         * <pre>
         * Canonical URL for this page.
         * </pre>
         *
         * <code>string canonical = 12;</code>
         */
        fun clearCanonical() {
          _builder.clearCanonical()
        }

        /**
         * <pre>
         * FB application ID for this web application.
         * </pre>
         *
         * <code>string fb_app = 13;</code>
         */
        var fbApp: kotlin.String
          @JvmName("getFbApp")
          get() = _builder.getFbApp()
          @JvmName("setFbApp")
          set(value) {
            _builder.setFbApp(value)
          }
        /**
         * <pre>
         * FB application ID for this web application.
         * </pre>
         *
         * <code>string fb_app = 13;</code>
         */
        fun clearFbApp() {
          _builder.clearFbApp()
        }

        /**
         * An uninstantiable, behaviorless type to represent the field in
         * generics.
         */
        @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
        class ImageProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
        /**
         * <pre>
         * OpenGraph image assets.
         * </pre>
         *
         * <code>repeated .page.Context.Metadata.OpenGraph.OpenGraphImage image = 14;</code>
         */
         val image: com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Metadata.OpenGraph.OpenGraphImage, ImageProxy>
          @kotlin.jvm.JvmSynthetic
          get() = com.google.protobuf.kotlin.DslList(
            _builder.getImageList()
          )
        /**
         * <pre>
         * OpenGraph image assets.
         * </pre>
         *
         * <code>repeated .page.Context.Metadata.OpenGraph.OpenGraphImage image = 14;</code>
         * @param value The image to add.
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("addImage")
        fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Metadata.OpenGraph.OpenGraphImage, ImageProxy>.add(value: tools.elide.page.Context.Metadata.OpenGraph.OpenGraphImage) {
          _builder.addImage(value)
        }
        /**
         * <pre>
         * OpenGraph image assets.
         * </pre>
         *
         * <code>repeated .page.Context.Metadata.OpenGraph.OpenGraphImage image = 14;</code>
         * @param value The image to add.
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("plusAssignImage")
        @Suppress("NOTHING_TO_INLINE")
        inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Metadata.OpenGraph.OpenGraphImage, ImageProxy>.plusAssign(value: tools.elide.page.Context.Metadata.OpenGraph.OpenGraphImage) {
          add(value)
        }
        /**
         * <pre>
         * OpenGraph image assets.
         * </pre>
         *
         * <code>repeated .page.Context.Metadata.OpenGraph.OpenGraphImage image = 14;</code>
         * @param values The image to add.
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("addAllImage")
        fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Metadata.OpenGraph.OpenGraphImage, ImageProxy>.addAll(values: kotlin.collections.Iterable<tools.elide.page.Context.Metadata.OpenGraph.OpenGraphImage>) {
          _builder.addAllImage(values)
        }
        /**
         * <pre>
         * OpenGraph image assets.
         * </pre>
         *
         * <code>repeated .page.Context.Metadata.OpenGraph.OpenGraphImage image = 14;</code>
         * @param values The image to add.
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("plusAssignAllImage")
        @Suppress("NOTHING_TO_INLINE")
        inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Metadata.OpenGraph.OpenGraphImage, ImageProxy>.plusAssign(values: kotlin.collections.Iterable<tools.elide.page.Context.Metadata.OpenGraph.OpenGraphImage>) {
          addAll(values)
        }
        /**
         * <pre>
         * OpenGraph image assets.
         * </pre>
         *
         * <code>repeated .page.Context.Metadata.OpenGraph.OpenGraphImage image = 14;</code>
         * @param index The index to set the value at.
         * @param value The image to set.
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("setImage")
        operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Metadata.OpenGraph.OpenGraphImage, ImageProxy>.set(index: kotlin.Int, value: tools.elide.page.Context.Metadata.OpenGraph.OpenGraphImage) {
          _builder.setImage(index, value)
        }
        /**
         * <pre>
         * OpenGraph image assets.
         * </pre>
         *
         * <code>repeated .page.Context.Metadata.OpenGraph.OpenGraphImage image = 14;</code>
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("clearImage")
        fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Metadata.OpenGraph.OpenGraphImage, ImageProxy>.clear() {
          _builder.clearImage()
        }


        /**
         * An uninstantiable, behaviorless type to represent the field in
         * generics.
         */
        @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
        class VideoProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
        /**
         * <pre>
         * OpenGraph video assets.
         * </pre>
         *
         * <code>repeated .page.Context.Metadata.OpenGraph.OpenGraphVideo video = 15;</code>
         */
         val video: com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Metadata.OpenGraph.OpenGraphVideo, VideoProxy>
          @kotlin.jvm.JvmSynthetic
          get() = com.google.protobuf.kotlin.DslList(
            _builder.getVideoList()
          )
        /**
         * <pre>
         * OpenGraph video assets.
         * </pre>
         *
         * <code>repeated .page.Context.Metadata.OpenGraph.OpenGraphVideo video = 15;</code>
         * @param value The video to add.
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("addVideo")
        fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Metadata.OpenGraph.OpenGraphVideo, VideoProxy>.add(value: tools.elide.page.Context.Metadata.OpenGraph.OpenGraphVideo) {
          _builder.addVideo(value)
        }
        /**
         * <pre>
         * OpenGraph video assets.
         * </pre>
         *
         * <code>repeated .page.Context.Metadata.OpenGraph.OpenGraphVideo video = 15;</code>
         * @param value The video to add.
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("plusAssignVideo")
        @Suppress("NOTHING_TO_INLINE")
        inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Metadata.OpenGraph.OpenGraphVideo, VideoProxy>.plusAssign(value: tools.elide.page.Context.Metadata.OpenGraph.OpenGraphVideo) {
          add(value)
        }
        /**
         * <pre>
         * OpenGraph video assets.
         * </pre>
         *
         * <code>repeated .page.Context.Metadata.OpenGraph.OpenGraphVideo video = 15;</code>
         * @param values The video to add.
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("addAllVideo")
        fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Metadata.OpenGraph.OpenGraphVideo, VideoProxy>.addAll(values: kotlin.collections.Iterable<tools.elide.page.Context.Metadata.OpenGraph.OpenGraphVideo>) {
          _builder.addAllVideo(values)
        }
        /**
         * <pre>
         * OpenGraph video assets.
         * </pre>
         *
         * <code>repeated .page.Context.Metadata.OpenGraph.OpenGraphVideo video = 15;</code>
         * @param values The video to add.
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("plusAssignAllVideo")
        @Suppress("NOTHING_TO_INLINE")
        inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Metadata.OpenGraph.OpenGraphVideo, VideoProxy>.plusAssign(values: kotlin.collections.Iterable<tools.elide.page.Context.Metadata.OpenGraph.OpenGraphVideo>) {
          addAll(values)
        }
        /**
         * <pre>
         * OpenGraph video assets.
         * </pre>
         *
         * <code>repeated .page.Context.Metadata.OpenGraph.OpenGraphVideo video = 15;</code>
         * @param index The index to set the value at.
         * @param value The video to set.
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("setVideo")
        operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Metadata.OpenGraph.OpenGraphVideo, VideoProxy>.set(index: kotlin.Int, value: tools.elide.page.Context.Metadata.OpenGraph.OpenGraphVideo) {
          _builder.setVideo(index, value)
        }
        /**
         * <pre>
         * OpenGraph video assets.
         * </pre>
         *
         * <code>repeated .page.Context.Metadata.OpenGraph.OpenGraphVideo video = 15;</code>
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("clearVideo")
        fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Metadata.OpenGraph.OpenGraphVideo, VideoProxy>.clear() {
          _builder.clearVideo()
        }

      }
      @kotlin.jvm.JvmName("-initializeopenGraphImage")
      inline fun openGraphImage(block: tools.elide.page.ContextKt.MetadataKt.OpenGraphKt.OpenGraphImageKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.Metadata.OpenGraph.OpenGraphImage =
        tools.elide.page.ContextKt.MetadataKt.OpenGraphKt.OpenGraphImageKt.Dsl._create(tools.elide.page.Context.Metadata.OpenGraph.OpenGraphImage.newBuilder()).apply { block() }._build()
      object OpenGraphImageKt {
        @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
        @com.google.protobuf.kotlin.ProtoDslMarker
        class Dsl private constructor(
          private val _builder: tools.elide.page.Context.Metadata.OpenGraph.OpenGraphImage.Builder
        ) {
          companion object {
            @kotlin.jvm.JvmSynthetic
            @kotlin.PublishedApi
            internal fun _create(builder: tools.elide.page.Context.Metadata.OpenGraph.OpenGraphImage.Builder): Dsl = Dsl(builder)
          }

          @kotlin.jvm.JvmSynthetic
          @kotlin.PublishedApi
          internal fun _build(): tools.elide.page.Context.Metadata.OpenGraph.OpenGraphImage = _builder.build()

          /**
           * <pre>
           * Thumbnail to display when page is shared.
           * </pre>
           *
           * <code>string uri = 1;</code>
           */
          var uri: kotlin.String
            @JvmName("getUri")
            get() = _builder.getUri()
            @JvmName("setUri")
            set(value) {
              _builder.setUri(value)
            }
          /**
           * <pre>
           * Thumbnail to display when page is shared.
           * </pre>
           *
           * <code>string uri = 1;</code>
           */
          fun clearUri() {
            _builder.clearUri()
          }

          /**
           * <pre>
           * Width of the sharing image, if known.
           * </pre>
           *
           * <code>uint32 width = 2;</code>
           */
          var width: kotlin.Int
            @JvmName("getWidth")
            get() = _builder.getWidth()
            @JvmName("setWidth")
            set(value) {
              _builder.setWidth(value)
            }
          /**
           * <pre>
           * Width of the sharing image, if known.
           * </pre>
           *
           * <code>uint32 width = 2;</code>
           */
          fun clearWidth() {
            _builder.clearWidth()
          }

          /**
           * <pre>
           * Height of the sharing image, if known.
           * </pre>
           *
           * <code>uint32 height = 3;</code>
           */
          var height: kotlin.Int
            @JvmName("getHeight")
            get() = _builder.getHeight()
            @JvmName("setHeight")
            set(value) {
              _builder.setHeight(value)
            }
          /**
           * <pre>
           * Height of the sharing image, if known.
           * </pre>
           *
           * <code>uint32 height = 3;</code>
           */
          fun clearHeight() {
            _builder.clearHeight()
          }

          /**
           * <pre>
           * Type of image, if known.
           * </pre>
           *
           * <code>string type = 4;</code>
           */
          var type: kotlin.String
            @JvmName("getType")
            get() = _builder.getType()
            @JvmName("setType")
            set(value) {
              _builder.setType(value)
            }
          /**
           * <pre>
           * Type of image, if known.
           * </pre>
           *
           * <code>string type = 4;</code>
           */
          fun clearType() {
            _builder.clearType()
          }
        }
      }
      @kotlin.jvm.JvmName("-initializeopenGraphVideo")
      inline fun openGraphVideo(block: tools.elide.page.ContextKt.MetadataKt.OpenGraphKt.OpenGraphVideoKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.Metadata.OpenGraph.OpenGraphVideo =
        tools.elide.page.ContextKt.MetadataKt.OpenGraphKt.OpenGraphVideoKt.Dsl._create(tools.elide.page.Context.Metadata.OpenGraph.OpenGraphVideo.newBuilder()).apply { block() }._build()
      object OpenGraphVideoKt {
        @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
        @com.google.protobuf.kotlin.ProtoDslMarker
        class Dsl private constructor(
          private val _builder: tools.elide.page.Context.Metadata.OpenGraph.OpenGraphVideo.Builder
        ) {
          companion object {
            @kotlin.jvm.JvmSynthetic
            @kotlin.PublishedApi
            internal fun _create(builder: tools.elide.page.Context.Metadata.OpenGraph.OpenGraphVideo.Builder): Dsl = Dsl(builder)
          }

          @kotlin.jvm.JvmSynthetic
          @kotlin.PublishedApi
          internal fun _build(): tools.elide.page.Context.Metadata.OpenGraph.OpenGraphVideo = _builder.build()

          /**
           * <pre>
           * Reference to the page's main video, as applicable.
           * </pre>
           *
           * <code>string uri = 1;</code>
           */
          var uri: kotlin.String
            @JvmName("getUri")
            get() = _builder.getUri()
            @JvmName("setUri")
            set(value) {
              _builder.setUri(value)
            }
          /**
           * <pre>
           * Reference to the page's main video, as applicable.
           * </pre>
           *
           * <code>string uri = 1;</code>
           */
          fun clearUri() {
            _builder.clearUri()
          }

          /**
           * <pre>
           * Width of the main video on the page.
           * </pre>
           *
           * <code>uint32 width = 2;</code>
           */
          var width: kotlin.Int
            @JvmName("getWidth")
            get() = _builder.getWidth()
            @JvmName("setWidth")
            set(value) {
              _builder.setWidth(value)
            }
          /**
           * <pre>
           * Width of the main video on the page.
           * </pre>
           *
           * <code>uint32 width = 2;</code>
           */
          fun clearWidth() {
            _builder.clearWidth()
          }

          /**
           * <pre>
           * Height of the main video on the page.
           * </pre>
           *
           * <code>uint32 height = 3;</code>
           */
          var height: kotlin.Int
            @JvmName("getHeight")
            get() = _builder.getHeight()
            @JvmName("setHeight")
            set(value) {
              _builder.setHeight(value)
            }
          /**
           * <pre>
           * Height of the main video on the page.
           * </pre>
           *
           * <code>uint32 height = 3;</code>
           */
          fun clearHeight() {
            _builder.clearHeight()
          }

          /**
           * <pre>
           * Type of video, if known.
           * </pre>
           *
           * <code>string type = 4;</code>
           */
          var type: kotlin.String
            @JvmName("getType")
            get() = _builder.getType()
            @JvmName("setType")
            set(value) {
              _builder.setType(value)
            }
          /**
           * <pre>
           * Type of video, if known.
           * </pre>
           *
           * <code>string type = 4;</code>
           */
          fun clearType() {
            _builder.clearType()
          }
        }
      }
    }
    @kotlin.jvm.JvmName("-initializetwitter")
    inline fun twitter(block: tools.elide.page.ContextKt.MetadataKt.TwitterKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.Metadata.Twitter =
      tools.elide.page.ContextKt.MetadataKt.TwitterKt.Dsl._create(tools.elide.page.Context.Metadata.Twitter.newBuilder()).apply { block() }._build()
    object TwitterKt {
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      @com.google.protobuf.kotlin.ProtoDslMarker
      class Dsl private constructor(
        private val _builder: tools.elide.page.Context.Metadata.Twitter.Builder
      ) {
        companion object {
          @kotlin.jvm.JvmSynthetic
          @kotlin.PublishedApi
          internal fun _create(builder: tools.elide.page.Context.Metadata.Twitter.Builder): Dsl = Dsl(builder)
        }

        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _build(): tools.elide.page.Context.Metadata.Twitter = _builder.build()

        /**
         * <pre>
         * Name of the website.
         * </pre>
         *
         * <code>string site_name = 1;</code>
         */
        var siteName: kotlin.String
          @JvmName("getSiteName")
          get() = _builder.getSiteName()
          @JvmName("setSiteName")
          set(value) {
            _builder.setSiteName(value)
          }
        /**
         * <pre>
         * Name of the website.
         * </pre>
         *
         * <code>string site_name = 1;</code>
         */
        fun clearSiteName() {
          _builder.clearSiteName()
        }

        /**
         * <pre>
         * Title of the page.
         * </pre>
         *
         * <code>string title = 2;</code>
         */
        var title: kotlin.String
          @JvmName("getTitle")
          get() = _builder.getTitle()
          @JvmName("setTitle")
          set(value) {
            _builder.setTitle(value)
          }
        /**
         * <pre>
         * Title of the page.
         * </pre>
         *
         * <code>string title = 2;</code>
         */
        fun clearTitle() {
          _builder.clearTitle()
        }

        /**
         * <pre>
         * Description of the page.
         * </pre>
         *
         * <code>string description = 3;</code>
         */
        var description: kotlin.String
          @JvmName("getDescription")
          get() = _builder.getDescription()
          @JvmName("setDescription")
          set(value) {
            _builder.setDescription(value)
          }
        /**
         * <pre>
         * Description of the page.
         * </pre>
         *
         * <code>string description = 3;</code>
         */
        fun clearDescription() {
          _builder.clearDescription()
        }

        /**
         * <pre>
         * The language the page is written in.
         * </pre>
         *
         * <code>.base.LanguageSpec locale = 4;</code>
         */
        var locale: tools.elide.base.LanguageSpec
          @JvmName("getLocale")
          get() = _builder.getLocale()
          @JvmName("setLocale")
          set(value) {
            _builder.setLocale(value)
          }
        /**
         * <pre>
         * The language the page is written in.
         * </pre>
         *
         * <code>.base.LanguageSpec locale = 4;</code>
         */
        fun clearLocale() {
          _builder.clearLocale()
        }
        /**
         * <pre>
         * The language the page is written in.
         * </pre>
         *
         * <code>.base.LanguageSpec locale = 4;</code>
         * @return Whether the locale field is set.
         */
        fun hasLocale(): kotlin.Boolean {
          return _builder.hasLocale()
        }

        /**
         * <pre>
         * The type of card to display on Twitter.
         * </pre>
         *
         * <code>string card = 5;</code>
         */
        var card: kotlin.String
          @JvmName("getCard")
          get() = _builder.getCard()
          @JvmName("setCard")
          set(value) {
            _builder.setCard(value)
          }
        /**
         * <pre>
         * The type of card to display on Twitter.
         * </pre>
         *
         * <code>string card = 5;</code>
         */
        fun clearCard() {
          _builder.clearCard()
        }

        /**
         * <pre>
         * Thumbnail to display when page is shared.
         * </pre>
         *
         * <code>string image = 6;</code>
         */
        var image: kotlin.String
          @JvmName("getImage")
          get() = _builder.getImage()
          @JvmName("setImage")
          set(value) {
            _builder.setImage(value)
          }
        /**
         * <pre>
         * Thumbnail to display when page is shared.
         * </pre>
         *
         * <code>string image = 6;</code>
         */
        fun clearImage() {
          _builder.clearImage()
        }

        /**
         * <pre>
         * Directs Twitter to scrape another url instead of the url the page was served from.
         * </pre>
         *
         * <code>string url = 7;</code>
         */
        var url: kotlin.String
          @JvmName("getUrl")
          get() = _builder.getUrl()
          @JvmName("setUrl")
          set(value) {
            _builder.setUrl(value)
          }
        /**
         * <pre>
         * Directs Twitter to scrape another url instead of the url the page was served from.
         * </pre>
         *
         * <code>string url = 7;</code>
         */
        fun clearUrl() {
          _builder.clearUrl()
        }

        /**
         * <pre>
         * Twitter account considered the "creator" of this content.
         * </pre>
         *
         * <code>string creator = 8;</code>
         */
        var creator: kotlin.String
          @JvmName("getCreator")
          get() = _builder.getCreator()
          @JvmName("setCreator")
          set(value) {
            _builder.setCreator(value)
          }
        /**
         * <pre>
         * Twitter account considered the "creator" of this content.
         * </pre>
         *
         * <code>string creator = 8;</code>
         */
        fun clearCreator() {
          _builder.clearCreator()
        }
      }
    }
  }
  @kotlin.jvm.JvmName("-initializepageLink")
  inline fun pageLink(block: tools.elide.page.ContextKt.PageLinkKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.PageLink =
    tools.elide.page.ContextKt.PageLinkKt.Dsl._create(tools.elide.page.Context.PageLink.newBuilder()).apply { block() }._build()
  object PageLinkKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      private val _builder: tools.elide.page.Context.PageLink.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: tools.elide.page.Context.PageLink.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): tools.elide.page.Context.PageLink = _builder.build()

      /**
       * <pre>
       * Relevance of this link to the rest of the page.
       * </pre>
       *
       * <code>string relevance = 1;</code>
       */
      var relevance: kotlin.String
        @JvmName("getRelevance")
        get() = _builder.getRelevance()
        @JvmName("setRelevance")
        set(value) {
          _builder.setRelevance(value)
        }
      /**
       * <pre>
       * Relevance of this link to the rest of the page.
       * </pre>
       *
       * <code>string relevance = 1;</code>
       */
      fun clearRelevance() {
        _builder.clearRelevance()
      }

      /**
       * <pre>
       * Specifies the mime-type of this link, if applicable.
       * </pre>
       *
       * <code>string type = 2;</code>
       */
      var type: kotlin.String
        @JvmName("getType")
        get() = _builder.getType()
        @JvmName("setType")
        set(value) {
          _builder.setType(value)
        }
      /**
       * <pre>
       * Specifies the mime-type of this link, if applicable.
       * </pre>
       *
       * <code>string type = 2;</code>
       */
      fun clearType() {
        _builder.clearType()
      }

      /**
       * <pre>
       * Specifies the URL target for this link.
       * </pre>
       *
       * <code>.webutil.html.types.TrustedResourceUrlProto href = 3;</code>
       */
      var href: com.google.common.html.types.TrustedResourceUrlProto
        @JvmName("getHref")
        get() = _builder.getHref()
        @JvmName("setHref")
        set(value) {
          _builder.setHref(value)
        }
      /**
       * <pre>
       * Specifies the URL target for this link.
       * </pre>
       *
       * <code>.webutil.html.types.TrustedResourceUrlProto href = 3;</code>
       */
      fun clearHref() {
        _builder.clearHref()
      }
      /**
       * <pre>
       * Specifies the URL target for this link.
       * </pre>
       *
       * <code>.webutil.html.types.TrustedResourceUrlProto href = 3;</code>
       * @return Whether the href field is set.
       */
      fun hasHref(): kotlin.Boolean {
        return _builder.hasHref()
      }
    }
  }
  @kotlin.jvm.JvmName("-initializeappManifest")
  inline fun appManifest(block: tools.elide.page.ContextKt.AppManifestKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.AppManifest =
    tools.elide.page.ContextKt.AppManifestKt.Dsl._create(tools.elide.page.Context.AppManifest.newBuilder()).apply { block() }._build()
  object AppManifestKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      private val _builder: tools.elide.page.Context.AppManifest.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: tools.elide.page.Context.AppManifest.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): tools.elide.page.Context.AppManifest = _builder.build()

      /**
       * <pre>
       * Full name for this application.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      var name: kotlin.String
        @JvmName("getName")
        get() = _builder.getName()
        @JvmName("setName")
        set(value) {
          _builder.setName(value)
        }
      /**
       * <pre>
       * Full name for this application.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      fun clearName() {
        _builder.clearName()
      }

      /**
       * <pre>
       * Short name for this application.
       * </pre>
       *
       * <code>string short_name = 2;</code>
       */
      var shortName: kotlin.String
        @JvmName("getShortName")
        get() = _builder.getShortName()
        @JvmName("setShortName")
        set(value) {
          _builder.setShortName(value)
        }
      /**
       * <pre>
       * Short name for this application.
       * </pre>
       *
       * <code>string short_name = 2;</code>
       */
      fun clearShortName() {
        _builder.clearShortName()
      }

      /**
       * <pre>
       * Starting URL where this application can be entered.
       * </pre>
       *
       * <code>string start_url = 3;</code>
       */
      var startUrl: kotlin.String
        @JvmName("getStartUrl")
        get() = _builder.getStartUrl()
        @JvmName("setStartUrl")
        set(value) {
          _builder.setStartUrl(value)
        }
      /**
       * <pre>
       * Starting URL where this application can be entered.
       * </pre>
       *
       * <code>string start_url = 3;</code>
       */
      fun clearStartUrl() {
        _builder.clearStartUrl()
      }

      /**
       * <pre>
       * Defines the developers' preferred display mode for this application.
       * </pre>
       *
       * <code>.page.Context.AppManifest.DisplayMode display = 4;</code>
       */
       var display: tools.elide.page.Context.AppManifest.DisplayMode
        @JvmName("getDisplay")
        get() = _builder.getDisplay()
        @JvmName("setDisplay")
        set(value) {
          _builder.setDisplay(value)
        }
      /**
       * <pre>
       * Defines the developers' preferred display mode for this application.
       * </pre>
       *
       * <code>.page.Context.AppManifest.DisplayMode display = 4;</code>
       */
      fun clearDisplay() {
        _builder.clearDisplay()
      }

      /**
       * <pre>
       * Defines the expected application background color.
       * </pre>
       *
       * <code>string background_color = 5;</code>
       */
      var backgroundColor: kotlin.String
        @JvmName("getBackgroundColor")
        get() = _builder.getBackgroundColor()
        @JvmName("setBackgroundColor")
        set(value) {
          _builder.setBackgroundColor(value)
        }
      /**
       * <pre>
       * Defines the expected application background color.
       * </pre>
       *
       * <code>string background_color = 5;</code>
       */
      fun clearBackgroundColor() {
        _builder.clearBackgroundColor()
      }

      /**
       * <pre>
       * Specifies a narrative description about this application.
       * </pre>
       *
       * <code>string description = 6;</code>
       */
      var description: kotlin.String
        @JvmName("getDescription")
        get() = _builder.getDescription()
        @JvmName("setDescription")
        set(value) {
          _builder.setDescription(value)
        }
      /**
       * <pre>
       * Specifies a narrative description about this application.
       * </pre>
       *
       * <code>string description = 6;</code>
       */
      fun clearDescription() {
        _builder.clearDescription()
      }

      /**
       * <pre>
       * Specifies the language direction - RTL or LTR, for this application.
       * </pre>
       *
       * <code>string direction = 7;</code>
       */
      var direction: kotlin.String
        @JvmName("getDirection")
        get() = _builder.getDirection()
        @JvmName("setDirection")
        set(value) {
          _builder.setDirection(value)
        }
      /**
       * <pre>
       * Specifies the language direction - RTL or LTR, for this application.
       * </pre>
       *
       * <code>string direction = 7;</code>
       */
      fun clearDirection() {
        _builder.clearDirection()
      }

      /**
       * <pre>
       * Specifies the language this application is being served in.
       * </pre>
       *
       * <code>.base.LanguageSpec language = 8;</code>
       */
      var language: tools.elide.base.LanguageSpec
        @JvmName("getLanguage")
        get() = _builder.getLanguage()
        @JvmName("setLanguage")
        set(value) {
          _builder.setLanguage(value)
        }
      /**
       * <pre>
       * Specifies the language this application is being served in.
       * </pre>
       *
       * <code>.base.LanguageSpec language = 8;</code>
       */
      fun clearLanguage() {
        _builder.clearLanguage()
      }
      /**
       * <pre>
       * Specifies the language this application is being served in.
       * </pre>
       *
       * <code>.base.LanguageSpec language = 8;</code>
       * @return Whether the language field is set.
       */
      fun hasLanguage(): kotlin.Boolean {
        return _builder.hasLanguage()
      }

      /**
       * <pre>
       * Specifies expected screen orientation for this application.
       * </pre>
       *
       * <code>.page.Context.AppManifest.OrientationMode orientation = 9;</code>
       */
       var orientation: tools.elide.page.Context.AppManifest.OrientationMode
        @JvmName("getOrientation")
        get() = _builder.getOrientation()
        @JvmName("setOrientation")
        set(value) {
          _builder.setOrientation(value)
        }
      /**
       * <pre>
       * Specifies expected screen orientation for this application.
       * </pre>
       *
       * <code>.page.Context.AppManifest.OrientationMode orientation = 9;</code>
       */
      fun clearOrientation() {
        _builder.clearOrientation()
      }

      /**
       * <pre>
       * Defines the navigation scope for this web application's context.
       * </pre>
       *
       * <code>string scope = 11;</code>
       */
      var scope: kotlin.String
        @JvmName("getScope")
        get() = _builder.getScope()
        @JvmName("setScope")
        set(value) {
          _builder.setScope(value)
        }
      /**
       * <pre>
       * Defines the navigation scope for this web application's context.
       * </pre>
       *
       * <code>string scope = 11;</code>
       */
      fun clearScope() {
        _builder.clearScope()
      }

      /**
       * <pre>
       * Flag indicating whether we want to prefer native apps for the user's experience.
       * </pre>
       *
       * <code>bool prefer_related_applications = 12;</code>
       */
      var preferRelatedApplications: kotlin.Boolean
        @JvmName("getPreferRelatedApplications")
        get() = _builder.getPreferRelatedApplications()
        @JvmName("setPreferRelatedApplications")
        set(value) {
          _builder.setPreferRelatedApplications(value)
        }
      /**
       * <pre>
       * Flag indicating whether we want to prefer native apps for the user's experience.
       * </pre>
       *
       * <code>bool prefer_related_applications = 12;</code>
       */
      fun clearPreferRelatedApplications() {
        _builder.clearPreferRelatedApplications()
      }

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      class RelatedApplicationProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * Related native applications that should be considered along with this web application.
       * </pre>
       *
       * <code>repeated .page.Context.AppManifest.RelatedApplication related_application = 13;</code>
       */
       val relatedApplication: com.google.protobuf.kotlin.DslList<tools.elide.page.Context.AppManifest.RelatedApplication, RelatedApplicationProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getRelatedApplicationList()
        )
      /**
       * <pre>
       * Related native applications that should be considered along with this web application.
       * </pre>
       *
       * <code>repeated .page.Context.AppManifest.RelatedApplication related_application = 13;</code>
       * @param value The relatedApplication to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addRelatedApplication")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.AppManifest.RelatedApplication, RelatedApplicationProxy>.add(value: tools.elide.page.Context.AppManifest.RelatedApplication) {
        _builder.addRelatedApplication(value)
      }
      /**
       * <pre>
       * Related native applications that should be considered along with this web application.
       * </pre>
       *
       * <code>repeated .page.Context.AppManifest.RelatedApplication related_application = 13;</code>
       * @param value The relatedApplication to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignRelatedApplication")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.AppManifest.RelatedApplication, RelatedApplicationProxy>.plusAssign(value: tools.elide.page.Context.AppManifest.RelatedApplication) {
        add(value)
      }
      /**
       * <pre>
       * Related native applications that should be considered along with this web application.
       * </pre>
       *
       * <code>repeated .page.Context.AppManifest.RelatedApplication related_application = 13;</code>
       * @param values The relatedApplication to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllRelatedApplication")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.AppManifest.RelatedApplication, RelatedApplicationProxy>.addAll(values: kotlin.collections.Iterable<tools.elide.page.Context.AppManifest.RelatedApplication>) {
        _builder.addAllRelatedApplication(values)
      }
      /**
       * <pre>
       * Related native applications that should be considered along with this web application.
       * </pre>
       *
       * <code>repeated .page.Context.AppManifest.RelatedApplication related_application = 13;</code>
       * @param values The relatedApplication to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllRelatedApplication")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.AppManifest.RelatedApplication, RelatedApplicationProxy>.plusAssign(values: kotlin.collections.Iterable<tools.elide.page.Context.AppManifest.RelatedApplication>) {
        addAll(values)
      }
      /**
       * <pre>
       * Related native applications that should be considered along with this web application.
       * </pre>
       *
       * <code>repeated .page.Context.AppManifest.RelatedApplication related_application = 13;</code>
       * @param index The index to set the value at.
       * @param value The relatedApplication to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setRelatedApplication")
      operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.AppManifest.RelatedApplication, RelatedApplicationProxy>.set(index: kotlin.Int, value: tools.elide.page.Context.AppManifest.RelatedApplication) {
        _builder.setRelatedApplication(index, value)
      }
      /**
       * <pre>
       * Related native applications that should be considered along with this web application.
       * </pre>
       *
       * <code>repeated .page.Context.AppManifest.RelatedApplication related_application = 13;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearRelatedApplication")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.AppManifest.RelatedApplication, RelatedApplicationProxy>.clear() {
        _builder.clearRelatedApplication()
      }


      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      class AppIconProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * Application icons listed with this manifest.
       * </pre>
       *
       * <code>repeated .page.Context.AppManifest.Icon app_icon = 14;</code>
       */
       val appIcon: com.google.protobuf.kotlin.DslList<tools.elide.page.Context.AppManifest.Icon, AppIconProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getAppIconList()
        )
      /**
       * <pre>
       * Application icons listed with this manifest.
       * </pre>
       *
       * <code>repeated .page.Context.AppManifest.Icon app_icon = 14;</code>
       * @param value The appIcon to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAppIcon")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.AppManifest.Icon, AppIconProxy>.add(value: tools.elide.page.Context.AppManifest.Icon) {
        _builder.addAppIcon(value)
      }
      /**
       * <pre>
       * Application icons listed with this manifest.
       * </pre>
       *
       * <code>repeated .page.Context.AppManifest.Icon app_icon = 14;</code>
       * @param value The appIcon to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAppIcon")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.AppManifest.Icon, AppIconProxy>.plusAssign(value: tools.elide.page.Context.AppManifest.Icon) {
        add(value)
      }
      /**
       * <pre>
       * Application icons listed with this manifest.
       * </pre>
       *
       * <code>repeated .page.Context.AppManifest.Icon app_icon = 14;</code>
       * @param values The appIcon to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllAppIcon")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.AppManifest.Icon, AppIconProxy>.addAll(values: kotlin.collections.Iterable<tools.elide.page.Context.AppManifest.Icon>) {
        _builder.addAllAppIcon(values)
      }
      /**
       * <pre>
       * Application icons listed with this manifest.
       * </pre>
       *
       * <code>repeated .page.Context.AppManifest.Icon app_icon = 14;</code>
       * @param values The appIcon to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllAppIcon")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.AppManifest.Icon, AppIconProxy>.plusAssign(values: kotlin.collections.Iterable<tools.elide.page.Context.AppManifest.Icon>) {
        addAll(values)
      }
      /**
       * <pre>
       * Application icons listed with this manifest.
       * </pre>
       *
       * <code>repeated .page.Context.AppManifest.Icon app_icon = 14;</code>
       * @param index The index to set the value at.
       * @param value The appIcon to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setAppIcon")
      operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.AppManifest.Icon, AppIconProxy>.set(index: kotlin.Int, value: tools.elide.page.Context.AppManifest.Icon) {
        _builder.setAppIcon(index, value)
      }
      /**
       * <pre>
       * Application icons listed with this manifest.
       * </pre>
       *
       * <code>repeated .page.Context.AppManifest.Icon app_icon = 14;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearAppIcon")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.AppManifest.Icon, AppIconProxy>.clear() {
        _builder.clearAppIcon()
      }

    }
    @kotlin.jvm.JvmName("-initializeicon")
    inline fun icon(block: tools.elide.page.ContextKt.AppManifestKt.IconKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.AppManifest.Icon =
      tools.elide.page.ContextKt.AppManifestKt.IconKt.Dsl._create(tools.elide.page.Context.AppManifest.Icon.newBuilder()).apply { block() }._build()
    object IconKt {
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      @com.google.protobuf.kotlin.ProtoDslMarker
      class Dsl private constructor(
        private val _builder: tools.elide.page.Context.AppManifest.Icon.Builder
      ) {
        companion object {
          @kotlin.jvm.JvmSynthetic
          @kotlin.PublishedApi
          internal fun _create(builder: tools.elide.page.Context.AppManifest.Icon.Builder): Dsl = Dsl(builder)
        }

        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _build(): tools.elide.page.Context.AppManifest.Icon = _builder.build()

        /**
         * <pre>
         * Specifies the URI for a given icon.
         * </pre>
         *
         * <code>.webutil.html.types.TrustedResourceUrlProto src = 1;</code>
         */
        var src: com.google.common.html.types.TrustedResourceUrlProto
          @JvmName("getSrc")
          get() = _builder.getSrc()
          @JvmName("setSrc")
          set(value) {
            _builder.setSrc(value)
          }
        /**
         * <pre>
         * Specifies the URI for a given icon.
         * </pre>
         *
         * <code>.webutil.html.types.TrustedResourceUrlProto src = 1;</code>
         */
        fun clearSrc() {
          _builder.clearSrc()
        }
        /**
         * <pre>
         * Specifies the URI for a given icon.
         * </pre>
         *
         * <code>.webutil.html.types.TrustedResourceUrlProto src = 1;</code>
         * @return Whether the src field is set.
         */
        fun hasSrc(): kotlin.Boolean {
          return _builder.hasSrc()
        }

        /**
         * An uninstantiable, behaviorless type to represent the field in
         * generics.
         */
        @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
        class SizeProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
        /**
         * <pre>
         * Specifies the sizes that a given icon is available in.
         * </pre>
         *
         * <code>repeated uint32 size = 2;</code>
         */
         val size: com.google.protobuf.kotlin.DslList<kotlin.Int, SizeProxy>
          @kotlin.jvm.JvmSynthetic
          get() = com.google.protobuf.kotlin.DslList(
            _builder.getSizeList()
          )
        /**
         * <pre>
         * Specifies the sizes that a given icon is available in.
         * </pre>
         *
         * <code>repeated uint32 size = 2;</code>
         * @param value The size to add.
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("addSize")
        fun com.google.protobuf.kotlin.DslList<kotlin.Int, SizeProxy>.add(value: kotlin.Int) {
          _builder.addSize(value)
        }/**
         * <pre>
         * Specifies the sizes that a given icon is available in.
         * </pre>
         *
         * <code>repeated uint32 size = 2;</code>
         * @param value The size to add.
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("plusAssignSize")
        @Suppress("NOTHING_TO_INLINE")
        inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, SizeProxy>.plusAssign(value: kotlin.Int) {
          add(value)
        }/**
         * <pre>
         * Specifies the sizes that a given icon is available in.
         * </pre>
         *
         * <code>repeated uint32 size = 2;</code>
         * @param values The size to add.
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("addAllSize")
        fun com.google.protobuf.kotlin.DslList<kotlin.Int, SizeProxy>.addAll(values: kotlin.collections.Iterable<kotlin.Int>) {
          _builder.addAllSize(values)
        }/**
         * <pre>
         * Specifies the sizes that a given icon is available in.
         * </pre>
         *
         * <code>repeated uint32 size = 2;</code>
         * @param values The size to add.
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("plusAssignAllSize")
        @Suppress("NOTHING_TO_INLINE")
        inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, SizeProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.Int>) {
          addAll(values)
        }/**
         * <pre>
         * Specifies the sizes that a given icon is available in.
         * </pre>
         *
         * <code>repeated uint32 size = 2;</code>
         * @param index The index to set the value at.
         * @param value The size to set.
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("setSize")
        operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, SizeProxy>.set(index: kotlin.Int, value: kotlin.Int) {
          _builder.setSize(index, value)
        }/**
         * <pre>
         * Specifies the sizes that a given icon is available in.
         * </pre>
         *
         * <code>repeated uint32 size = 2;</code>
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("clearSize")
        fun com.google.protobuf.kotlin.DslList<kotlin.Int, SizeProxy>.clear() {
          _builder.clearSize()
        }
        /**
         * <pre>
         * Specifies the content type of a given icon.
         * </pre>
         *
         * <code>string mime_type = 3;</code>
         */
        var mimeType: kotlin.String
          @JvmName("getMimeType")
          get() = _builder.getMimeType()
          @JvmName("setMimeType")
          set(value) {
            _builder.setMimeType(value)
          }
        /**
         * <pre>
         * Specifies the content type of a given icon.
         * </pre>
         *
         * <code>string mime_type = 3;</code>
         */
        fun clearMimeType() {
          _builder.clearMimeType()
        }
      }
    }
    @kotlin.jvm.JvmName("-initializerelatedApplication")
    inline fun relatedApplication(block: tools.elide.page.ContextKt.AppManifestKt.RelatedApplicationKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.AppManifest.RelatedApplication =
      tools.elide.page.ContextKt.AppManifestKt.RelatedApplicationKt.Dsl._create(tools.elide.page.Context.AppManifest.RelatedApplication.newBuilder()).apply { block() }._build()
    object RelatedApplicationKt {
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      @com.google.protobuf.kotlin.ProtoDslMarker
      class Dsl private constructor(
        private val _builder: tools.elide.page.Context.AppManifest.RelatedApplication.Builder
      ) {
        companion object {
          @kotlin.jvm.JvmSynthetic
          @kotlin.PublishedApi
          internal fun _create(builder: tools.elide.page.Context.AppManifest.RelatedApplication.Builder): Dsl = Dsl(builder)
        }

        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _build(): tools.elide.page.Context.AppManifest.RelatedApplication = _builder.build()

        /**
         * <pre>
         * ID for this alternative application option.
         * </pre>
         *
         * <code>string id = 1;</code>
         */
        var id: kotlin.String
          @JvmName("getId")
          get() = _builder.getId()
          @JvmName("setId")
          set(value) {
            _builder.setId(value)
          }
        /**
         * <pre>
         * ID for this alternative application option.
         * </pre>
         *
         * <code>string id = 1;</code>
         */
        fun clearId() {
          _builder.clearId()
        }

        /**
         * <pre>
         * Platform that the related app is listed on.
         * </pre>
         *
         * <code>.page.Context.AppManifest.RelatedApplication.AppPlatform platform = 2;</code>
         */
         var platform: tools.elide.page.Context.AppManifest.RelatedApplication.AppPlatform
          @JvmName("getPlatform")
          get() = _builder.getPlatform()
          @JvmName("setPlatform")
          set(value) {
            _builder.setPlatform(value)
          }
        /**
         * <pre>
         * Platform that the related app is listed on.
         * </pre>
         *
         * <code>.page.Context.AppManifest.RelatedApplication.AppPlatform platform = 2;</code>
         */
        fun clearPlatform() {
          _builder.clearPlatform()
        }

        /**
         * <pre>
         * URI where the alternative application can be downloaded.
         * </pre>
         *
         * <code>.webutil.html.types.TrustedResourceUrlProto uri = 3;</code>
         */
        var uri: com.google.common.html.types.TrustedResourceUrlProto
          @JvmName("getUri")
          get() = _builder.getUri()
          @JvmName("setUri")
          set(value) {
            _builder.setUri(value)
          }
        /**
         * <pre>
         * URI where the alternative application can be downloaded.
         * </pre>
         *
         * <code>.webutil.html.types.TrustedResourceUrlProto uri = 3;</code>
         */
        fun clearUri() {
          _builder.clearUri()
        }
        /**
         * <pre>
         * URI where the alternative application can be downloaded.
         * </pre>
         *
         * <code>.webutil.html.types.TrustedResourceUrlProto uri = 3;</code>
         * @return Whether the uri field is set.
         */
        fun hasUri(): kotlin.Boolean {
          return _builder.hasUri()
        }
      }
    }
  }
  @kotlin.jvm.JvmName("-initializestyles")
  inline fun styles(block: tools.elide.page.ContextKt.StylesKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.Styles =
    tools.elide.page.ContextKt.StylesKt.Dsl._create(tools.elide.page.Context.Styles.newBuilder()).apply { block() }._build()
  object StylesKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      private val _builder: tools.elide.page.Context.Styles.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: tools.elide.page.Context.Styles.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): tools.elide.page.Context.Styles = _builder.build()

      /**
       * <pre>
       * CSS code that should be emitted early in the &lt;head&gt;.
       * </pre>
       *
       * <code>.webutil.html.types.SafeStyleProto lifted = 1;</code>
       */
      var lifted: com.google.common.html.types.SafeStyleProto
        @JvmName("getLifted")
        get() = _builder.getLifted()
        @JvmName("setLifted")
        set(value) {
          _builder.setLifted(value)
        }
      /**
       * <pre>
       * CSS code that should be emitted early in the &lt;head&gt;.
       * </pre>
       *
       * <code>.webutil.html.types.SafeStyleProto lifted = 1;</code>
       */
      fun clearLifted() {
        _builder.clearLifted()
      }
      /**
       * <pre>
       * CSS code that should be emitted early in the &lt;head&gt;.
       * </pre>
       *
       * <code>.webutil.html.types.SafeStyleProto lifted = 1;</code>
       * @return Whether the lifted field is set.
       */
      fun hasLifted(): kotlin.Boolean {
        return _builder.hasLifted()
      }

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      class LinkProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * External CSS code to be included in &lt;link&gt; tags.
       * </pre>
       *
       * <code>repeated .page.Context.Styles.Stylesheet link = 2;</code>
       */
       val link: com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Styles.Stylesheet, LinkProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getLinkList()
        )
      /**
       * <pre>
       * External CSS code to be included in &lt;link&gt; tags.
       * </pre>
       *
       * <code>repeated .page.Context.Styles.Stylesheet link = 2;</code>
       * @param value The link to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addLink")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Styles.Stylesheet, LinkProxy>.add(value: tools.elide.page.Context.Styles.Stylesheet) {
        _builder.addLink(value)
      }
      /**
       * <pre>
       * External CSS code to be included in &lt;link&gt; tags.
       * </pre>
       *
       * <code>repeated .page.Context.Styles.Stylesheet link = 2;</code>
       * @param value The link to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignLink")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Styles.Stylesheet, LinkProxy>.plusAssign(value: tools.elide.page.Context.Styles.Stylesheet) {
        add(value)
      }
      /**
       * <pre>
       * External CSS code to be included in &lt;link&gt; tags.
       * </pre>
       *
       * <code>repeated .page.Context.Styles.Stylesheet link = 2;</code>
       * @param values The link to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllLink")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Styles.Stylesheet, LinkProxy>.addAll(values: kotlin.collections.Iterable<tools.elide.page.Context.Styles.Stylesheet>) {
        _builder.addAllLink(values)
      }
      /**
       * <pre>
       * External CSS code to be included in &lt;link&gt; tags.
       * </pre>
       *
       * <code>repeated .page.Context.Styles.Stylesheet link = 2;</code>
       * @param values The link to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllLink")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Styles.Stylesheet, LinkProxy>.plusAssign(values: kotlin.collections.Iterable<tools.elide.page.Context.Styles.Stylesheet>) {
        addAll(values)
      }
      /**
       * <pre>
       * External CSS code to be included in &lt;link&gt; tags.
       * </pre>
       *
       * <code>repeated .page.Context.Styles.Stylesheet link = 2;</code>
       * @param index The index to set the value at.
       * @param value The link to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setLink")
      operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Styles.Stylesheet, LinkProxy>.set(index: kotlin.Int, value: tools.elide.page.Context.Styles.Stylesheet) {
        _builder.setLink(index, value)
      }
      /**
       * <pre>
       * External CSS code to be included in &lt;link&gt; tags.
       * </pre>
       *
       * <code>repeated .page.Context.Styles.Stylesheet link = 2;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearLink")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Styles.Stylesheet, LinkProxy>.clear() {
        _builder.clearLink()
      }

    }
    @kotlin.jvm.JvmName("-initializestylesheet")
    inline fun stylesheet(block: tools.elide.page.ContextKt.StylesKt.StylesheetKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.Styles.Stylesheet =
      tools.elide.page.ContextKt.StylesKt.StylesheetKt.Dsl._create(tools.elide.page.Context.Styles.Stylesheet.newBuilder()).apply { block() }._build()
    object StylesheetKt {
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      @com.google.protobuf.kotlin.ProtoDslMarker
      class Dsl private constructor(
        private val _builder: tools.elide.page.Context.Styles.Stylesheet.Builder
      ) {
        companion object {
          @kotlin.jvm.JvmSynthetic
          @kotlin.PublishedApi
          internal fun _create(builder: tools.elide.page.Context.Styles.Stylesheet.Builder): Dsl = Dsl(builder)
        }

        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _build(): tools.elide.page.Context.Styles.Stylesheet = _builder.build()

        /**
         * <pre>
         * URI to a given stylesheet asset.
         * </pre>
         *
         * <code>.webutil.html.types.TrustedResourceUrlProto uri = 1;</code>
         */
        var uri: com.google.common.html.types.TrustedResourceUrlProto
          @JvmName("getUri")
          get() = _builder.getUri()
          @JvmName("setUri")
          set(value) {
            _builder.setUri(value)
          }
        /**
         * <pre>
         * URI to a given stylesheet asset.
         * </pre>
         *
         * <code>.webutil.html.types.TrustedResourceUrlProto uri = 1;</code>
         */
        fun clearUri() {
          _builder.clearUri()
        }
        /**
         * <pre>
         * URI to a given stylesheet asset.
         * </pre>
         *
         * <code>.webutil.html.types.TrustedResourceUrlProto uri = 1;</code>
         * @return Whether the uri field is set.
         */
        fun hasUri(): kotlin.Boolean {
          return _builder.hasUri()
        }

        /**
         * <pre>
         * ID at which to attach the script tag in the DOM.
         * </pre>
         *
         * <code>string id = 2;</code>
         */
        var id: kotlin.String
          @JvmName("getId")
          get() = _builder.getId()
          @JvmName("setId")
          set(value) {
            _builder.setId(value)
          }
        /**
         * <pre>
         * ID at which to attach the script tag in the DOM.
         * </pre>
         *
         * <code>string id = 2;</code>
         */
        fun clearId() {
          _builder.clearId()
        }

        /**
         * <pre>
         * Media setting to apply to the style sheet.
         * </pre>
         *
         * <code>string media = 3;</code>
         */
        var media: kotlin.String
          @JvmName("getMedia")
          get() = _builder.getMedia()
          @JvmName("setMedia")
          set(value) {
            _builder.setMedia(value)
          }
        /**
         * <pre>
         * Media setting to apply to the style sheet.
         * </pre>
         *
         * <code>string media = 3;</code>
         */
        fun clearMedia() {
          _builder.clearMedia()
        }

        /**
         * <pre>
         * Whether to pre-fetch this asset, as applicable.
         * </pre>
         *
         * <code>bool prefetch = 7;</code>
         */
        var prefetch: kotlin.Boolean
          @JvmName("getPrefetch")
          get() = _builder.getPrefetch()
          @JvmName("setPrefetch")
          set(value) {
            _builder.setPrefetch(value)
          }
        /**
         * <pre>
         * Whether to pre-fetch this asset, as applicable.
         * </pre>
         *
         * <code>bool prefetch = 7;</code>
         */
        fun clearPrefetch() {
          _builder.clearPrefetch()
        }

        /**
         * <pre>
         * Whether to pre-load this asset, as applicable.
         * </pre>
         *
         * <code>bool preload = 8;</code>
         */
        var preload: kotlin.Boolean
          @JvmName("getPreload")
          get() = _builder.getPreload()
          @JvmName("setPreload")
          set(value) {
            _builder.setPreload(value)
          }
        /**
         * <pre>
         * Whether to pre-load this asset, as applicable.
         * </pre>
         *
         * <code>bool preload = 8;</code>
         */
        fun clearPreload() {
          _builder.clearPreload()
        }

        /**
         * <pre>
         * Whether to proactively push this asset, as applicable.
         * </pre>
         *
         * <code>bool push = 9;</code>
         */
        var push: kotlin.Boolean
          @JvmName("getPush")
          get() = _builder.getPush()
          @JvmName("setPush")
          set(value) {
            _builder.setPush(value)
          }
        /**
         * <pre>
         * Whether to proactively push this asset, as applicable.
         * </pre>
         *
         * <code>bool push = 9;</code>
         */
        fun clearPush() {
          _builder.clearPush()
        }
      }
    }
  }
  @kotlin.jvm.JvmName("-initializefonts")
  inline fun fonts(block: tools.elide.page.ContextKt.FontsKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.Fonts =
    tools.elide.page.ContextKt.FontsKt.Dsl._create(tools.elide.page.Context.Fonts.newBuilder()).apply { block() }._build()
  object FontsKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      private val _builder: tools.elide.page.Context.Fonts.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: tools.elide.page.Context.Fonts.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): tools.elide.page.Context.Fonts = _builder.build()

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      class Package_Proxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * Specifies packages of fonts included for reference.
       * </pre>
       *
       * <code>repeated .page.Context.Fonts.FontPackage package = 1;</code>
       */
       val package_: com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Fonts.FontPackage, Package_Proxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getPackageList()
        )
      /**
       * <pre>
       * Specifies packages of fonts included for reference.
       * </pre>
       *
       * <code>repeated .page.Context.Fonts.FontPackage package = 1;</code>
       * @param value The package to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addPackage_")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Fonts.FontPackage, Package_Proxy>.add(value: tools.elide.page.Context.Fonts.FontPackage) {
        _builder.addPackage(value)
      }
      /**
       * <pre>
       * Specifies packages of fonts included for reference.
       * </pre>
       *
       * <code>repeated .page.Context.Fonts.FontPackage package = 1;</code>
       * @param value The package to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignPackage_")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Fonts.FontPackage, Package_Proxy>.plusAssign(value: tools.elide.page.Context.Fonts.FontPackage) {
        add(value)
      }
      /**
       * <pre>
       * Specifies packages of fonts included for reference.
       * </pre>
       *
       * <code>repeated .page.Context.Fonts.FontPackage package = 1;</code>
       * @param values The package to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllPackage_")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Fonts.FontPackage, Package_Proxy>.addAll(values: kotlin.collections.Iterable<tools.elide.page.Context.Fonts.FontPackage>) {
        _builder.addAllPackage(values)
      }
      /**
       * <pre>
       * Specifies packages of fonts included for reference.
       * </pre>
       *
       * <code>repeated .page.Context.Fonts.FontPackage package = 1;</code>
       * @param values The package to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllPackage_")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Fonts.FontPackage, Package_Proxy>.plusAssign(values: kotlin.collections.Iterable<tools.elide.page.Context.Fonts.FontPackage>) {
        addAll(values)
      }
      /**
       * <pre>
       * Specifies packages of fonts included for reference.
       * </pre>
       *
       * <code>repeated .page.Context.Fonts.FontPackage package = 1;</code>
       * @param index The index to set the value at.
       * @param value The package to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setPackage_")
      operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Fonts.FontPackage, Package_Proxy>.set(index: kotlin.Int, value: tools.elide.page.Context.Fonts.FontPackage) {
        _builder.setPackage(index, value)
      }
      /**
       * <pre>
       * Specifies packages of fonts included for reference.
       * </pre>
       *
       * <code>repeated .page.Context.Fonts.FontPackage package = 1;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearPackage_")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Fonts.FontPackage, Package_Proxy>.clear() {
        _builder.clearPackage()
      }

    }
    @kotlin.jvm.JvmName("-initializefontReference")
    inline fun fontReference(block: tools.elide.page.ContextKt.FontsKt.FontReferenceKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.Fonts.FontReference =
      tools.elide.page.ContextKt.FontsKt.FontReferenceKt.Dsl._create(tools.elide.page.Context.Fonts.FontReference.newBuilder()).apply { block() }._build()
    object FontReferenceKt {
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      @com.google.protobuf.kotlin.ProtoDslMarker
      class Dsl private constructor(
        private val _builder: tools.elide.page.Context.Fonts.FontReference.Builder
      ) {
        companion object {
          @kotlin.jvm.JvmSynthetic
          @kotlin.PublishedApi
          internal fun _create(builder: tools.elide.page.Context.Fonts.FontReference.Builder): Dsl = Dsl(builder)
        }

        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _build(): tools.elide.page.Context.Fonts.FontReference = _builder.build()

        /**
         * <pre>
         * Specifies the type of reference being made.
         * </pre>
         *
         * <code>.page.Context.Fonts.FontReferenceType type = 1;</code>
         */
         var type: tools.elide.page.Context.Fonts.FontReferenceType
          @JvmName("getType")
          get() = _builder.getType()
          @JvmName("setType")
          set(value) {
            _builder.setType(value)
          }
        /**
         * <pre>
         * Specifies the type of reference being made.
         * </pre>
         *
         * <code>.page.Context.Fonts.FontReferenceType type = 1;</code>
         */
        fun clearType() {
          _builder.clearType()
        }

        /**
         * <pre>
         * Specifies the format of the font reference being made.
         * </pre>
         *
         * <code>.page.Context.Fonts.FontFormat format = 2;</code>
         */
         var format: tools.elide.page.Context.Fonts.FontFormat
          @JvmName("getFormat")
          get() = _builder.getFormat()
          @JvmName("setFormat")
          set(value) {
            _builder.setFormat(value)
          }
        /**
         * <pre>
         * Specifies the format of the font reference being made.
         * </pre>
         *
         * <code>.page.Context.Fonts.FontFormat format = 2;</code>
         */
        fun clearFormat() {
          _builder.clearFormat()
        }

        /**
         * <pre>
         * Name of the font reference.
         * </pre>
         *
         * <code>string name = 3;</code>
         */
        var name: kotlin.String
          @JvmName("getName")
          get() = _builder.getName()
          @JvmName("setName")
          set(value) {
            _builder.setName(value)
          }
        /**
         * <pre>
         * Name of the font reference.
         * </pre>
         *
         * <code>string name = 3;</code>
         */
        fun clearName() {
          _builder.clearName()
        }

        /**
         * <pre>
         * Weight of the font reference.
         * </pre>
         *
         * <code>string weight = 4;</code>
         */
        var weight: kotlin.String
          @JvmName("getWeight")
          get() = _builder.getWeight()
          @JvmName("setWeight")
          set(value) {
            _builder.setWeight(value)
          }
        /**
         * <pre>
         * Weight of the font reference.
         * </pre>
         *
         * <code>string weight = 4;</code>
         */
        fun clearWeight() {
          _builder.clearWeight()
        }

        /**
         * <pre>
         * Variant of the font reference.
         * </pre>
         *
         * <code>string variant = 5;</code>
         */
        var variant: kotlin.String
          @JvmName("getVariant")
          get() = _builder.getVariant()
          @JvmName("setVariant")
          set(value) {
            _builder.setVariant(value)
          }
        /**
         * <pre>
         * Variant of the font reference.
         * </pre>
         *
         * <code>string variant = 5;</code>
         */
        fun clearVariant() {
          _builder.clearVariant()
        }

        /**
         * <pre>
         * URI reference to this font asset.
         * </pre>
         *
         * <code>.webutil.html.types.TrustedResourceUrlProto uri = 6;</code>
         */
        var uri: com.google.common.html.types.TrustedResourceUrlProto
          @JvmName("getUri")
          get() = _builder.getUri()
          @JvmName("setUri")
          set(value) {
            _builder.setUri(value)
          }
        /**
         * <pre>
         * URI reference to this font asset.
         * </pre>
         *
         * <code>.webutil.html.types.TrustedResourceUrlProto uri = 6;</code>
         */
        fun clearUri() {
          _builder.clearUri()
        }
        /**
         * <pre>
         * URI reference to this font asset.
         * </pre>
         *
         * <code>.webutil.html.types.TrustedResourceUrlProto uri = 6;</code>
         * @return Whether the uri field is set.
         */
        fun hasUri(): kotlin.Boolean {
          return _builder.hasUri()
        }

        /**
         * <pre>
         * Whether to pre-fetch this asset, as applicable.
         * </pre>
         *
         * <code>bool prefetch = 7;</code>
         */
        var prefetch: kotlin.Boolean
          @JvmName("getPrefetch")
          get() = _builder.getPrefetch()
          @JvmName("setPrefetch")
          set(value) {
            _builder.setPrefetch(value)
          }
        /**
         * <pre>
         * Whether to pre-fetch this asset, as applicable.
         * </pre>
         *
         * <code>bool prefetch = 7;</code>
         */
        fun clearPrefetch() {
          _builder.clearPrefetch()
        }

        /**
         * <pre>
         * Whether to pre-load this asset, as applicable.
         * </pre>
         *
         * <code>bool preload = 8;</code>
         */
        var preload: kotlin.Boolean
          @JvmName("getPreload")
          get() = _builder.getPreload()
          @JvmName("setPreload")
          set(value) {
            _builder.setPreload(value)
          }
        /**
         * <pre>
         * Whether to pre-load this asset, as applicable.
         * </pre>
         *
         * <code>bool preload = 8;</code>
         */
        fun clearPreload() {
          _builder.clearPreload()
        }

        /**
         * <pre>
         * Whether to proactively push this asset, as applicable.
         * </pre>
         *
         * <code>bool push = 9;</code>
         */
        var push: kotlin.Boolean
          @JvmName("getPush")
          get() = _builder.getPush()
          @JvmName("setPush")
          set(value) {
            _builder.setPush(value)
          }
        /**
         * <pre>
         * Whether to proactively push this asset, as applicable.
         * </pre>
         *
         * <code>bool push = 9;</code>
         */
        fun clearPush() {
          _builder.clearPush()
        }
      }
    }
    @kotlin.jvm.JvmName("-initializefontPackage")
    inline fun fontPackage(block: tools.elide.page.ContextKt.FontsKt.FontPackageKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.Fonts.FontPackage =
      tools.elide.page.ContextKt.FontsKt.FontPackageKt.Dsl._create(tools.elide.page.Context.Fonts.FontPackage.newBuilder()).apply { block() }._build()
    object FontPackageKt {
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      @com.google.protobuf.kotlin.ProtoDslMarker
      class Dsl private constructor(
        private val _builder: tools.elide.page.Context.Fonts.FontPackage.Builder
      ) {
        companion object {
          @kotlin.jvm.JvmSynthetic
          @kotlin.PublishedApi
          internal fun _create(builder: tools.elide.page.Context.Fonts.FontPackage.Builder): Dsl = Dsl(builder)
        }

        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _build(): tools.elide.page.Context.Fonts.FontPackage = _builder.build()

        /**
         * <pre>
         * Specifies the CSS name used for this font package/family.
         * </pre>
         *
         * <code>string name = 1;</code>
         */
        var name: kotlin.String
          @JvmName("getName")
          get() = _builder.getName()
          @JvmName("setName")
          set(value) {
            _builder.setName(value)
          }
        /**
         * <pre>
         * Specifies the CSS name used for this font package/family.
         * </pre>
         *
         * <code>string name = 1;</code>
         */
        fun clearName() {
          _builder.clearName()
        }

        /**
         * An uninstantiable, behaviorless type to represent the field in
         * generics.
         */
        @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
        class ReferenceProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
        /**
         * <pre>
         * References to individual constituent font assets.
         * </pre>
         *
         * <code>repeated .page.Context.Fonts.FontReference reference = 2;</code>
         */
         val reference: com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Fonts.FontReference, ReferenceProxy>
          @kotlin.jvm.JvmSynthetic
          get() = com.google.protobuf.kotlin.DslList(
            _builder.getReferenceList()
          )
        /**
         * <pre>
         * References to individual constituent font assets.
         * </pre>
         *
         * <code>repeated .page.Context.Fonts.FontReference reference = 2;</code>
         * @param value The reference to add.
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("addReference")
        fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Fonts.FontReference, ReferenceProxy>.add(value: tools.elide.page.Context.Fonts.FontReference) {
          _builder.addReference(value)
        }
        /**
         * <pre>
         * References to individual constituent font assets.
         * </pre>
         *
         * <code>repeated .page.Context.Fonts.FontReference reference = 2;</code>
         * @param value The reference to add.
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("plusAssignReference")
        @Suppress("NOTHING_TO_INLINE")
        inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Fonts.FontReference, ReferenceProxy>.plusAssign(value: tools.elide.page.Context.Fonts.FontReference) {
          add(value)
        }
        /**
         * <pre>
         * References to individual constituent font assets.
         * </pre>
         *
         * <code>repeated .page.Context.Fonts.FontReference reference = 2;</code>
         * @param values The reference to add.
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("addAllReference")
        fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Fonts.FontReference, ReferenceProxy>.addAll(values: kotlin.collections.Iterable<tools.elide.page.Context.Fonts.FontReference>) {
          _builder.addAllReference(values)
        }
        /**
         * <pre>
         * References to individual constituent font assets.
         * </pre>
         *
         * <code>repeated .page.Context.Fonts.FontReference reference = 2;</code>
         * @param values The reference to add.
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("plusAssignAllReference")
        @Suppress("NOTHING_TO_INLINE")
        inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Fonts.FontReference, ReferenceProxy>.plusAssign(values: kotlin.collections.Iterable<tools.elide.page.Context.Fonts.FontReference>) {
          addAll(values)
        }
        /**
         * <pre>
         * References to individual constituent font assets.
         * </pre>
         *
         * <code>repeated .page.Context.Fonts.FontReference reference = 2;</code>
         * @param index The index to set the value at.
         * @param value The reference to set.
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("setReference")
        operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Fonts.FontReference, ReferenceProxy>.set(index: kotlin.Int, value: tools.elide.page.Context.Fonts.FontReference) {
          _builder.setReference(index, value)
        }
        /**
         * <pre>
         * References to individual constituent font assets.
         * </pre>
         *
         * <code>repeated .page.Context.Fonts.FontReference reference = 2;</code>
         */
        @kotlin.jvm.JvmSynthetic
        @kotlin.jvm.JvmName("clearReference")
        fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Fonts.FontReference, ReferenceProxy>.clear() {
          _builder.clearReference()
        }

      }
    }
  }
  @kotlin.jvm.JvmName("-initializescripts")
  inline fun scripts(block: tools.elide.page.ContextKt.ScriptsKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.Scripts =
    tools.elide.page.ContextKt.ScriptsKt.Dsl._create(tools.elide.page.Context.Scripts.newBuilder()).apply { block() }._build()
  object ScriptsKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      private val _builder: tools.elide.page.Context.Scripts.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: tools.elide.page.Context.Scripts.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): tools.elide.page.Context.Scripts = _builder.build()

      /**
       * <pre>
       * JavaScript code that should be emitted early in the &lt;head&gt;.
       * </pre>
       *
       * <code>.webutil.html.types.SafeScriptProto lifted = 1;</code>
       */
      var lifted: com.google.common.html.types.SafeScriptProto
        @JvmName("getLifted")
        get() = _builder.getLifted()
        @JvmName("setLifted")
        set(value) {
          _builder.setLifted(value)
        }
      /**
       * <pre>
       * JavaScript code that should be emitted early in the &lt;head&gt;.
       * </pre>
       *
       * <code>.webutil.html.types.SafeScriptProto lifted = 1;</code>
       */
      fun clearLifted() {
        _builder.clearLifted()
      }
      /**
       * <pre>
       * JavaScript code that should be emitted early in the &lt;head&gt;.
       * </pre>
       *
       * <code>.webutil.html.types.SafeScriptProto lifted = 1;</code>
       * @return Whether the lifted field is set.
       */
      fun hasLifted(): kotlin.Boolean {
        return _builder.hasLifted()
      }

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      class LinkProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * External JavaScript code to be included in &lt;link&gt; tags.
       * </pre>
       *
       * <code>repeated .page.Context.Scripts.JavaScript link = 2;</code>
       */
       val link: com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Scripts.JavaScript, LinkProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getLinkList()
        )
      /**
       * <pre>
       * External JavaScript code to be included in &lt;link&gt; tags.
       * </pre>
       *
       * <code>repeated .page.Context.Scripts.JavaScript link = 2;</code>
       * @param value The link to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addLink")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Scripts.JavaScript, LinkProxy>.add(value: tools.elide.page.Context.Scripts.JavaScript) {
        _builder.addLink(value)
      }
      /**
       * <pre>
       * External JavaScript code to be included in &lt;link&gt; tags.
       * </pre>
       *
       * <code>repeated .page.Context.Scripts.JavaScript link = 2;</code>
       * @param value The link to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignLink")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Scripts.JavaScript, LinkProxy>.plusAssign(value: tools.elide.page.Context.Scripts.JavaScript) {
        add(value)
      }
      /**
       * <pre>
       * External JavaScript code to be included in &lt;link&gt; tags.
       * </pre>
       *
       * <code>repeated .page.Context.Scripts.JavaScript link = 2;</code>
       * @param values The link to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllLink")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Scripts.JavaScript, LinkProxy>.addAll(values: kotlin.collections.Iterable<tools.elide.page.Context.Scripts.JavaScript>) {
        _builder.addAllLink(values)
      }
      /**
       * <pre>
       * External JavaScript code to be included in &lt;link&gt; tags.
       * </pre>
       *
       * <code>repeated .page.Context.Scripts.JavaScript link = 2;</code>
       * @param values The link to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllLink")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Scripts.JavaScript, LinkProxy>.plusAssign(values: kotlin.collections.Iterable<tools.elide.page.Context.Scripts.JavaScript>) {
        addAll(values)
      }
      /**
       * <pre>
       * External JavaScript code to be included in &lt;link&gt; tags.
       * </pre>
       *
       * <code>repeated .page.Context.Scripts.JavaScript link = 2;</code>
       * @param index The index to set the value at.
       * @param value The link to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setLink")
      operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Scripts.JavaScript, LinkProxy>.set(index: kotlin.Int, value: tools.elide.page.Context.Scripts.JavaScript) {
        _builder.setLink(index, value)
      }
      /**
       * <pre>
       * External JavaScript code to be included in &lt;link&gt; tags.
       * </pre>
       *
       * <code>repeated .page.Context.Scripts.JavaScript link = 2;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearLink")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.Scripts.JavaScript, LinkProxy>.clear() {
        _builder.clearLink()
      }

    }
    @kotlin.jvm.JvmName("-initializejavaScript")
    inline fun javaScript(block: tools.elide.page.ContextKt.ScriptsKt.JavaScriptKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.Scripts.JavaScript =
      tools.elide.page.ContextKt.ScriptsKt.JavaScriptKt.Dsl._create(tools.elide.page.Context.Scripts.JavaScript.newBuilder()).apply { block() }._build()
    object JavaScriptKt {
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      @com.google.protobuf.kotlin.ProtoDslMarker
      class Dsl private constructor(
        private val _builder: tools.elide.page.Context.Scripts.JavaScript.Builder
      ) {
        companion object {
          @kotlin.jvm.JvmSynthetic
          @kotlin.PublishedApi
          internal fun _create(builder: tools.elide.page.Context.Scripts.JavaScript.Builder): Dsl = Dsl(builder)
        }

        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _build(): tools.elide.page.Context.Scripts.JavaScript = _builder.build()

        /**
         * <pre>
         * URI to a given script asset.
         * </pre>
         *
         * <code>.webutil.html.types.TrustedResourceUrlProto uri = 1;</code>
         */
        var uri: com.google.common.html.types.TrustedResourceUrlProto
          @JvmName("getUri")
          get() = _builder.getUri()
          @JvmName("setUri")
          set(value) {
            _builder.setUri(value)
          }
        /**
         * <pre>
         * URI to a given script asset.
         * </pre>
         *
         * <code>.webutil.html.types.TrustedResourceUrlProto uri = 1;</code>
         */
        fun clearUri() {
          _builder.clearUri()
        }
        /**
         * <pre>
         * URI to a given script asset.
         * </pre>
         *
         * <code>.webutil.html.types.TrustedResourceUrlProto uri = 1;</code>
         * @return Whether the uri field is set.
         */
        fun hasUri(): kotlin.Boolean {
          return _builder.hasUri()
        }

        /**
         * <pre>
         * ID at which to attach the script tag in the DOM.
         * </pre>
         *
         * <code>string id = 2;</code>
         */
        var id: kotlin.String
          @JvmName("getId")
          get() = _builder.getId()
          @JvmName("setId")
          set(value) {
            _builder.setId(value)
          }
        /**
         * <pre>
         * ID at which to attach the script tag in the DOM.
         * </pre>
         *
         * <code>string id = 2;</code>
         */
        fun clearId() {
          _builder.clearId()
        }

        /**
         * <pre>
         * Whether to add the `defer` flag to a script.
         * </pre>
         *
         * <code>bool defer = 3;</code>
         */
        var defer: kotlin.Boolean
          @JvmName("getDefer")
          get() = _builder.getDefer()
          @JvmName("setDefer")
          set(value) {
            _builder.setDefer(value)
          }
        /**
         * <pre>
         * Whether to add the `defer` flag to a script.
         * </pre>
         *
         * <code>bool defer = 3;</code>
         */
        fun clearDefer() {
          _builder.clearDefer()
        }

        /**
         * <pre>
         * Whether to add the `async` flag to a script.
         * </pre>
         *
         * <code>bool async = 4;</code>
         */
        var async: kotlin.Boolean
          @JvmName("getAsync")
          get() = _builder.getAsync()
          @JvmName("setAsync")
          set(value) {
            _builder.setAsync(value)
          }
        /**
         * <pre>
         * Whether to add the `async` flag to a script.
         * </pre>
         *
         * <code>bool async = 4;</code>
         */
        fun clearAsync() {
          _builder.clearAsync()
        }

        /**
         * <pre>
         * Whether to add the `module` flag to a script.
         * </pre>
         *
         * <code>bool module = 5;</code>
         */
        var module: kotlin.Boolean
          @JvmName("getModule")
          get() = _builder.getModule()
          @JvmName("setModule")
          set(value) {
            _builder.setModule(value)
          }
        /**
         * <pre>
         * Whether to add the `module` flag to a script.
         * </pre>
         *
         * <code>bool module = 5;</code>
         */
        fun clearModule() {
          _builder.clearModule()
        }

        /**
         * <pre>
         * Whether to add the `nomodule` flag to a script.
         * </pre>
         *
         * <code>bool no_module = 6;</code>
         */
        var noModule: kotlin.Boolean
          @JvmName("getNoModule")
          get() = _builder.getNoModule()
          @JvmName("setNoModule")
          set(value) {
            _builder.setNoModule(value)
          }
        /**
         * <pre>
         * Whether to add the `nomodule` flag to a script.
         * </pre>
         *
         * <code>bool no_module = 6;</code>
         */
        fun clearNoModule() {
          _builder.clearNoModule()
        }

        /**
         * <pre>
         * Whether to pre-fetch this asset, as applicable.
         * </pre>
         *
         * <code>bool prefetch = 7;</code>
         */
        var prefetch: kotlin.Boolean
          @JvmName("getPrefetch")
          get() = _builder.getPrefetch()
          @JvmName("setPrefetch")
          set(value) {
            _builder.setPrefetch(value)
          }
        /**
         * <pre>
         * Whether to pre-fetch this asset, as applicable.
         * </pre>
         *
         * <code>bool prefetch = 7;</code>
         */
        fun clearPrefetch() {
          _builder.clearPrefetch()
        }

        /**
         * <pre>
         * Whether to pre-load this asset, as applicable.
         * </pre>
         *
         * <code>bool preload = 8;</code>
         */
        var preload: kotlin.Boolean
          @JvmName("getPreload")
          get() = _builder.getPreload()
          @JvmName("setPreload")
          set(value) {
            _builder.setPreload(value)
          }
        /**
         * <pre>
         * Whether to pre-load this asset, as applicable.
         * </pre>
         *
         * <code>bool preload = 8;</code>
         */
        fun clearPreload() {
          _builder.clearPreload()
        }

        /**
         * <pre>
         * Whether to proactively push this asset, as applicable.
         * </pre>
         *
         * <code>bool push = 9;</code>
         */
        var push: kotlin.Boolean
          @JvmName("getPush")
          get() = _builder.getPush()
          @JvmName("setPush")
          set(value) {
            _builder.setPush(value)
          }
        /**
         * <pre>
         * Whether to proactively push this asset, as applicable.
         * </pre>
         *
         * <code>bool push = 9;</code>
         */
        fun clearPush() {
          _builder.clearPush()
        }
      }
    }
  }
  @kotlin.jvm.JvmName("-initializedynamicETag")
  inline fun dynamicETag(block: tools.elide.page.ContextKt.DynamicETagKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.DynamicETag =
    tools.elide.page.ContextKt.DynamicETagKt.Dsl._create(tools.elide.page.Context.DynamicETag.newBuilder()).apply { block() }._build()
  object DynamicETagKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      private val _builder: tools.elide.page.Context.DynamicETag.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: tools.elide.page.Context.DynamicETag.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): tools.elide.page.Context.DynamicETag = _builder.build()

      /**
       * <pre>
       * Whether to enable dynamic `ETag`s.
       * </pre>
       *
       * <code>bool enabled = 1;</code>
       */
      var enabled: kotlin.Boolean
        @JvmName("getEnabled")
        get() = _builder.getEnabled()
        @JvmName("setEnabled")
        set(value) {
          _builder.setEnabled(value)
        }
      /**
       * <pre>
       * Whether to enable dynamic `ETag`s.
       * </pre>
       *
       * <code>bool enabled = 1;</code>
       */
      fun clearEnabled() {
        _builder.clearEnabled()
      }

      /**
       * <pre>
       * Flipped to `true` if the `ETag` was generated from a full response pre-image.
       * </pre>
       *
       * <code>bool strong = 2;</code>
       */
      var strong: kotlin.Boolean
        @JvmName("getStrong")
        get() = _builder.getStrong()
        @JvmName("setStrong")
        set(value) {
          _builder.setStrong(value)
        }
      /**
       * <pre>
       * Flipped to `true` if the `ETag` was generated from a full response pre-image.
       * </pre>
       *
       * <code>bool strong = 2;</code>
       */
      fun clearStrong() {
        _builder.clearStrong()
      }

      /**
       * <pre>
       * Raw `ETag` component describing the request/operation pre-image.
       * </pre>
       *
       * <code>.data.DataFingerprint preimage = 3;</code>
       */
      var preimage: tools.elide.data.DataFingerprint
        @JvmName("getPreimage")
        get() = _builder.getPreimage()
        @JvmName("setPreimage")
        set(value) {
          _builder.setPreimage(value)
        }
      /**
       * <pre>
       * Raw `ETag` component describing the request/operation pre-image.
       * </pre>
       *
       * <code>.data.DataFingerprint preimage = 3;</code>
       */
      fun clearPreimage() {
        _builder.clearPreimage()
      }
      /**
       * <pre>
       * Raw `ETag` component describing the request/operation pre-image.
       * </pre>
       *
       * <code>.data.DataFingerprint preimage = 3;</code>
       * @return Whether the preimage field is set.
       */
      fun hasPreimage(): kotlin.Boolean {
        return _builder.hasPreimage()
      }

      /**
       * <pre>
       * Raw `ETag` component describing the response. Leave unset to calculate dynamically.
       * </pre>
       *
       * <code>.data.DataFingerprint response = 4;</code>
       */
      var response: tools.elide.data.DataFingerprint
        @JvmName("getResponse")
        get() = _builder.getResponse()
        @JvmName("setResponse")
        set(value) {
          _builder.setResponse(value)
        }
      /**
       * <pre>
       * Raw `ETag` component describing the response. Leave unset to calculate dynamically.
       * </pre>
       *
       * <code>.data.DataFingerprint response = 4;</code>
       */
      fun clearResponse() {
        _builder.clearResponse()
      }
      /**
       * <pre>
       * Raw `ETag` component describing the response. Leave unset to calculate dynamically.
       * </pre>
       *
       * <code>.data.DataFingerprint response = 4;</code>
       * @return Whether the response field is set.
       */
      fun hasResponse(): kotlin.Boolean {
        return _builder.hasResponse()
      }
    }
  }
  @kotlin.jvm.JvmName("-initializerDFPrefix")
  inline fun rDFPrefix(block: tools.elide.page.ContextKt.RDFPrefixKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.RDFPrefix =
    tools.elide.page.ContextKt.RDFPrefixKt.Dsl._create(tools.elide.page.Context.RDFPrefix.newBuilder()).apply { block() }._build()
  object RDFPrefixKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      private val _builder: tools.elide.page.Context.RDFPrefix.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: tools.elide.page.Context.RDFPrefix.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): tools.elide.page.Context.RDFPrefix = _builder.build()

      /**
       * <pre>
       * Prefix value to apply.
       * </pre>
       *
       * <code>string prefix = 1;</code>
       */
      var prefix: kotlin.String
        @JvmName("getPrefix")
        get() = _builder.getPrefix()
        @JvmName("setPrefix")
        set(value) {
          _builder.setPrefix(value)
        }
      /**
       * <pre>
       * Prefix value to apply.
       * </pre>
       *
       * <code>string prefix = 1;</code>
       */
      fun clearPrefix() {
        _builder.clearPrefix()
      }

      /**
       * <pre>
       * Target value to apply.
       * </pre>
       *
       * <code>string target = 2;</code>
       */
      var target: kotlin.String
        @JvmName("getTarget")
        get() = _builder.getTarget()
        @JvmName("setTarget")
        set(value) {
          _builder.setTarget(value)
        }
      /**
       * <pre>
       * Target value to apply.
       * </pre>
       *
       * <code>string target = 2;</code>
       */
      fun clearTarget() {
        _builder.clearTarget()
      }
    }
  }
  @kotlin.jvm.JvmName("-initializecookie")
  inline fun cookie(block: tools.elide.page.ContextKt.CookieKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.Cookie =
    tools.elide.page.ContextKt.CookieKt.Dsl._create(tools.elide.page.Context.Cookie.newBuilder()).apply { block() }._build()
  object CookieKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      private val _builder: tools.elide.page.Context.Cookie.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: tools.elide.page.Context.Cookie.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): tools.elide.page.Context.Cookie = _builder.build()

      /**
       * <pre>
       * Name of the cookie to set.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      var name: kotlin.String
        @JvmName("getName")
        get() = _builder.getName()
        @JvmName("setName")
        set(value) {
          _builder.setName(value)
        }
      /**
       * <pre>
       * Name of the cookie to set.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      fun clearName() {
        _builder.clearName()
      }

      /**
       * <pre>
       * Value of the cookie to set. Optional. If left empty, the specified cookie will be cleared.
       * </pre>
       *
       * <code>string value = 2;</code>
       */
      var value: kotlin.String
        @JvmName("getValue")
        get() = _builder.getValue()
        @JvmName("setValue")
        set(value) {
          _builder.setValue(value)
        }
      /**
       * <pre>
       * Value of the cookie to set. Optional. If left empty, the specified cookie will be cleared.
       * </pre>
       *
       * <code>string value = 2;</code>
       */
      fun clearValue() {
        _builder.clearValue()
      }

      /**
       * <pre>
       * Domain value of the cookie to set. Optional.
       * </pre>
       *
       * <code>string domain = 3;</code>
       */
      var domain: kotlin.String
        @JvmName("getDomain")
        get() = _builder.getDomain()
        @JvmName("setDomain")
        set(value) {
          _builder.setDomain(value)
        }
      /**
       * <pre>
       * Domain value of the cookie to set. Optional.
       * </pre>
       *
       * <code>string domain = 3;</code>
       */
      fun clearDomain() {
        _builder.clearDomain()
      }

      /**
       * <pre>
       * Path value of the cookie to set. Optional.
       * </pre>
       *
       * <code>string path = 4;</code>
       */
      var path: kotlin.String
        @JvmName("getPath")
        get() = _builder.getPath()
        @JvmName("setPath")
        set(value) {
          _builder.setPath(value)
        }
      /**
       * <pre>
       * Path value of the cookie to set. Optional.
       * </pre>
       *
       * <code>string path = 4;</code>
       */
      fun clearPath() {
        _builder.clearPath()
      }

      /**
       * <pre>
       * Immediately expire the cookie.
       * </pre>
       *
       * <code>bool immediate_expire = 5;</code>
       */
      var immediateExpire: kotlin.Boolean
        @JvmName("getImmediateExpire")
        get() = _builder.getImmediateExpire()
        @JvmName("setImmediateExpire")
        set(value) {
          _builder.setImmediateExpire(value)
        }
      /**
       * <pre>
       * Immediately expire the cookie.
       * </pre>
       *
       * <code>bool immediate_expire = 5;</code>
       */
      fun clearImmediateExpire() {
        _builder.clearImmediateExpire()
      }
      /**
       * <pre>
       * Immediately expire the cookie.
       * </pre>
       *
       * <code>bool immediate_expire = 5;</code>
       * @return Whether the immediateExpire field is set.
       */
      fun hasImmediateExpire(): kotlin.Boolean {
        return _builder.hasImmediateExpire()
      }

      /**
       * <pre>
       * Sets an absolute time-point value for cookie expiration.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp absolute_expire = 6;</code>
       */
      var absoluteExpire: com.google.protobuf.Timestamp
        @JvmName("getAbsoluteExpire")
        get() = _builder.getAbsoluteExpire()
        @JvmName("setAbsoluteExpire")
        set(value) {
          _builder.setAbsoluteExpire(value)
        }
      /**
       * <pre>
       * Sets an absolute time-point value for cookie expiration.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp absolute_expire = 6;</code>
       */
      fun clearAbsoluteExpire() {
        _builder.clearAbsoluteExpire()
      }
      /**
       * <pre>
       * Sets an absolute time-point value for cookie expiration.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp absolute_expire = 6;</code>
       * @return Whether the absoluteExpire field is set.
       */
      fun hasAbsoluteExpire(): kotlin.Boolean {
        return _builder.hasAbsoluteExpire()
      }

      /**
       * <pre>
       * Sets a relative time-period value for cookie expiration.
       * </pre>
       *
       * <code>.google.protobuf.Duration relative_expire = 7;</code>
       */
      var relativeExpire: com.google.protobuf.Duration
        @JvmName("getRelativeExpire")
        get() = _builder.getRelativeExpire()
        @JvmName("setRelativeExpire")
        set(value) {
          _builder.setRelativeExpire(value)
        }
      /**
       * <pre>
       * Sets a relative time-period value for cookie expiration.
       * </pre>
       *
       * <code>.google.protobuf.Duration relative_expire = 7;</code>
       */
      fun clearRelativeExpire() {
        _builder.clearRelativeExpire()
      }
      /**
       * <pre>
       * Sets a relative time-period value for cookie expiration.
       * </pre>
       *
       * <code>.google.protobuf.Duration relative_expire = 7;</code>
       * @return Whether the relativeExpire field is set.
       */
      fun hasRelativeExpire(): kotlin.Boolean {
        return _builder.hasRelativeExpire()
      }

      /**
       * <pre>
       * Set a far-future expiration.
       * </pre>
       *
       * <code>bool no_expire = 8;</code>
       */
      var noExpire: kotlin.Boolean
        @JvmName("getNoExpire")
        get() = _builder.getNoExpire()
        @JvmName("setNoExpire")
        set(value) {
          _builder.setNoExpire(value)
        }
      /**
       * <pre>
       * Set a far-future expiration.
       * </pre>
       *
       * <code>bool no_expire = 8;</code>
       */
      fun clearNoExpire() {
        _builder.clearNoExpire()
      }
      /**
       * <pre>
       * Set a far-future expiration.
       * </pre>
       *
       * <code>bool no_expire = 8;</code>
       * @return Whether the noExpire field is set.
       */
      fun hasNoExpire(): kotlin.Boolean {
        return _builder.hasNoExpire()
      }

      /**
       * <pre>
       * `HttpOnly` flag for the cookie.
       * </pre>
       *
       * <code>bool http_only = 9;</code>
       */
      var httpOnly: kotlin.Boolean
        @JvmName("getHttpOnly")
        get() = _builder.getHttpOnly()
        @JvmName("setHttpOnly")
        set(value) {
          _builder.setHttpOnly(value)
        }
      /**
       * <pre>
       * `HttpOnly` flag for the cookie.
       * </pre>
       *
       * <code>bool http_only = 9;</code>
       */
      fun clearHttpOnly() {
        _builder.clearHttpOnly()
      }

      /**
       * <pre>
       * `Secure` flag for the cookie.
       * </pre>
       *
       * <code>bool secure = 10;</code>
       */
      var secure: kotlin.Boolean
        @JvmName("getSecure")
        get() = _builder.getSecure()
        @JvmName("setSecure")
        set(value) {
          _builder.setSecure(value)
        }
      /**
       * <pre>
       * `Secure` flag for the cookie.
       * </pre>
       *
       * <code>bool secure = 10;</code>
       */
      fun clearSecure() {
        _builder.clearSecure()
      }

      /**
       * <pre>
       * `SameSite` policy flag for the cookie.
       * </pre>
       *
       * <code>.page.Context.Cookie.SameSitePolicy same_site = 11;</code>
       */
       var sameSite: tools.elide.page.Context.Cookie.SameSitePolicy
        @JvmName("getSameSite")
        get() = _builder.getSameSite()
        @JvmName("setSameSite")
        set(value) {
          _builder.setSameSite(value)
        }
      /**
       * <pre>
       * `SameSite` policy flag for the cookie.
       * </pre>
       *
       * <code>.page.Context.Cookie.SameSitePolicy same_site = 11;</code>
       */
      fun clearSameSite() {
        _builder.clearSameSite()
      }
      val expirationStrategyCase: tools.elide.page.Context.Cookie.ExpirationStrategyCase
        @JvmName("getExpirationStrategyCase")
        get() = _builder.getExpirationStrategyCase()

      fun clearExpirationStrategy() {
        _builder.clearExpirationStrategy()
      }
    }
  }
  @kotlin.jvm.JvmName("-initializeclientHints")
  inline fun clientHints(block: tools.elide.page.ContextKt.ClientHintsKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.ClientHints =
    tools.elide.page.ContextKt.ClientHintsKt.Dsl._create(tools.elide.page.Context.ClientHints.newBuilder()).apply { block() }._build()
  object ClientHintsKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      private val _builder: tools.elide.page.Context.ClientHints.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: tools.elide.page.Context.ClientHints.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): tools.elide.page.Context.ClientHints = _builder.build()

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      class SupportedProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * Client hints supported by the server for this HTTP cycle.
       * </pre>
       *
       * <code>repeated .page.Context.ClientHint supported = 1;</code>
       */
       val supported: com.google.protobuf.kotlin.DslList<tools.elide.page.Context.ClientHint, SupportedProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getSupportedList()
        )
      /**
       * <pre>
       * Client hints supported by the server for this HTTP cycle.
       * </pre>
       *
       * <code>repeated .page.Context.ClientHint supported = 1;</code>
       * @param value The supported to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addSupported")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.ClientHint, SupportedProxy>.add(value: tools.elide.page.Context.ClientHint) {
        _builder.addSupported(value)
      }/**
       * <pre>
       * Client hints supported by the server for this HTTP cycle.
       * </pre>
       *
       * <code>repeated .page.Context.ClientHint supported = 1;</code>
       * @param value The supported to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignSupported")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.ClientHint, SupportedProxy>.plusAssign(value: tools.elide.page.Context.ClientHint) {
        add(value)
      }/**
       * <pre>
       * Client hints supported by the server for this HTTP cycle.
       * </pre>
       *
       * <code>repeated .page.Context.ClientHint supported = 1;</code>
       * @param values The supported to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllSupported")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.ClientHint, SupportedProxy>.addAll(values: kotlin.collections.Iterable<tools.elide.page.Context.ClientHint>) {
        _builder.addAllSupported(values)
      }/**
       * <pre>
       * Client hints supported by the server for this HTTP cycle.
       * </pre>
       *
       * <code>repeated .page.Context.ClientHint supported = 1;</code>
       * @param values The supported to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllSupported")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.ClientHint, SupportedProxy>.plusAssign(values: kotlin.collections.Iterable<tools.elide.page.Context.ClientHint>) {
        addAll(values)
      }/**
       * <pre>
       * Client hints supported by the server for this HTTP cycle.
       * </pre>
       *
       * <code>repeated .page.Context.ClientHint supported = 1;</code>
       * @param index The index to set the value at.
       * @param value The supported to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setSupported")
      operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.ClientHint, SupportedProxy>.set(index: kotlin.Int, value: tools.elide.page.Context.ClientHint) {
        _builder.setSupported(index, value)
      }/**
       * <pre>
       * Client hints supported by the server for this HTTP cycle.
       * </pre>
       *
       * <code>repeated .page.Context.ClientHint supported = 1;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearSupported")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.ClientHint, SupportedProxy>.clear() {
        _builder.clearSupported()
      }
      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      class IndicatedProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * Client hints indicated by the client for this HTTP cycle.
       * </pre>
       *
       * <code>repeated .page.Context.ClientHint indicated = 2;</code>
       */
       val indicated: com.google.protobuf.kotlin.DslList<tools.elide.page.Context.ClientHint, IndicatedProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getIndicatedList()
        )
      /**
       * <pre>
       * Client hints indicated by the client for this HTTP cycle.
       * </pre>
       *
       * <code>repeated .page.Context.ClientHint indicated = 2;</code>
       * @param value The indicated to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addIndicated")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.ClientHint, IndicatedProxy>.add(value: tools.elide.page.Context.ClientHint) {
        _builder.addIndicated(value)
      }/**
       * <pre>
       * Client hints indicated by the client for this HTTP cycle.
       * </pre>
       *
       * <code>repeated .page.Context.ClientHint indicated = 2;</code>
       * @param value The indicated to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignIndicated")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.ClientHint, IndicatedProxy>.plusAssign(value: tools.elide.page.Context.ClientHint) {
        add(value)
      }/**
       * <pre>
       * Client hints indicated by the client for this HTTP cycle.
       * </pre>
       *
       * <code>repeated .page.Context.ClientHint indicated = 2;</code>
       * @param values The indicated to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllIndicated")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.ClientHint, IndicatedProxy>.addAll(values: kotlin.collections.Iterable<tools.elide.page.Context.ClientHint>) {
        _builder.addAllIndicated(values)
      }/**
       * <pre>
       * Client hints indicated by the client for this HTTP cycle.
       * </pre>
       *
       * <code>repeated .page.Context.ClientHint indicated = 2;</code>
       * @param values The indicated to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllIndicated")
      @Suppress("NOTHING_TO_INLINE")
      inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.ClientHint, IndicatedProxy>.plusAssign(values: kotlin.collections.Iterable<tools.elide.page.Context.ClientHint>) {
        addAll(values)
      }/**
       * <pre>
       * Client hints indicated by the client for this HTTP cycle.
       * </pre>
       *
       * <code>repeated .page.Context.ClientHint indicated = 2;</code>
       * @param index The index to set the value at.
       * @param value The indicated to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setIndicated")
      operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.ClientHint, IndicatedProxy>.set(index: kotlin.Int, value: tools.elide.page.Context.ClientHint) {
        _builder.setIndicated(index, value)
      }/**
       * <pre>
       * Client hints indicated by the client for this HTTP cycle.
       * </pre>
       *
       * <code>repeated .page.Context.ClientHint indicated = 2;</code>
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearIndicated")
      fun com.google.protobuf.kotlin.DslList<tools.elide.page.Context.ClientHint, IndicatedProxy>.clear() {
        _builder.clearIndicated()
      }
      /**
       * <pre>
       * Time-to-live for Client Hints configuration, in seconds.
       * </pre>
       *
       * <code>uint64 lifetime = 3;</code>
       */
      var lifetime: kotlin.Long
        @JvmName("getLifetime")
        get() = _builder.getLifetime()
        @JvmName("setLifetime")
        set(value) {
          _builder.setLifetime(value)
        }
      /**
       * <pre>
       * Time-to-live for Client Hints configuration, in seconds.
       * </pre>
       *
       * <code>uint64 lifetime = 3;</code>
       */
      fun clearLifetime() {
        _builder.clearLifetime()
      }

      /**
       * <pre>
       * Viewport width reported by the client.
       * </pre>
       *
       * <code>uint32 width = 4;</code>
       */
      var width: kotlin.Int
        @JvmName("getWidth")
        get() = _builder.getWidth()
        @JvmName("setWidth")
        set(value) {
          _builder.setWidth(value)
        }
      /**
       * <pre>
       * Viewport width reported by the client.
       * </pre>
       *
       * <code>uint32 width = 4;</code>
       */
      fun clearWidth() {
        _builder.clearWidth()
      }

      /**
       * <pre>
       * Viewport width reported by the client.
       * </pre>
       *
       * <code>uint32 viewport_width = 5;</code>
       */
      var viewportWidth: kotlin.Int
        @JvmName("getViewportWidth")
        get() = _builder.getViewportWidth()
        @JvmName("setViewportWidth")
        set(value) {
          _builder.setViewportWidth(value)
        }
      /**
       * <pre>
       * Viewport width reported by the client.
       * </pre>
       *
       * <code>uint32 viewport_width = 5;</code>
       */
      fun clearViewportWidth() {
        _builder.clearViewportWidth()
      }

      /**
       * <pre>
       * Pixel ratio value reported by the client.
       * </pre>
       *
       * <code>uint32 device_pixel_ratio = 6;</code>
       */
      var devicePixelRatio: kotlin.Int
        @JvmName("getDevicePixelRatio")
        get() = _builder.getDevicePixelRatio()
        @JvmName("setDevicePixelRatio")
        set(value) {
          _builder.setDevicePixelRatio(value)
        }
      /**
       * <pre>
       * Pixel ratio value reported by the client.
       * </pre>
       *
       * <code>uint32 device_pixel_ratio = 6;</code>
       */
      fun clearDevicePixelRatio() {
        _builder.clearDevicePixelRatio()
      }

      /**
       * <pre>
       * Latency reported by the client. Includes server latency.
       * </pre>
       *
       * <code>uint32 round_trip_time = 7;</code>
       */
      var roundTripTime: kotlin.Int
        @JvmName("getRoundTripTime")
        get() = _builder.getRoundTripTime()
        @JvmName("setRoundTripTime")
        set(value) {
          _builder.setRoundTripTime(value)
        }
      /**
       * <pre>
       * Latency reported by the client. Includes server latency.
       * </pre>
       *
       * <code>uint32 round_trip_time = 7;</code>
       */
      fun clearRoundTripTime() {
        _builder.clearRoundTripTime()
      }

      /**
       * <pre>
       * Estimated/reported down-link speed for the client.
       * </pre>
       *
       * <code>float downlink = 8;</code>
       */
      var downlink: kotlin.Float
        @JvmName("getDownlink")
        get() = _builder.getDownlink()
        @JvmName("setDownlink")
        set(value) {
          _builder.setDownlink(value)
        }
      /**
       * <pre>
       * Estimated/reported down-link speed for the client.
       * </pre>
       *
       * <code>float downlink = 8;</code>
       */
      fun clearDownlink() {
        _builder.clearDownlink()
      }

      /**
       * <pre>
       * Reported effective-connection-type for the client.
       * </pre>
       *
       * <code>.page.Context.ConnectionHint effective_connection_type = 9;</code>
       */
       var effectiveConnectionType: tools.elide.page.Context.ConnectionHint
        @JvmName("getEffectiveConnectionType")
        get() = _builder.getEffectiveConnectionType()
        @JvmName("setEffectiveConnectionType")
        set(value) {
          _builder.setEffectiveConnectionType(value)
        }
      /**
       * <pre>
       * Reported effective-connection-type for the client.
       * </pre>
       *
       * <code>.page.Context.ConnectionHint effective_connection_type = 9;</code>
       */
      fun clearEffectiveConnectionType() {
        _builder.clearEffectiveConnectionType()
      }

      /**
       * <pre>
       * Flag indicating whether the `Save-Data` token was passed by the client.
       * </pre>
       *
       * <code>bool save_data = 10;</code>
       */
      var saveData: kotlin.Boolean
        @JvmName("getSaveData")
        get() = _builder.getSaveData()
        @JvmName("setSaveData")
        set(value) {
          _builder.setSaveData(value)
        }
      /**
       * <pre>
       * Flag indicating whether the `Save-Data` token was passed by the client.
       * </pre>
       *
       * <code>bool save_data = 10;</code>
       */
      fun clearSaveData() {
        _builder.clearSaveData()
      }

      /**
       * <pre>
       * Memory estimate rating assigned to the device.
       * </pre>
       *
       * <code>float device_memory = 11;</code>
       */
      var deviceMemory: kotlin.Float
        @JvmName("getDeviceMemory")
        get() = _builder.getDeviceMemory()
        @JvmName("setDeviceMemory")
        set(value) {
          _builder.setDeviceMemory(value)
        }
      /**
       * <pre>
       * Memory estimate rating assigned to the device.
       * </pre>
       *
       * <code>float device_memory = 11;</code>
       */
      fun clearDeviceMemory() {
        _builder.clearDeviceMemory()
      }
    }
  }
  @kotlin.jvm.JvmName("-initializeresponseHeader")
  inline fun responseHeader(block: tools.elide.page.ContextKt.ResponseHeaderKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.ResponseHeader =
    tools.elide.page.ContextKt.ResponseHeaderKt.Dsl._create(tools.elide.page.Context.ResponseHeader.newBuilder()).apply { block() }._build()
  object ResponseHeaderKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      private val _builder: tools.elide.page.Context.ResponseHeader.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: tools.elide.page.Context.ResponseHeader.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): tools.elide.page.Context.ResponseHeader = _builder.build()

      /**
       * <pre>
       * Custom header name.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      var name: kotlin.String
        @JvmName("getName")
        get() = _builder.getName()
        @JvmName("setName")
        set(value) {
          _builder.setName(value)
        }
      /**
       * <pre>
       * Custom header name.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      fun clearName() {
        _builder.clearName()
      }

      /**
       * <pre>
       * Custom header value.
       * </pre>
       *
       * <code>string value = 3;</code>
       */
      var value: kotlin.String
        @JvmName("getValue")
        get() = _builder.getValue()
        @JvmName("setValue")
        set(value) {
          _builder.setValue(value)
        }
      /**
       * <pre>
       * Custom header value.
       * </pre>
       *
       * <code>string value = 3;</code>
       */
      fun clearValue() {
        _builder.clearValue()
      }

      /**
       * <pre>
       * Force-apply the header, even if an error page is served, or duplicates exist.
       * </pre>
       *
       * <code>bool force = 4;</code>
       */
      var force: kotlin.Boolean
        @JvmName("getForce")
        get() = _builder.getForce()
        @JvmName("setForce")
        set(value) {
          _builder.setForce(value)
        }
      /**
       * <pre>
       * Force-apply the header, even if an error page is served, or duplicates exist.
       * </pre>
       *
       * <code>bool force = 4;</code>
       */
      fun clearForce() {
        _builder.clearForce()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun tools.elide.page.Context.copy(block: tools.elide.page.ContextKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context =
  tools.elide.page.ContextKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.page.Context.Metadata.copy(block: tools.elide.page.ContextKt.MetadataKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.Metadata =
  tools.elide.page.ContextKt.MetadataKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.page.Context.Metadata.OpenGraph.copy(block: tools.elide.page.ContextKt.MetadataKt.OpenGraphKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.Metadata.OpenGraph =
  tools.elide.page.ContextKt.MetadataKt.OpenGraphKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.page.Context.Metadata.OpenGraph.OpenGraphImage.copy(block: tools.elide.page.ContextKt.MetadataKt.OpenGraphKt.OpenGraphImageKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.Metadata.OpenGraph.OpenGraphImage =
  tools.elide.page.ContextKt.MetadataKt.OpenGraphKt.OpenGraphImageKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.page.Context.Metadata.OpenGraph.OpenGraphVideo.copy(block: tools.elide.page.ContextKt.MetadataKt.OpenGraphKt.OpenGraphVideoKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.Metadata.OpenGraph.OpenGraphVideo =
  tools.elide.page.ContextKt.MetadataKt.OpenGraphKt.OpenGraphVideoKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val tools.elide.page.Context.Metadata.OpenGraphOrBuilder.localeOrNull: tools.elide.base.LanguageSpec?
  get() = if (hasLocale()) getLocale() else null

val tools.elide.page.Context.Metadata.OpenGraphOrBuilder.twitterOrNull: tools.elide.page.Context.Metadata.Twitter?
  get() = if (hasTwitter()) getTwitter() else null

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.page.Context.Metadata.Twitter.copy(block: tools.elide.page.ContextKt.MetadataKt.TwitterKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.Metadata.Twitter =
  tools.elide.page.ContextKt.MetadataKt.TwitterKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val tools.elide.page.Context.Metadata.TwitterOrBuilder.localeOrNull: tools.elide.base.LanguageSpec?
  get() = if (hasLocale()) getLocale() else null

val tools.elide.page.Context.MetadataOrBuilder.semanticOrNull: tools.elide.page.SemanticMetadata?
  get() = if (hasSemantic()) getSemantic() else null

val tools.elide.page.Context.MetadataOrBuilder.manifestOrNull: com.google.common.html.types.TrustedResourceUrlProto?
  get() = if (hasManifest()) getManifest() else null

val tools.elide.page.Context.MetadataOrBuilder.languageOrNull: tools.elide.base.LanguageSpec?
  get() = if (hasLanguage()) getLanguage() else null

val tools.elide.page.Context.MetadataOrBuilder.openGraphOrNull: tools.elide.page.Context.Metadata.OpenGraph?
  get() = if (hasOpenGraph()) getOpenGraph() else null

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.page.Context.PageLink.copy(block: tools.elide.page.ContextKt.PageLinkKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.PageLink =
  tools.elide.page.ContextKt.PageLinkKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val tools.elide.page.Context.PageLinkOrBuilder.hrefOrNull: com.google.common.html.types.TrustedResourceUrlProto?
  get() = if (hasHref()) getHref() else null

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.page.Context.AppManifest.copy(block: tools.elide.page.ContextKt.AppManifestKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.AppManifest =
  tools.elide.page.ContextKt.AppManifestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.page.Context.AppManifest.Icon.copy(block: tools.elide.page.ContextKt.AppManifestKt.IconKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.AppManifest.Icon =
  tools.elide.page.ContextKt.AppManifestKt.IconKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val tools.elide.page.Context.AppManifest.IconOrBuilder.srcOrNull: com.google.common.html.types.TrustedResourceUrlProto?
  get() = if (hasSrc()) getSrc() else null

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.page.Context.AppManifest.RelatedApplication.copy(block: tools.elide.page.ContextKt.AppManifestKt.RelatedApplicationKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.AppManifest.RelatedApplication =
  tools.elide.page.ContextKt.AppManifestKt.RelatedApplicationKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val tools.elide.page.Context.AppManifest.RelatedApplicationOrBuilder.uriOrNull: com.google.common.html.types.TrustedResourceUrlProto?
  get() = if (hasUri()) getUri() else null

val tools.elide.page.Context.AppManifestOrBuilder.languageOrNull: tools.elide.base.LanguageSpec?
  get() = if (hasLanguage()) getLanguage() else null

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.page.Context.Styles.copy(block: tools.elide.page.ContextKt.StylesKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.Styles =
  tools.elide.page.ContextKt.StylesKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.page.Context.Styles.Stylesheet.copy(block: tools.elide.page.ContextKt.StylesKt.StylesheetKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.Styles.Stylesheet =
  tools.elide.page.ContextKt.StylesKt.StylesheetKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val tools.elide.page.Context.Styles.StylesheetOrBuilder.uriOrNull: com.google.common.html.types.TrustedResourceUrlProto?
  get() = if (hasUri()) getUri() else null

val tools.elide.page.Context.StylesOrBuilder.liftedOrNull: com.google.common.html.types.SafeStyleProto?
  get() = if (hasLifted()) getLifted() else null

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.page.Context.Fonts.copy(block: tools.elide.page.ContextKt.FontsKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.Fonts =
  tools.elide.page.ContextKt.FontsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.page.Context.Fonts.FontReference.copy(block: tools.elide.page.ContextKt.FontsKt.FontReferenceKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.Fonts.FontReference =
  tools.elide.page.ContextKt.FontsKt.FontReferenceKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val tools.elide.page.Context.Fonts.FontReferenceOrBuilder.uriOrNull: com.google.common.html.types.TrustedResourceUrlProto?
  get() = if (hasUri()) getUri() else null

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.page.Context.Fonts.FontPackage.copy(block: tools.elide.page.ContextKt.FontsKt.FontPackageKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.Fonts.FontPackage =
  tools.elide.page.ContextKt.FontsKt.FontPackageKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.page.Context.Scripts.copy(block: tools.elide.page.ContextKt.ScriptsKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.Scripts =
  tools.elide.page.ContextKt.ScriptsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.page.Context.Scripts.JavaScript.copy(block: tools.elide.page.ContextKt.ScriptsKt.JavaScriptKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.Scripts.JavaScript =
  tools.elide.page.ContextKt.ScriptsKt.JavaScriptKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val tools.elide.page.Context.Scripts.JavaScriptOrBuilder.uriOrNull: com.google.common.html.types.TrustedResourceUrlProto?
  get() = if (hasUri()) getUri() else null

val tools.elide.page.Context.ScriptsOrBuilder.liftedOrNull: com.google.common.html.types.SafeScriptProto?
  get() = if (hasLifted()) getLifted() else null

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.page.Context.DynamicETag.copy(block: tools.elide.page.ContextKt.DynamicETagKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.DynamicETag =
  tools.elide.page.ContextKt.DynamicETagKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val tools.elide.page.Context.DynamicETagOrBuilder.preimageOrNull: tools.elide.data.DataFingerprint?
  get() = if (hasPreimage()) getPreimage() else null

val tools.elide.page.Context.DynamicETagOrBuilder.responseOrNull: tools.elide.data.DataFingerprint?
  get() = if (hasResponse()) getResponse() else null

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.page.Context.RDFPrefix.copy(block: tools.elide.page.ContextKt.RDFPrefixKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.RDFPrefix =
  tools.elide.page.ContextKt.RDFPrefixKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.page.Context.Cookie.copy(block: tools.elide.page.ContextKt.CookieKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.Cookie =
  tools.elide.page.ContextKt.CookieKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val tools.elide.page.Context.CookieOrBuilder.absoluteExpireOrNull: com.google.protobuf.Timestamp?
  get() = if (hasAbsoluteExpire()) getAbsoluteExpire() else null

val tools.elide.page.Context.CookieOrBuilder.relativeExpireOrNull: com.google.protobuf.Duration?
  get() = if (hasRelativeExpire()) getRelativeExpire() else null

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.page.Context.ClientHints.copy(block: tools.elide.page.ContextKt.ClientHintsKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.ClientHints =
  tools.elide.page.ContextKt.ClientHintsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
inline fun tools.elide.page.Context.ResponseHeader.copy(block: tools.elide.page.ContextKt.ResponseHeaderKt.Dsl.() -> kotlin.Unit): tools.elide.page.Context.ResponseHeader =
  tools.elide.page.ContextKt.ResponseHeaderKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val tools.elide.page.ContextOrBuilder.metaOrNull: tools.elide.page.Context.Metadata?
  get() = if (hasMeta()) getMeta() else null

val tools.elide.page.ContextOrBuilder.stylesOrNull: tools.elide.page.Context.Styles?
  get() = if (hasStyles()) getStyles() else null

val tools.elide.page.ContextOrBuilder.fontsOrNull: tools.elide.page.Context.Fonts?
  get() = if (hasFonts()) getFonts() else null

val tools.elide.page.ContextOrBuilder.scriptsOrNull: tools.elide.page.Context.Scripts?
  get() = if (hasScripts()) getScripts() else null

val tools.elide.page.ContextOrBuilder.manifestOrNull: tools.elide.page.Context.AppManifest?
  get() = if (hasManifest()) getManifest() else null

val tools.elide.page.ContextOrBuilder.etagOrNull: tools.elide.page.Context.DynamicETag?
  get() = if (hasEtag()) getEtag() else null

val tools.elide.page.ContextOrBuilder.hintsOrNull: tools.elide.page.Context.ClientHints?
  get() = if (hasHints()) getHints() else null

val tools.elide.page.ContextOrBuilder.cdnPrefixOrNull: com.google.common.html.types.TrustedResourceUrlProto?
  get() = if (hasCdnPrefix()) getCdnPrefix() else null

