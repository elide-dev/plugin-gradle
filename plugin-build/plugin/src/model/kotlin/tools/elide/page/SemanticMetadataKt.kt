//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: elide/page/semantic.proto

package tools.elide.page;

@kotlin.jvm.JvmName("-initializesemanticMetadata")
inline fun semanticMetadata(block: tools.elide.page.SemanticMetadataKt.Dsl.() -> kotlin.Unit): tools.elide.page.SemanticMetadata =
  tools.elide.page.SemanticMetadataKt.Dsl._create(tools.elide.page.SemanticMetadata.newBuilder()).apply { block() }._build()
object SemanticMetadataKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: tools.elide.page.SemanticMetadata.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: tools.elide.page.SemanticMetadata.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): tools.elide.page.SemanticMetadata = _builder.build()

    /**
     * <pre>
     * Defines the "kind" of content contained on a given page.
     * </pre>
     *
     * <code>.page.Kind kind = 1;</code>
     */
     var kind: tools.elide.page.Kind
      @JvmName("getKind")
      get() = _builder.getKind()
      @JvmName("setKind")
      set(value) {
        _builder.setKind(value)
      }
    /**
     * <pre>
     * Defines the "kind" of content contained on a given page.
     * </pre>
     *
     * <code>.page.Kind kind = 1;</code>
     */
    fun clearKind() {
      _builder.clearKind()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class FormatProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Formats to render semantic metadata in.
     * </pre>
     *
     * <code>repeated .page.Format format = 2;</code>
     */
     val format: com.google.protobuf.kotlin.DslList<tools.elide.page.Format, FormatProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getFormatList()
      )
    /**
     * <pre>
     * Formats to render semantic metadata in.
     * </pre>
     *
     * <code>repeated .page.Format format = 2;</code>
     * @param value The format to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addFormat")
    fun com.google.protobuf.kotlin.DslList<tools.elide.page.Format, FormatProxy>.add(value: tools.elide.page.Format) {
      _builder.addFormat(value)
    }/**
     * <pre>
     * Formats to render semantic metadata in.
     * </pre>
     *
     * <code>repeated .page.Format format = 2;</code>
     * @param value The format to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignFormat")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Format, FormatProxy>.plusAssign(value: tools.elide.page.Format) {
      add(value)
    }/**
     * <pre>
     * Formats to render semantic metadata in.
     * </pre>
     *
     * <code>repeated .page.Format format = 2;</code>
     * @param values The format to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllFormat")
    fun com.google.protobuf.kotlin.DslList<tools.elide.page.Format, FormatProxy>.addAll(values: kotlin.collections.Iterable<tools.elide.page.Format>) {
      _builder.addAllFormat(values)
    }/**
     * <pre>
     * Formats to render semantic metadata in.
     * </pre>
     *
     * <code>repeated .page.Format format = 2;</code>
     * @param values The format to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllFormat")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Format, FormatProxy>.plusAssign(values: kotlin.collections.Iterable<tools.elide.page.Format>) {
      addAll(values)
    }/**
     * <pre>
     * Formats to render semantic metadata in.
     * </pre>
     *
     * <code>repeated .page.Format format = 2;</code>
     * @param index The index to set the value at.
     * @param value The format to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setFormat")
    operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.Format, FormatProxy>.set(index: kotlin.Int, value: tools.elide.page.Format) {
      _builder.setFormat(index, value)
    }/**
     * <pre>
     * Formats to render semantic metadata in.
     * </pre>
     *
     * <code>repeated .page.Format format = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearFormat")
    fun com.google.protobuf.kotlin.DslList<tools.elide.page.Format, FormatProxy>.clear() {
      _builder.clearFormat()
    }
    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class MediaProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Describes page-level semantic media.
     * </pre>
     *
     * <code>repeated .page.MediaAsset media = 3;</code>
     */
     val media: com.google.protobuf.kotlin.DslList<tools.elide.page.MediaAsset, MediaProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getMediaList()
      )
    /**
     * <pre>
     * Describes page-level semantic media.
     * </pre>
     *
     * <code>repeated .page.MediaAsset media = 3;</code>
     * @param value The media to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addMedia")
    fun com.google.protobuf.kotlin.DslList<tools.elide.page.MediaAsset, MediaProxy>.add(value: tools.elide.page.MediaAsset) {
      _builder.addMedia(value)
    }
    /**
     * <pre>
     * Describes page-level semantic media.
     * </pre>
     *
     * <code>repeated .page.MediaAsset media = 3;</code>
     * @param value The media to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignMedia")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.MediaAsset, MediaProxy>.plusAssign(value: tools.elide.page.MediaAsset) {
      add(value)
    }
    /**
     * <pre>
     * Describes page-level semantic media.
     * </pre>
     *
     * <code>repeated .page.MediaAsset media = 3;</code>
     * @param values The media to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllMedia")
    fun com.google.protobuf.kotlin.DslList<tools.elide.page.MediaAsset, MediaProxy>.addAll(values: kotlin.collections.Iterable<tools.elide.page.MediaAsset>) {
      _builder.addAllMedia(values)
    }
    /**
     * <pre>
     * Describes page-level semantic media.
     * </pre>
     *
     * <code>repeated .page.MediaAsset media = 3;</code>
     * @param values The media to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllMedia")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.MediaAsset, MediaProxy>.plusAssign(values: kotlin.collections.Iterable<tools.elide.page.MediaAsset>) {
      addAll(values)
    }
    /**
     * <pre>
     * Describes page-level semantic media.
     * </pre>
     *
     * <code>repeated .page.MediaAsset media = 3;</code>
     * @param index The index to set the value at.
     * @param value The media to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setMedia")
    operator fun com.google.protobuf.kotlin.DslList<tools.elide.page.MediaAsset, MediaProxy>.set(index: kotlin.Int, value: tools.elide.page.MediaAsset) {
      _builder.setMedia(index, value)
    }
    /**
     * <pre>
     * Describes page-level semantic media.
     * </pre>
     *
     * <code>repeated .page.MediaAsset media = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearMedia")
    fun com.google.protobuf.kotlin.DslList<tools.elide.page.MediaAsset, MediaProxy>.clear() {
      _builder.clearMedia()
    }


    /**
     * <pre>
     * Semantic metadata content.
     * </pre>
     *
     * <code>string content = 4;</code>
     */
    var content: kotlin.String
      @JvmName("getContent")
      get() = _builder.getContent()
      @JvmName("setContent")
      set(value) {
        _builder.setContent(value)
      }
    /**
     * <pre>
     * Semantic metadata content.
     * </pre>
     *
     * <code>string content = 4;</code>
     */
    fun clearContent() {
      _builder.clearContent()
    }
    /**
     * <pre>
     * Semantic metadata content.
     * </pre>
     *
     * <code>string content = 4;</code>
     * @return Whether the content field is set.
     */
    fun hasContent(): kotlin.Boolean {
      return _builder.hasContent()
    }
    val payloadCase: tools.elide.page.SemanticMetadata.PayloadCase
      @JvmName("getPayloadCase")
      get() = _builder.getPayloadCase()

    fun clearPayload() {
      _builder.clearPayload()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun tools.elide.page.SemanticMetadata.copy(block: tools.elide.page.SemanticMetadataKt.Dsl.() -> kotlin.Unit): tools.elide.page.SemanticMetadata =
  tools.elide.page.SemanticMetadataKt.Dsl._create(this.toBuilder()).apply { block() }._build()

