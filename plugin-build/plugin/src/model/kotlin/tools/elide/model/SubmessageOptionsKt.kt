//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: elide/model/model.proto

package tools.elide.model;

@kotlin.jvm.JvmName("-initializesubmessageOptions")
inline fun submessageOptions(block: tools.elide.model.SubmessageOptionsKt.Dsl.() -> kotlin.Unit): tools.elide.model.SubmessageOptions =
  tools.elide.model.SubmessageOptionsKt.Dsl._create(tools.elide.model.SubmessageOptions.newBuilder()).apply { block() }._build()
object SubmessageOptionsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: tools.elide.model.SubmessageOptions.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: tools.elide.model.SubmessageOptions.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): tools.elide.model.SubmessageOptions = _builder.build()

    /**
     * <pre>
     * Collection storage mode for the given sub-message field.
     * </pre>
     *
     * <code>.model.CollectionMode mode = 1;</code>
     */
     var mode: tools.elide.model.CollectionMode
      @JvmName("getMode")
      get() = _builder.getMode()
      @JvmName("setMode")
      set(value) {
        _builder.setMode(value)
      }
    /**
     * <pre>
     * Collection storage mode for the given sub-message field.
     * </pre>
     *
     * <code>.model.CollectionMode mode = 1;</code>
     */
    fun clearMode() {
      _builder.clearMode()
    }

    /**
     * <pre>
     * Concrete type name for this sub-message type.
     * </pre>
     *
     * <code>string concrete = 2;</code>
     */
    var concrete: kotlin.String
      @JvmName("getConcrete")
      get() = _builder.getConcrete()
      @JvmName("setConcrete")
      set(value) {
        _builder.setConcrete(value)
      }
    /**
     * <pre>
     * Concrete type name for this sub-message type.
     * </pre>
     *
     * <code>string concrete = 2;</code>
     */
    fun clearConcrete() {
      _builder.clearConcrete()
    }

    /**
     * <pre>
     * Data path for the given sub-message field.
     * </pre>
     *
     * <code>string path = 3;</code>
     */
    var path: kotlin.String
      @JvmName("getPath")
      get() = _builder.getPath()
      @JvmName("setPath")
      set(value) {
        _builder.setPath(value)
      }
    /**
     * <pre>
     * Data path for the given sub-message field.
     * </pre>
     *
     * <code>string path = 3;</code>
     */
    fun clearPath() {
      _builder.clearPath()
    }

    /**
     * <pre>
     * If the persistence node is in `COLLECTION` mode, this flag will embed it in the parent entity anyway. Useful in
     * some circumstances where sub-listed data is for indexing, and fetching it repeatedly would be inefficient.
     * </pre>
     *
     * <code>bool embed = 4;</code>
     */
    var embed: kotlin.Boolean
      @JvmName("getEmbed")
      get() = _builder.getEmbed()
      @JvmName("setEmbed")
      set(value) {
        _builder.setEmbed(value)
      }
    /**
     * <pre>
     * If the persistence node is in `COLLECTION` mode, this flag will embed it in the parent entity anyway. Useful in
     * some circumstances where sub-listed data is for indexing, and fetching it repeatedly would be inefficient.
     * </pre>
     *
     * <code>bool embed = 4;</code>
     */
    fun clearEmbed() {
      _builder.clearEmbed()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun tools.elide.model.SubmessageOptions.copy(block: tools.elide.model.SubmessageOptionsKt.Dsl.() -> kotlin.Unit): tools.elide.model.SubmessageOptions =
  tools.elide.model.SubmessageOptionsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

