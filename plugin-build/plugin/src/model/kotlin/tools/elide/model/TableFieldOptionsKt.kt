//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: elide/model/model.proto

package tools.elide.model;

@kotlin.jvm.JvmName("-initializetableFieldOptions")
inline fun tableFieldOptions(block: tools.elide.model.TableFieldOptionsKt.Dsl.() -> kotlin.Unit): tools.elide.model.TableFieldOptions =
  tools.elide.model.TableFieldOptionsKt.Dsl._create(tools.elide.model.TableFieldOptions.newBuilder()).apply { block() }._build()
object TableFieldOptionsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: tools.elide.model.TableFieldOptions.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: tools.elide.model.TableFieldOptions.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): tools.elide.model.TableFieldOptions = _builder.build()

    /**
     * <pre>
     * Marks this field as `REQUIRED` in tabular schemas.
     * </pre>
     *
     * <code>bool require = 1;</code>
     */
    var require: kotlin.Boolean
      @JvmName("getRequire")
      get() = _builder.getRequire()
      @JvmName("setRequire")
      set(value) {
        _builder.setRequire(value)
      }
    /**
     * <pre>
     * Marks this field as `REQUIRED` in tabular schemas.
     * </pre>
     *
     * <code>bool require = 1;</code>
     */
    fun clearRequire() {
      _builder.clearRequire()
    }

    /**
     * <pre>
     * Marks this field as ignored for serialization in tabular circumstances.
     * </pre>
     *
     * <code>bool ignore = 2;</code>
     */
    var ignore: kotlin.Boolean
      @JvmName("getIgnore")
      get() = _builder.getIgnore()
      @JvmName("setIgnore")
      set(value) {
        _builder.setIgnore(value)
      }
    /**
     * <pre>
     * Marks this field as ignored for serialization in tabular circumstances.
     * </pre>
     *
     * <code>bool ignore = 2;</code>
     */
    fun clearIgnore() {
      _builder.clearIgnore()
    }

    /**
     * <pre>
     * Overrides the BigQuery type associated with the exported form of this message field.
     * </pre>
     *
     * <code>.model.BigQueryOptions.BigQueryType bqtype = 3;</code>
     */
     var bqtype: tools.elide.model.BigQueryOptions.BigQueryType
      @JvmName("getBqtype")
      get() = _builder.getBqtype()
      @JvmName("setBqtype")
      set(value) {
        _builder.setBqtype(value)
      }
    /**
     * <pre>
     * Overrides the BigQuery type associated with the exported form of this message field.
     * </pre>
     *
     * <code>.model.BigQueryOptions.BigQueryType bqtype = 3;</code>
     */
    fun clearBqtype() {
      _builder.clearBqtype()
    }

    /**
     * <pre>
     * Overrides the Spanner type associated with the exported form of this message field.
     * </pre>
     *
     * <code>.model.SpannerOptions.SpannerType sptype = 4;</code>
     */
     var sptype: tools.elide.model.SpannerOptions.SpannerType
      @JvmName("getSptype")
      get() = _builder.getSptype()
      @JvmName("setSptype")
      set(value) {
        _builder.setSptype(value)
      }
    /**
     * <pre>
     * Overrides the Spanner type associated with the exported form of this message field.
     * </pre>
     *
     * <code>.model.SpannerOptions.SpannerType sptype = 4;</code>
     */
    fun clearSptype() {
      _builder.clearSptype()
    }

    /**
     * <pre>
     * Converts this field into a `REPEATED`-mode field in BigQuery.
     * </pre>
     *
     * <code>bool repeated = 5;</code>
     */
    var repeated: kotlin.Boolean
      @JvmName("getRepeated")
      get() = _builder.getRepeated()
      @JvmName("setRepeated")
      set(value) {
        _builder.setRepeated(value)
      }
    /**
     * <pre>
     * Converts this field into a `REPEATED`-mode field in BigQuery.
     * </pre>
     *
     * <code>bool repeated = 5;</code>
     */
    fun clearRepeated() {
      _builder.clearRepeated()
    }

    /**
     * <pre>
     * Size of the field. Pass `0` (the default) for maximum width.
     * </pre>
     *
     * <code>uint32 size = 6;</code>
     */
    var size: kotlin.Int
      @JvmName("getSize")
      get() = _builder.getSize()
      @JvmName("setSize")
      set(value) {
        _builder.setSize(value)
      }
    /**
     * <pre>
     * Size of the field. Pass `0` (the default) for maximum width.
     * </pre>
     *
     * <code>uint32 size = 6;</code>
     */
    fun clearSize() {
      _builder.clearSize()
    }

    /**
     * <pre>
     * Name of the field in columnar circumstances.
     * </pre>
     *
     * <code>string name = 7;</code>
     */
    var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * <pre>
     * Name of the field in columnar circumstances.
     * </pre>
     *
     * <code>string name = 7;</code>
     */
    fun clearName() {
      _builder.clearName()
    }

    /**
     * <pre>
     * Unique ID or path assigned to this field in a universally specified data model.
     * </pre>
     *
     * <code>string id = 8;</code>
     */
    var id: kotlin.String
      @JvmName("getId")
      get() = _builder.getId()
      @JvmName("setId")
      set(value) {
        _builder.setId(value)
      }
    /**
     * <pre>
     * Unique ID or path assigned to this field in a universally specified data model.
     * </pre>
     *
     * <code>string id = 8;</code>
     */
    fun clearId() {
      _builder.clearId()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun tools.elide.model.TableFieldOptions.copy(block: tools.elide.model.TableFieldOptionsKt.Dsl.() -> kotlin.Unit): tools.elide.model.TableFieldOptions =
  tools.elide.model.TableFieldOptionsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

