//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: elide/model/model.proto

package tools.elide.model;

@kotlin.jvm.JvmName("-initializefieldPersistenceOptions")
inline fun fieldPersistenceOptions(block: tools.elide.model.FieldPersistenceOptionsKt.Dsl.() -> kotlin.Unit): tools.elide.model.FieldPersistenceOptions =
  tools.elide.model.FieldPersistenceOptionsKt.Dsl._create(tools.elide.model.FieldPersistenceOptions.newBuilder()).apply { block() }._build()
object FieldPersistenceOptionsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: tools.elide.model.FieldPersistenceOptions.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: tools.elide.model.FieldPersistenceOptions.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): tools.elide.model.FieldPersistenceOptions = _builder.build()

    /**
     * <pre>
     * Field type, for special-case fields.
     * </pre>
     *
     * <code>.model.FieldType type = 1;</code>
     */
     var type: tools.elide.model.FieldType
      @JvmName("getType")
      get() = _builder.getType()
      @JvmName("setType")
      set(value) {
        _builder.setType(value)
      }
    /**
     * <pre>
     * Field type, for special-case fields.
     * </pre>
     *
     * <code>.model.FieldType type = 1;</code>
     */
    fun clearType() {
      _builder.clearType()
    }

    /**
     * <pre>
     * Summary for this field, which provides a narrative description. It should be suitable for use in external
     * circumstances, like documentation.
     * </pre>
     *
     * <code>string summary = 2;</code>
     */
    var summary: kotlin.String
      @JvmName("getSummary")
      get() = _builder.getSummary()
      @JvmName("setSummary")
      set(value) {
        _builder.setSummary(value)
      }
    /**
     * <pre>
     * Summary for this field, which provides a narrative description. It should be suitable for use in external
     * circumstances, like documentation.
     * </pre>
     *
     * <code>string summary = 2;</code>
     */
    fun clearSummary() {
      _builder.clearSummary()
    }

    /**
     * <pre>
     * This item is a timestamp, and we would like it to be automatically updated each time the model that contains it is
     * modified in underlying storage. The field should be read-only.
     * </pre>
     *
     * <code>bool stamp_update = 3;</code>
     */
    var stampUpdate: kotlin.Boolean
      @JvmName("getStampUpdate")
      get() = _builder.getStampUpdate()
      @JvmName("setStampUpdate")
      set(value) {
        _builder.setStampUpdate(value)
      }
    /**
     * <pre>
     * This item is a timestamp, and we would like it to be automatically updated each time the model that contains it is
     * modified in underlying storage. The field should be read-only.
     * </pre>
     *
     * <code>bool stamp_update = 3;</code>
     */
    fun clearStampUpdate() {
      _builder.clearStampUpdate()
    }

    /**
     * <pre>
     * This item is a timestamp, and we would like it to be automatically set when the model is created. After that point,
     * we would like this field to be read-only.
     * </pre>
     *
     * <code>bool stamp_create = 4;</code>
     */
    var stampCreate: kotlin.Boolean
      @JvmName("getStampCreate")
      get() = _builder.getStampCreate()
      @JvmName("setStampCreate")
      set(value) {
        _builder.setStampCreate(value)
      }
    /**
     * <pre>
     * This item is a timestamp, and we would like it to be automatically set when the model is created. After that point,
     * we would like this field to be read-only.
     * </pre>
     *
     * <code>bool stamp_create = 4;</code>
     */
    fun clearStampCreate() {
      _builder.clearStampCreate()
    }

    /**
     * <pre>
     * This field should not allow writes, but rather produce its value dynamically. Fields marked in this manner cannot
     * be set by external code at any point in time.
     * </pre>
     *
     * <code>bool read_only = 5;</code>
     */
    var readOnly: kotlin.Boolean
      @JvmName("getReadOnly")
      get() = _builder.getReadOnly()
      @JvmName("setReadOnly")
      set(value) {
        _builder.setReadOnly(value)
      }
    /**
     * <pre>
     * This field should not allow writes, but rather produce its value dynamically. Fields marked in this manner cannot
     * be set by external code at any point in time.
     * </pre>
     *
     * <code>bool read_only = 5;</code>
     */
    fun clearReadOnly() {
      _builder.clearReadOnly()
    }

    /**
     * <pre>
     * This field should allow writes when the model that contains it is written, but then, henceforth, the model should
     * not allow this field to be mutated.
     * </pre>
     *
     * <code>bool immutable = 6;</code>
     */
    var immutable: kotlin.Boolean
      @JvmName("getImmutable")
      get() = _builder.getImmutable()
      @JvmName("setImmutable")
      set(value) {
        _builder.setImmutable(value)
      }
    /**
     * <pre>
     * This field should allow writes when the model that contains it is written, but then, henceforth, the model should
     * not allow this field to be mutated.
     * </pre>
     *
     * <code>bool immutable = 6;</code>
     */
    fun clearImmutable() {
      _builder.clearImmutable()
    }

    /**
     * <pre>
     * This field should always be explicitly listed with a value, even if it is set to the default value. This function
     * is especially useful for enums with default values, when there is a desire to have consistent indexes.
     * </pre>
     *
     * <code>bool explicit = 7;</code>
     */
    var explicit: kotlin.Boolean
      @JvmName("getExplicit")
      get() = _builder.getExplicit()
      @JvmName("setExplicit")
      set(value) {
        _builder.setExplicit(value)
      }
    /**
     * <pre>
     * This field should always be explicitly listed with a value, even if it is set to the default value. This function
     * is especially useful for enums with default values, when there is a desire to have consistent indexes.
     * </pre>
     *
     * <code>bool explicit = 7;</code>
     */
    fun clearExplicit() {
      _builder.clearExplicit()
    }

    /**
     * <pre>
     * Describes the visibility level of a given field in a tree of fields. This value applies recursively under message
     * fields on which it is applied. Depending on the visibility level active when data is deserialized or serialized,
     * certain data may be withheld corresponding to the invoking user or system's access level.
     * </pre>
     *
     * <code>.model.FieldVisibility visibility = 8;</code>
     */
     var visibility: tools.elide.model.FieldVisibility
      @JvmName("getVisibility")
      get() = _builder.getVisibility()
      @JvmName("setVisibility")
      set(value) {
        _builder.setVisibility(value)
      }
    /**
     * <pre>
     * Describes the visibility level of a given field in a tree of fields. This value applies recursively under message
     * fields on which it is applied. Depending on the visibility level active when data is deserialized or serialized,
     * certain data may be withheld corresponding to the invoking user or system's access level.
     * </pre>
     *
     * <code>.model.FieldVisibility visibility = 8;</code>
     */
    fun clearVisibility() {
      _builder.clearVisibility()
    }

    /**
     * <pre>
     * Provided for backwards compatibility. Do not use.
     * </pre>
     *
     * <code>string description = 9 [deprecated = true];</code>
     */
    @kotlin.Deprecated(message = "Field description is deprecated") var description: kotlin.String
      @JvmName("getDescription")
      get() = _builder.getDescription()
      @JvmName("setDescription")
      set(value) {
        _builder.setDescription(value)
      }
    /**
     * <pre>
     * Provided for backwards compatibility. Do not use.
     * </pre>
     *
     * <code>string description = 9 [deprecated = true];</code>
     * @deprecated model.FieldPersistenceOptions.description is deprecated.
     *     See elide/model/model.proto;l=256
     */
    fun clearDescription() {
      _builder.clearDescription()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun tools.elide.model.FieldPersistenceOptions.copy(block: tools.elide.model.FieldPersistenceOptionsKt.Dsl.() -> kotlin.Unit): tools.elide.model.FieldPersistenceOptions =
  tools.elide.model.FieldPersistenceOptionsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

