//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: elide/base/language.proto

package tools.elide.base;

@kotlin.jvm.JvmName("-initializelanguageSpec")
inline fun languageSpec(block: tools.elide.base.LanguageSpecKt.Dsl.() -> kotlin.Unit): tools.elide.base.LanguageSpec =
  tools.elide.base.LanguageSpecKt.Dsl._create(tools.elide.base.LanguageSpec.newBuilder()).apply { block() }._build()
object LanguageSpecKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: tools.elide.base.LanguageSpec.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: tools.elide.base.LanguageSpec.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): tools.elide.base.LanguageSpec = _builder.build()

    /**
     * <pre>
     * Enumerated language specifier.
     * </pre>
     *
     * <code>.base.Language language = 1;</code>
     */
     var language: tools.elide.base.Language
      @JvmName("getLanguage")
      get() = _builder.getLanguage()
      @JvmName("setLanguage")
      set(value) {
        _builder.setLanguage(value)
      }
    /**
     * <pre>
     * Enumerated language specifier.
     * </pre>
     *
     * <code>.base.Language language = 1;</code>
     */
    fun clearLanguage() {
      _builder.clearLanguage()
    }
    /**
     * <pre>
     * Enumerated language specifier.
     * </pre>
     *
     * <code>.base.Language language = 1;</code>
     * @return Whether the language field is set.
     */
    fun hasLanguage(): kotlin.Boolean {
      return _builder.hasLanguage()
    }

    /**
     * <pre>
     * Two-character ISO-standard language specifier (for example: "EN" for English, "FR" for French). Casing doesn't
     * matter but upper-casing should be preferred for consistency.
     * </pre>
     *
     * <code>string iso_language = 2;</code>
     */
    var isoLanguage: kotlin.String
      @JvmName("getIsoLanguage")
      get() = _builder.getIsoLanguage()
      @JvmName("setIsoLanguage")
      set(value) {
        _builder.setIsoLanguage(value)
      }
    /**
     * <pre>
     * Two-character ISO-standard language specifier (for example: "EN" for English, "FR" for French). Casing doesn't
     * matter but upper-casing should be preferred for consistency.
     * </pre>
     *
     * <code>string iso_language = 2;</code>
     */
    fun clearIsoLanguage() {
      _builder.clearIsoLanguage()
    }
    /**
     * <pre>
     * Two-character ISO-standard language specifier (for example: "EN" for English, "FR" for French). Casing doesn't
     * matter but upper-casing should be preferred for consistency.
     * </pre>
     *
     * <code>string iso_language = 2;</code>
     * @return Whether the isoLanguage field is set.
     */
    fun hasIsoLanguage(): kotlin.Boolean {
      return _builder.hasIsoLanguage()
    }

    /**
     * <pre>
     * Two-character ISO-standard country code, used as a modifier for a language spec (i.e. the `us` in `en-us`).
     * </pre>
     *
     * <code>string iso_country = 3;</code>
     */
    var isoCountry: kotlin.String
      @JvmName("getIsoCountry")
      get() = _builder.getIsoCountry()
      @JvmName("setIsoCountry")
      set(value) {
        _builder.setIsoCountry(value)
      }
    /**
     * <pre>
     * Two-character ISO-standard country code, used as a modifier for a language spec (i.e. the `us` in `en-us`).
     * </pre>
     *
     * <code>string iso_country = 3;</code>
     */
    fun clearIsoCountry() {
      _builder.clearIsoCountry()
    }
    /**
     * <pre>
     * Two-character ISO-standard country code, used as a modifier for a language spec (i.e. the `us` in `en-us`).
     * </pre>
     *
     * <code>string iso_country = 3;</code>
     * @return Whether the isoCountry field is set.
     */
    fun hasIsoCountry(): kotlin.Boolean {
      return _builder.hasIsoCountry()
    }

    /**
     * <pre>
     * Dialect to specify as part of this language spec, based on a simple two-character string.
     * </pre>
     *
     * <code>string dialect = 4;</code>
     */
    var dialect: kotlin.String
      @JvmName("getDialect")
      get() = _builder.getDialect()
      @JvmName("setDialect")
      set(value) {
        _builder.setDialect(value)
      }
    /**
     * <pre>
     * Dialect to specify as part of this language spec, based on a simple two-character string.
     * </pre>
     *
     * <code>string dialect = 4;</code>
     */
    fun clearDialect() {
      _builder.clearDialect()
    }
    /**
     * <pre>
     * Dialect to specify as part of this language spec, based on a simple two-character string.
     * </pre>
     *
     * <code>string dialect = 4;</code>
     * @return Whether the dialect field is set.
     */
    fun hasDialect(): kotlin.Boolean {
      return _builder.hasDialect()
    }
    val selectionCase: tools.elide.base.LanguageSpec.SelectionCase
      @JvmName("getSelectionCase")
      get() = _builder.getSelectionCase()

    fun clearSelection() {
      _builder.clearSelection()
    }
    val modifierCase: tools.elide.base.LanguageSpec.ModifierCase
      @JvmName("getModifierCase")
      get() = _builder.getModifierCase()

    fun clearModifier() {
      _builder.clearModifier()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun tools.elide.base.LanguageSpec.copy(block: tools.elide.base.LanguageSpecKt.Dsl.() -> kotlin.Unit): tools.elide.base.LanguageSpec =
  tools.elide.base.LanguageSpecKt.Dsl._create(this.toBuilder()).apply { block() }._build()

